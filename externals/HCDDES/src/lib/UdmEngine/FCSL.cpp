// cpp(meta datanetwork format) source file FCSL.cpp generated from diagram FCSL
// generated on Mon Dec 10 10:56:38 2007

#include "FCSL.h"
#include "UmlExt.h"

#include "UdmStatic.h"

#include "UdmDom.h"
#include "FCSL_xsd.h"
#include "FCSL_FM_xsd.h"

#include "FCSL_SLSF_xsd.h"


namespace FCSL {

		::Uml::Diagram umldiagram;

		::Uml::Class EventPortMapping_Members_Base::meta;
		::Uml::Class CommMapping_Members_Base::meta;
		::Uml::Class PortMapping_Members_Base::meta;
		::Uml::Class ScheduleItem::meta;
		::Uml::Class Partition::meta;
		::Uml::Class CommMapping::meta;
		::Uml::Class Process::meta;
		::Uml::Class OperatingMode::meta;
		::Uml::Class ProcessingModule::meta;
		::Uml::Class DevicePort::meta;
		::Uml::Class Bus::meta;
		::Uml::Class BusPort::meta;
		::Uml::Class HWElement::meta;
		::Uml::Class Wire::meta;
		::Uml::Class HardwareModels::meta;
		::Uml::Class CommElement::meta;
		::Uml::Class HardwareSheet::meta;
		::Uml::Class Port2Channel::meta;
		::Uml::Class Channel2Port::meta;
		::Uml::Class EventPort::meta;
		::Uml::Class Port::meta;
		::Uml::Class Channel::meta;
		::Uml::Class EventChannel::meta;
		::Uml::Class ComponentSheet::meta;
		::Uml::Class Component::meta;
		::Uml::Class EventPortMapping::meta;
		::Uml::Class OutputPort::meta;
		::Uml::Class OE2EC::meta;
		::Uml::Class EC2IE::meta;
		::Uml::Class ComponentModels::meta;
		::Uml::Class BitTestRef::meta;
		::Uml::Class PortMapping::meta;
		::Uml::Class InputEvent::meta;
		::Uml::Class SystemRef::meta;
		::Uml::Class OutputEvent::meta;
		::Uml::Class InputPort::meta;
		::Uml::Class ComponentShortcut::meta;
		::Uml::Class RootFolder::meta;
		::Uml::Class MgaObject::meta;
		::Uml::Attribute ScheduleItem::meta_Duration;
		::Uml::Attribute ScheduleItem::meta_activationDelay;
		::Uml::Attribute ScheduleItem::meta_activationPeriod;
		::Uml::Attribute Partition::meta_ID;
		::Uml::Attribute Partition::meta_Name;
		::Uml::Attribute Partition::meta_PartitionMemory;
		::Uml::Attribute Partition::meta_SystemPartition;
		::Uml::Attribute Partition::meta_Criticality;
		::Uml::Attribute Partition::meta_startupOrder;
		::Uml::Attribute Process::meta_TimeCapacity;
		::Uml::Attribute Process::meta_Name;
		::Uml::Attribute Process::meta_kindOfDeadline;
		::Uml::Attribute Process::meta_stackSize;
		::Uml::Attribute Process::meta_startOffset;
		::Uml::Attribute Process::meta_basePriority;
		::Uml::Attribute Process::meta_activationPeriod;
		::Uml::Attribute Process::meta_isAperiodic;
		::Uml::Attribute Process::meta_entryPoint;
		::Uml::Attribute Process::meta_infiniteTimeCapacity;
		::Uml::Attribute Process::meta_isHealthMonitor;
		::Uml::Attribute OperatingMode::meta_Name;
		::Uml::Attribute ProcessingModule::meta_SPECint_rate2000;
		::Uml::Attribute ProcessingModule::meta_Name;
		::Uml::Attribute ProcessingModule::meta_CPUType;
		::Uml::Attribute ProcessingModule::meta_Cores;
		::Uml::Attribute ProcessingModule::meta_SPECfp_rate2000;
		::Uml::Attribute ProcessingModule::meta_Memory;
		::Uml::Attribute DevicePort::meta_PhysicalAddress;
		::Uml::Attribute DevicePort::meta_Procedure;
		::Uml::Attribute Bus::meta_Medium;
		::Uml::Attribute Bus::meta_Name;
		::Uml::Attribute Bus::meta_FrameSize;
		::Uml::Attribute Bus::meta_BusSpeed;
		::Uml::Attribute Bus::meta_MajorCycle;
		::Uml::Attribute HardwareModels::meta_name;
		::Uml::Attribute EventPort::meta_Name;
		::Uml::Attribute Port::meta_MaxMessageSize;
		::Uml::Attribute Port::meta_Name;
		::Uml::Attribute Port::meta_RefreshRateSeconds;
		::Uml::Attribute Port::meta_MaxNbMessages;
		::Uml::Attribute Port::meta_Type;
		::Uml::Attribute Channel::meta_ID;
		::Uml::Attribute Channel::meta_Name;
		::Uml::Attribute Channel::meta_Type;
		::Uml::Attribute EventChannel::meta_QueuingDiscipline;
		::Uml::Attribute EventChannel::meta_Name;
		::Uml::Attribute EventChannel::meta_ChannelType;
		::Uml::Attribute EventChannel::meta_Count;
		::Uml::Attribute Component::meta_Name;
		::Uml::Attribute EventPortMapping::meta_StorageClass;
		::Uml::Attribute ComponentModels::meta_name;
		::Uml::Attribute PortMapping::meta_StorageClass;
		::Uml::Attribute RootFolder::meta_name;
		::Uml::Attribute MgaObject::meta_position;
		::Uml::Attribute MgaObject::meta_name;
		::Uml::AssociationRole EventPortMapping_Members_Base::meta_srcEventPortMapping, EventPortMapping_Members_Base::meta_srcEventPortMapping_rev;
		::Uml::AssociationRole EventPortMapping_Members_Base::meta_dstEventPortMapping, EventPortMapping_Members_Base::meta_dstEventPortMapping_rev;
		::Uml::AssociationRole CommMapping_Members_Base::meta_srcCommMapping, CommMapping_Members_Base::meta_srcCommMapping_rev;
		::Uml::AssociationRole CommMapping_Members_Base::meta_dstCommMapping, CommMapping_Members_Base::meta_dstCommMapping_rev;
		::Uml::AssociationRole PortMapping_Members_Base::meta_srcInPortMapping, PortMapping_Members_Base::meta_srcInPortMapping_rev;
		::Uml::AssociationRole PortMapping_Members_Base::meta_dstInPortMapping, PortMapping_Members_Base::meta_dstInPortMapping_rev;
		::Uml::AssociationRole ScheduleItem::meta_ref;
		::Uml::AssociationRole ScheduleItem::meta_setOperatingMode;
		::Uml::AssociationRole Partition::meta_referedbyScheduleItem;
		::Uml::AssociationRole Partition::meta_members;
		::Uml::AssociationRole CommMapping::meta_dstCommMapping_end_;
		::Uml::AssociationRole CommMapping::meta_srcCommMapping_end_;
		::Uml::AssociationRole Process::meta_setPartition;
		::Uml::AssociationRole Process::meta_ref;
		::Uml::AssociationRole OperatingMode::meta_members;
		::Uml::AssociationRole Wire::meta_dstWire_end_;
		::Uml::AssociationRole Wire::meta_srcWire_end_;
		::Uml::AssociationRole CommElement::meta_srcWire, CommElement::meta_srcWire_rev;
		::Uml::AssociationRole CommElement::meta_dstWire, CommElement::meta_dstWire_rev;
		::Uml::AssociationRole Port2Channel::meta_dstPort2Channel_end_;
		::Uml::AssociationRole Port2Channel::meta_srcPort2Channel_end_;
		::Uml::AssociationRole Channel2Port::meta_srcChannel2Port_end_;
		::Uml::AssociationRole Channel2Port::meta_dstChannel2Port_end_;
		::Uml::AssociationRole Channel::meta_srcPort2Channel, Channel::meta_srcPort2Channel_rev;
		::Uml::AssociationRole Channel::meta_dstChannel2Port, Channel::meta_dstChannel2Port_rev;
		::Uml::AssociationRole EventChannel::meta_srcOE2EC, EventChannel::meta_srcOE2EC_rev;
		::Uml::AssociationRole EventChannel::meta_dstEC2IE, EventChannel::meta_dstEC2IE_rev;
		::Uml::AssociationRole Component::meta_referedbyProcess;
		::Uml::AssociationRole Component::meta_referedbyComponentShortcut;
		::Uml::AssociationRole EventPortMapping::meta_dstEventPortMapping_end_;
		::Uml::AssociationRole EventPortMapping::meta_srcEventPortMapping_end_;
		::Uml::AssociationRole OutputPort::meta_dstPort2Channel, OutputPort::meta_dstPort2Channel_rev;
		::Uml::AssociationRole OE2EC::meta_dstOE2EC_end_;
		::Uml::AssociationRole OE2EC::meta_srcOE2EC_end_;
		::Uml::AssociationRole EC2IE::meta_srcEC2IE_end_;
		::Uml::AssociationRole EC2IE::meta_dstEC2IE_end_;
		::Uml::AssociationRole BitTestRef::meta_ref;
		::Uml::AssociationRole PortMapping::meta_dstInPortMapping_end_;
		::Uml::AssociationRole PortMapping::meta_srcInPortMapping_end_;
		::Uml::AssociationRole InputEvent::meta_srcEC2IE, InputEvent::meta_srcEC2IE_rev;
		::Uml::AssociationRole SystemRef::meta_ref;
		::Uml::AssociationRole OutputEvent::meta_dstOE2EC, OutputEvent::meta_dstOE2EC_rev;
		::Uml::AssociationRole InputPort::meta_srcChannel2Port, InputPort::meta_srcChannel2Port_rev;
		::Uml::AssociationRole ComponentShortcut::meta_ref;
		::Uml::CompositionParentRole ScheduleItem::meta_ProcessingModule_parent;
		::Uml::CompositionParentRole Partition::meta_ProcessingModule_parent;
		::Uml::CompositionParentRole CommMapping::meta_ProcessingModule_parent;
		::Uml::CompositionParentRole Process::meta_ProcessingModule_parent;
		::Uml::CompositionParentRole OperatingMode::meta_ProcessingModule_parent;
		::Uml::CompositionParentRole DevicePort::meta_ProcessingModule_parent;
		::Uml::CompositionParentRole HWElement::meta_HardwareSheet_parent;
		::Uml::CompositionParentRole HardwareModels::meta_RootFolder_parent;
		::Uml::CompositionParentRole HardwareSheet::meta_HardwareModels_parent;
		::Uml::CompositionParentRole Port2Channel::meta_ComponentSheet_parent;
		::Uml::CompositionParentRole Channel2Port::meta_ComponentSheet_parent;
		::Uml::CompositionParentRole EventPort::meta_Component_parent;
		::Uml::CompositionParentRole Port::meta_Component_parent;
		::Uml::CompositionParentRole Channel::meta_ComponentSheet_parent;
		::Uml::CompositionParentRole EventChannel::meta_ComponentSheet_parent;
		::Uml::CompositionParentRole ComponentSheet::meta_ComponentModels_parent;
		::Uml::CompositionParentRole Component::meta_ComponentSheet_parent;
		::Uml::CompositionParentRole EventPortMapping::meta_Component_parent;
		::Uml::CompositionParentRole OE2EC::meta_ComponentSheet_parent;
		::Uml::CompositionParentRole EC2IE::meta_ComponentSheet_parent;
		::Uml::CompositionParentRole ComponentModels::meta_RootFolder_parent;
		::Uml::CompositionParentRole BitTestRef::meta_Component_parent;
		::Uml::CompositionParentRole PortMapping::meta_Component_parent;
		::Uml::CompositionParentRole SystemRef::meta_Component_parent;
		::Uml::CompositionParentRole ComponentShortcut::meta_ComponentSheet_parent;
		::Uml::CompositionParentRole RootFolder::meta_RootFolder_parent;
		::Uml::CompositionChildRole ProcessingModule::meta_Process_children;
		::Uml::CompositionChildRole ProcessingModule::meta_DevicePort_children;
		::Uml::CompositionChildRole ProcessingModule::meta_OperatingMode_children;
		::Uml::CompositionChildRole ProcessingModule::meta_ScheduleItem_children;
		::Uml::CompositionChildRole ProcessingModule::meta_CommMapping_children;
		::Uml::CompositionChildRole ProcessingModule::meta_Partition_children;
		::Uml::CompositionChildRole HardwareModels::meta_HardwareSheet_children;
		::Uml::CompositionChildRole HardwareSheet::meta_HWElement_children;
		::Uml::CompositionChildRole ComponentSheet::meta_Component_children;
		::Uml::CompositionChildRole ComponentSheet::meta_EC2IE_children;
		::Uml::CompositionChildRole ComponentSheet::meta_OE2EC_children;
		::Uml::CompositionChildRole ComponentSheet::meta_ComponentShortcut_children;
		::Uml::CompositionChildRole ComponentSheet::meta_Channel2Port_children;
		::Uml::CompositionChildRole ComponentSheet::meta_EventChannel_children;
		::Uml::CompositionChildRole ComponentSheet::meta_Port2Channel_children;
		::Uml::CompositionChildRole ComponentSheet::meta_Channel_children;
		::Uml::CompositionChildRole Component::meta_EventPortMapping_children;
		::Uml::CompositionChildRole Component::meta_Port_children;
		::Uml::CompositionChildRole Component::meta_SystemRef_child;
		::Uml::CompositionChildRole Component::meta_BitTestRef_child;
		::Uml::CompositionChildRole Component::meta_PortMapping_children;
		::Uml::CompositionChildRole Component::meta_EventPort_children;
		::Uml::CompositionChildRole ComponentModels::meta_ComponentSheet_children;
		::Uml::CompositionChildRole RootFolder::meta_ComponentModels_children;
		::Uml::CompositionChildRole RootFolder::meta_HardwareModels_children;
		::Uml::CompositionChildRole RootFolder::meta_FM_TestModels_children;
		::Uml::CompositionChildRole RootFolder::meta_FM_PlatformModels_children;
		::Uml::CompositionChildRole RootFolder::meta_FM_UnitModels_children;
		::Uml::CompositionChildRole RootFolder::meta_SLSF_Dataflow_children;
		::Uml::CompositionChildRole RootFolder::meta_SLSF_Types_children;
		::Uml::CompositionChildRole RootFolder::meta_SLSF_Stateflow_children;
		::Uml::CompositionChildRole RootFolder::meta_RootFolder_children;
		::Uml::Constraint Process::meta_ProcessAssignedtoExactlyOnePartition;
		::Uml::Constraint Channel::meta_PortChannelTypeConsistency;
		::Uml::Constraint Component::meta_ExactlyOneRef;
		void Creates()
		{
			EventPortMapping_Members_Base::meta = ::Uml::Class::Create(umldiagram);
			CommMapping_Members_Base::meta = ::Uml::Class::Create(umldiagram);
			PortMapping_Members_Base::meta = ::Uml::Class::Create(umldiagram);
			ScheduleItem::meta = ::Uml::Class::Create(umldiagram);
			Partition::meta = ::Uml::Class::Create(umldiagram);
			CommMapping::meta = ::Uml::Class::Create(umldiagram);
			Process::meta = ::Uml::Class::Create(umldiagram);
			OperatingMode::meta = ::Uml::Class::Create(umldiagram);
			ProcessingModule::meta = ::Uml::Class::Create(umldiagram);
			DevicePort::meta = ::Uml::Class::Create(umldiagram);
			Bus::meta = ::Uml::Class::Create(umldiagram);
			BusPort::meta = ::Uml::Class::Create(umldiagram);
			HWElement::meta = ::Uml::Class::Create(umldiagram);
			Wire::meta = ::Uml::Class::Create(umldiagram);
			HardwareModels::meta = ::Uml::Class::Create(umldiagram);
			CommElement::meta = ::Uml::Class::Create(umldiagram);
			HardwareSheet::meta = ::Uml::Class::Create(umldiagram);
			Port2Channel::meta = ::Uml::Class::Create(umldiagram);
			Channel2Port::meta = ::Uml::Class::Create(umldiagram);
			EventPort::meta = ::Uml::Class::Create(umldiagram);
			Port::meta = ::Uml::Class::Create(umldiagram);
			Channel::meta = ::Uml::Class::Create(umldiagram);
			EventChannel::meta = ::Uml::Class::Create(umldiagram);
			ComponentSheet::meta = ::Uml::Class::Create(umldiagram);
			Component::meta = ::Uml::Class::Create(umldiagram);
			EventPortMapping::meta = ::Uml::Class::Create(umldiagram);
			OutputPort::meta = ::Uml::Class::Create(umldiagram);
			OE2EC::meta = ::Uml::Class::Create(umldiagram);
			EC2IE::meta = ::Uml::Class::Create(umldiagram);
			ComponentModels::meta = ::Uml::Class::Create(umldiagram);
			BitTestRef::meta = ::Uml::Class::Create(umldiagram);
			PortMapping::meta = ::Uml::Class::Create(umldiagram);
			InputEvent::meta = ::Uml::Class::Create(umldiagram);
			SystemRef::meta = ::Uml::Class::Create(umldiagram);
			OutputEvent::meta = ::Uml::Class::Create(umldiagram);
			InputPort::meta = ::Uml::Class::Create(umldiagram);
			ComponentShortcut::meta = ::Uml::Class::Create(umldiagram);
			RootFolder::meta = ::Uml::Class::Create(umldiagram);
			MgaObject::meta = ::Uml::Class::Create(umldiagram);
			ScheduleItem::meta_Duration = ::Uml::Attribute::Create(ScheduleItem::meta);
			ScheduleItem::meta_activationDelay = ::Uml::Attribute::Create(ScheduleItem::meta);
			ScheduleItem::meta_activationPeriod = ::Uml::Attribute::Create(ScheduleItem::meta);
			Partition::meta_ID = ::Uml::Attribute::Create(Partition::meta);
			Partition::meta_Name = ::Uml::Attribute::Create(Partition::meta);
			Partition::meta_PartitionMemory = ::Uml::Attribute::Create(Partition::meta);
			Partition::meta_SystemPartition = ::Uml::Attribute::Create(Partition::meta);
			Partition::meta_Criticality = ::Uml::Attribute::Create(Partition::meta);
			Partition::meta_startupOrder = ::Uml::Attribute::Create(Partition::meta);
			Process::meta_TimeCapacity = ::Uml::Attribute::Create(Process::meta);
			Process::meta_Name = ::Uml::Attribute::Create(Process::meta);
			Process::meta_kindOfDeadline = ::Uml::Attribute::Create(Process::meta);
			Process::meta_stackSize = ::Uml::Attribute::Create(Process::meta);
			Process::meta_startOffset = ::Uml::Attribute::Create(Process::meta);
			Process::meta_basePriority = ::Uml::Attribute::Create(Process::meta);
			Process::meta_activationPeriod = ::Uml::Attribute::Create(Process::meta);
			Process::meta_isAperiodic = ::Uml::Attribute::Create(Process::meta);
			Process::meta_entryPoint = ::Uml::Attribute::Create(Process::meta);
			Process::meta_infiniteTimeCapacity = ::Uml::Attribute::Create(Process::meta);
			Process::meta_isHealthMonitor = ::Uml::Attribute::Create(Process::meta);
			Process::meta_ProcessAssignedtoExactlyOnePartition = ::Uml::Constraint::Create(Process::meta);
			OperatingMode::meta_Name = ::Uml::Attribute::Create(OperatingMode::meta);
			ProcessingModule::meta_SPECint_rate2000 = ::Uml::Attribute::Create(ProcessingModule::meta);
			ProcessingModule::meta_Name = ::Uml::Attribute::Create(ProcessingModule::meta);
			ProcessingModule::meta_CPUType = ::Uml::Attribute::Create(ProcessingModule::meta);
			ProcessingModule::meta_Cores = ::Uml::Attribute::Create(ProcessingModule::meta);
			ProcessingModule::meta_SPECfp_rate2000 = ::Uml::Attribute::Create(ProcessingModule::meta);
			ProcessingModule::meta_Memory = ::Uml::Attribute::Create(ProcessingModule::meta);
			DevicePort::meta_PhysicalAddress = ::Uml::Attribute::Create(DevicePort::meta);
			DevicePort::meta_Procedure = ::Uml::Attribute::Create(DevicePort::meta);
			Bus::meta_Medium = ::Uml::Attribute::Create(Bus::meta);
			Bus::meta_Name = ::Uml::Attribute::Create(Bus::meta);
			Bus::meta_FrameSize = ::Uml::Attribute::Create(Bus::meta);
			Bus::meta_BusSpeed = ::Uml::Attribute::Create(Bus::meta);
			Bus::meta_MajorCycle = ::Uml::Attribute::Create(Bus::meta);
			HardwareModels::meta_name = ::Uml::Attribute::Create(HardwareModels::meta);
			EventPort::meta_Name = ::Uml::Attribute::Create(EventPort::meta);
			Port::meta_MaxMessageSize = ::Uml::Attribute::Create(Port::meta);
			Port::meta_Name = ::Uml::Attribute::Create(Port::meta);
			Port::meta_RefreshRateSeconds = ::Uml::Attribute::Create(Port::meta);
			Port::meta_MaxNbMessages = ::Uml::Attribute::Create(Port::meta);
			Port::meta_Type = ::Uml::Attribute::Create(Port::meta);
			Channel::meta_ID = ::Uml::Attribute::Create(Channel::meta);
			Channel::meta_Name = ::Uml::Attribute::Create(Channel::meta);
			Channel::meta_Type = ::Uml::Attribute::Create(Channel::meta);
			Channel::meta_PortChannelTypeConsistency = ::Uml::Constraint::Create(Channel::meta);
			EventChannel::meta_QueuingDiscipline = ::Uml::Attribute::Create(EventChannel::meta);
			EventChannel::meta_Name = ::Uml::Attribute::Create(EventChannel::meta);
			EventChannel::meta_ChannelType = ::Uml::Attribute::Create(EventChannel::meta);
			EventChannel::meta_Count = ::Uml::Attribute::Create(EventChannel::meta);
			Component::meta_Name = ::Uml::Attribute::Create(Component::meta);
			Component::meta_ExactlyOneRef = ::Uml::Constraint::Create(Component::meta);
			EventPortMapping::meta_StorageClass = ::Uml::Attribute::Create(EventPortMapping::meta);
			ComponentModels::meta_name = ::Uml::Attribute::Create(ComponentModels::meta);
			PortMapping::meta_StorageClass = ::Uml::Attribute::Create(PortMapping::meta);
			RootFolder::meta_name = ::Uml::Attribute::Create(RootFolder::meta);
			MgaObject::meta_position = ::Uml::Attribute::Create(MgaObject::meta);
			MgaObject::meta_name = ::Uml::Attribute::Create(MgaObject::meta);
		}
		void InitClassesAttributes()
		{
			EventPortMapping_Members_Base::meta.name() = "EventPortMapping_Members_Base";
			EventPortMapping_Members_Base::meta.isAbstract() = true;
			EventPortMapping_Members_Base::meta.stereotype() = "FCO";
			CommMapping_Members_Base::meta.name() = "CommMapping_Members_Base";
			CommMapping_Members_Base::meta.isAbstract() = true;
			CommMapping_Members_Base::meta.stereotype() = "FCO";
			PortMapping_Members_Base::meta.name() = "PortMapping_Members_Base";
			PortMapping_Members_Base::meta.isAbstract() = true;
			PortMapping_Members_Base::meta.stereotype() = "FCO";
			ScheduleItem::meta.name() = "ScheduleItem";
			ScheduleItem::meta.isAbstract() = false;
			ScheduleItem::meta.stereotype() = "Reference";
			Partition::meta.name() = "Partition";
			Partition::meta.isAbstract() = false;
			Partition::meta.stereotype() = "Set";
			CommMapping::meta.name() = "CommMapping";
			CommMapping::meta.isAbstract() = false;
			CommMapping::meta.stereotype() = "Connection";
			Process::meta.name() = "Process";
			Process::meta.isAbstract() = false;
			Process::meta.stereotype() = "Reference";
			OperatingMode::meta.name() = "OperatingMode";
			OperatingMode::meta.isAbstract() = false;
			OperatingMode::meta.stereotype() = "Set";
			ProcessingModule::meta.name() = "ProcessingModule";
			ProcessingModule::meta.isAbstract() = false;
			ProcessingModule::meta.stereotype() = "Model";
			DevicePort::meta.name() = "DevicePort";
			DevicePort::meta.isAbstract() = false;
			DevicePort::meta.stereotype() = "Atom";
			Bus::meta.name() = "Bus";
			Bus::meta.isAbstract() = false;
			Bus::meta.stereotype() = "Atom";
			BusPort::meta.name() = "BusPort";
			BusPort::meta.isAbstract() = false;
			BusPort::meta.stereotype() = "Atom";
			HWElement::meta.name() = "HWElement";
			HWElement::meta.isAbstract() = true;
			HWElement::meta.stereotype() = "FCO";
			Wire::meta.name() = "Wire";
			Wire::meta.isAbstract() = false;
			Wire::meta.stereotype() = "Connection";
			HardwareModels::meta.name() = "HardwareModels";
			HardwareModels::meta.isAbstract() = false;
			HardwareModels::meta.stereotype() = "Folder";
			CommElement::meta.name() = "CommElement";
			CommElement::meta.isAbstract() = true;
			CommElement::meta.stereotype() = "FCO";
			HardwareSheet::meta.name() = "HardwareSheet";
			HardwareSheet::meta.isAbstract() = false;
			HardwareSheet::meta.stereotype() = "Model";
			Port2Channel::meta.name() = "Port2Channel";
			Port2Channel::meta.isAbstract() = false;
			Port2Channel::meta.stereotype() = "Connection";
			Channel2Port::meta.name() = "Channel2Port";
			Channel2Port::meta.isAbstract() = false;
			Channel2Port::meta.stereotype() = "Connection";
			EventPort::meta.name() = "EventPort";
			EventPort::meta.isAbstract() = true;
			EventPort::meta.stereotype() = "Atom";
			Port::meta.name() = "Port";
			Port::meta.isAbstract() = true;
			Port::meta.stereotype() = "Atom";
			Channel::meta.name() = "Channel";
			Channel::meta.isAbstract() = false;
			Channel::meta.stereotype() = "Atom";
			EventChannel::meta.name() = "EventChannel";
			EventChannel::meta.isAbstract() = false;
			EventChannel::meta.stereotype() = "Atom";
			ComponentSheet::meta.name() = "ComponentSheet";
			ComponentSheet::meta.isAbstract() = false;
			ComponentSheet::meta.stereotype() = "Model";
			Component::meta.name() = "Component";
			Component::meta.isAbstract() = false;
			Component::meta.stereotype() = "Model";
			EventPortMapping::meta.name() = "EventPortMapping";
			EventPortMapping::meta.isAbstract() = false;
			EventPortMapping::meta.stereotype() = "Connection";
			OutputPort::meta.name() = "OutputPort";
			OutputPort::meta.isAbstract() = false;
			OutputPort::meta.stereotype() = "Atom";
			OE2EC::meta.name() = "OE2EC";
			OE2EC::meta.isAbstract() = false;
			OE2EC::meta.stereotype() = "Connection";
			EC2IE::meta.name() = "EC2IE";
			EC2IE::meta.isAbstract() = false;
			EC2IE::meta.stereotype() = "Connection";
			ComponentModels::meta.name() = "ComponentModels";
			ComponentModels::meta.isAbstract() = false;
			ComponentModels::meta.stereotype() = "Folder";
			BitTestRef::meta.name() = "BitTestRef";
			BitTestRef::meta.isAbstract() = false;
			BitTestRef::meta.stereotype() = "Reference";
			PortMapping::meta.name() = "PortMapping";
			PortMapping::meta.isAbstract() = false;
			PortMapping::meta.stereotype() = "Connection";
			InputEvent::meta.name() = "InputEvent";
			InputEvent::meta.isAbstract() = false;
			InputEvent::meta.stereotype() = "Atom";
			SystemRef::meta.name() = "SystemRef";
			SystemRef::meta.isAbstract() = false;
			SystemRef::meta.stereotype() = "Reference";
			OutputEvent::meta.name() = "OutputEvent";
			OutputEvent::meta.isAbstract() = false;
			OutputEvent::meta.stereotype() = "Atom";
			InputPort::meta.name() = "InputPort";
			InputPort::meta.isAbstract() = false;
			InputPort::meta.stereotype() = "Atom";
			ComponentShortcut::meta.name() = "ComponentShortcut";
			ComponentShortcut::meta.isAbstract() = false;
			ComponentShortcut::meta.stereotype() = "Reference";
			RootFolder::meta.name() = "RootFolder";
			RootFolder::meta.isAbstract() = false;
			RootFolder::meta.stereotype() = "Folder";
			MgaObject::meta.name() = "MgaObject";
			MgaObject::meta.isAbstract() = true;
			
			ScheduleItem::meta_Duration.name() = "Duration";
			ScheduleItem::meta_Duration.type() = "Integer";
			ScheduleItem::meta_Duration.min() = 1;
			ScheduleItem::meta_Duration.max() = 1;
			ScheduleItem::meta_Duration.nonpersistent() = false;
			ScheduleItem::meta_Duration.registry() = false;
			ScheduleItem::meta_Duration.ordered() = false;
			ScheduleItem::meta_Duration.visibility() = "public";
			ScheduleItem::meta_Duration.defvalue() = vector<string>();
			ScheduleItem::meta_activationDelay.name() = "activationDelay";
			ScheduleItem::meta_activationDelay.type() = "Integer";
			ScheduleItem::meta_activationDelay.min() = 1;
			ScheduleItem::meta_activationDelay.max() = 1;
			ScheduleItem::meta_activationDelay.nonpersistent() = false;
			ScheduleItem::meta_activationDelay.registry() = false;
			ScheduleItem::meta_activationDelay.ordered() = false;
			ScheduleItem::meta_activationDelay.visibility() = "public";
			ScheduleItem::meta_activationDelay.defvalue() = vector<string>();
			ScheduleItem::meta_activationPeriod.name() = "activationPeriod";
			ScheduleItem::meta_activationPeriod.type() = "Integer";
			ScheduleItem::meta_activationPeriod.min() = 1;
			ScheduleItem::meta_activationPeriod.max() = 1;
			ScheduleItem::meta_activationPeriod.nonpersistent() = false;
			ScheduleItem::meta_activationPeriod.registry() = false;
			ScheduleItem::meta_activationPeriod.ordered() = false;
			ScheduleItem::meta_activationPeriod.visibility() = "public";
			ScheduleItem::meta_activationPeriod.defvalue() = vector<string>();
			Partition::meta_ID.name() = "ID";
			Partition::meta_ID.type() = "String";
			Partition::meta_ID.min() = 1;
			Partition::meta_ID.max() = 1;
			Partition::meta_ID.nonpersistent() = false;
			Partition::meta_ID.registry() = false;
			Partition::meta_ID.ordered() = false;
			Partition::meta_ID.visibility() = "public";
			Partition::meta_ID.defvalue() = vector<string>();
			Partition::meta_Name.name() = "Name";
			Partition::meta_Name.type() = "String";
			Partition::meta_Name.min() = 1;
			Partition::meta_Name.max() = 1;
			Partition::meta_Name.nonpersistent() = false;
			Partition::meta_Name.registry() = false;
			Partition::meta_Name.ordered() = false;
			Partition::meta_Name.visibility() = "public";
			Partition::meta_Name.defvalue() = vector<string>();
			Partition::meta_PartitionMemory.name() = "PartitionMemory";
			Partition::meta_PartitionMemory.type() = "Integer";
			Partition::meta_PartitionMemory.min() = 1;
			Partition::meta_PartitionMemory.max() = 1;
			Partition::meta_PartitionMemory.nonpersistent() = false;
			Partition::meta_PartitionMemory.registry() = false;
			Partition::meta_PartitionMemory.ordered() = false;
			Partition::meta_PartitionMemory.visibility() = "public";
			Partition::meta_PartitionMemory.defvalue() = vector<string>();
			vector<string> Partition_SystemPartition_dva;
			Partition_SystemPartition_dva.push_back("false");
			Partition::meta_SystemPartition.name() = "SystemPartition";
			Partition::meta_SystemPartition.type() = "Boolean";
			Partition::meta_SystemPartition.min() = 1;
			Partition::meta_SystemPartition.max() = 1;
			Partition::meta_SystemPartition.nonpersistent() = false;
			Partition::meta_SystemPartition.registry() = false;
			Partition::meta_SystemPartition.ordered() = false;
			Partition::meta_SystemPartition.visibility() = "public";
			Partition::meta_SystemPartition.defvalue() = Partition_SystemPartition_dva;
			vector<string> Partition_Criticality_dva;
			Partition_Criticality_dva.push_back("NONE");
			Partition::meta_Criticality.name() = "Criticality";
			Partition::meta_Criticality.type() = "String";
			Partition::meta_Criticality.min() = 1;
			Partition::meta_Criticality.max() = 1;
			Partition::meta_Criticality.nonpersistent() = false;
			Partition::meta_Criticality.registry() = false;
			Partition::meta_Criticality.ordered() = false;
			Partition::meta_Criticality.visibility() = "public";
			Partition::meta_Criticality.defvalue() = Partition_Criticality_dva;
			Partition::meta_startupOrder.name() = "startupOrder";
			Partition::meta_startupOrder.type() = "Integer";
			Partition::meta_startupOrder.min() = 1;
			Partition::meta_startupOrder.max() = 1;
			Partition::meta_startupOrder.nonpersistent() = false;
			Partition::meta_startupOrder.registry() = false;
			Partition::meta_startupOrder.ordered() = false;
			Partition::meta_startupOrder.visibility() = "public";
			Partition::meta_startupOrder.defvalue() = vector<string>();
			Process::meta_TimeCapacity.name() = "TimeCapacity";
			Process::meta_TimeCapacity.type() = "Integer";
			Process::meta_TimeCapacity.min() = 1;
			Process::meta_TimeCapacity.max() = 1;
			Process::meta_TimeCapacity.nonpersistent() = false;
			Process::meta_TimeCapacity.registry() = false;
			Process::meta_TimeCapacity.ordered() = false;
			Process::meta_TimeCapacity.visibility() = "public";
			Process::meta_TimeCapacity.defvalue() = vector<string>();
			Process::meta_Name.name() = "Name";
			Process::meta_Name.type() = "String";
			Process::meta_Name.min() = 1;
			Process::meta_Name.max() = 1;
			Process::meta_Name.nonpersistent() = false;
			Process::meta_Name.registry() = false;
			Process::meta_Name.ordered() = false;
			Process::meta_Name.visibility() = "public";
			Process::meta_Name.defvalue() = vector<string>();
			vector<string> Process_kindOfDeadline_dva;
			Process_kindOfDeadline_dva.push_back("SOFT");
			Process::meta_kindOfDeadline.name() = "kindOfDeadline";
			Process::meta_kindOfDeadline.type() = "String";
			Process::meta_kindOfDeadline.min() = 1;
			Process::meta_kindOfDeadline.max() = 1;
			Process::meta_kindOfDeadline.nonpersistent() = false;
			Process::meta_kindOfDeadline.registry() = false;
			Process::meta_kindOfDeadline.ordered() = false;
			Process::meta_kindOfDeadline.visibility() = "public";
			Process::meta_kindOfDeadline.defvalue() = Process_kindOfDeadline_dva;
			Process::meta_stackSize.name() = "stackSize";
			Process::meta_stackSize.type() = "Integer";
			Process::meta_stackSize.min() = 1;
			Process::meta_stackSize.max() = 1;
			Process::meta_stackSize.nonpersistent() = false;
			Process::meta_stackSize.registry() = false;
			Process::meta_stackSize.ordered() = false;
			Process::meta_stackSize.visibility() = "public";
			Process::meta_stackSize.defvalue() = vector<string>();
			Process::meta_startOffset.name() = "startOffset";
			Process::meta_startOffset.type() = "Integer";
			Process::meta_startOffset.min() = 1;
			Process::meta_startOffset.max() = 1;
			Process::meta_startOffset.nonpersistent() = false;
			Process::meta_startOffset.registry() = false;
			Process::meta_startOffset.ordered() = false;
			Process::meta_startOffset.visibility() = "public";
			Process::meta_startOffset.defvalue() = vector<string>();
			Process::meta_basePriority.name() = "basePriority";
			Process::meta_basePriority.type() = "Integer";
			Process::meta_basePriority.min() = 1;
			Process::meta_basePriority.max() = 1;
			Process::meta_basePriority.nonpersistent() = false;
			Process::meta_basePriority.registry() = false;
			Process::meta_basePriority.ordered() = false;
			Process::meta_basePriority.visibility() = "public";
			Process::meta_basePriority.defvalue() = vector<string>();
			Process::meta_activationPeriod.name() = "activationPeriod";
			Process::meta_activationPeriod.type() = "Integer";
			Process::meta_activationPeriod.min() = 1;
			Process::meta_activationPeriod.max() = 1;
			Process::meta_activationPeriod.nonpersistent() = false;
			Process::meta_activationPeriod.registry() = false;
			Process::meta_activationPeriod.ordered() = false;
			Process::meta_activationPeriod.visibility() = "public";
			Process::meta_activationPeriod.defvalue() = vector<string>();
			vector<string> Process_isAperiodic_dva;
			Process_isAperiodic_dva.push_back("false");
			Process::meta_isAperiodic.name() = "isAperiodic";
			Process::meta_isAperiodic.type() = "Boolean";
			Process::meta_isAperiodic.min() = 1;
			Process::meta_isAperiodic.max() = 1;
			Process::meta_isAperiodic.nonpersistent() = false;
			Process::meta_isAperiodic.registry() = false;
			Process::meta_isAperiodic.ordered() = false;
			Process::meta_isAperiodic.visibility() = "public";
			Process::meta_isAperiodic.defvalue() = Process_isAperiodic_dva;
			Process::meta_entryPoint.name() = "entryPoint";
			Process::meta_entryPoint.type() = "String";
			Process::meta_entryPoint.min() = 1;
			Process::meta_entryPoint.max() = 1;
			Process::meta_entryPoint.nonpersistent() = false;
			Process::meta_entryPoint.registry() = false;
			Process::meta_entryPoint.ordered() = false;
			Process::meta_entryPoint.visibility() = "public";
			Process::meta_entryPoint.defvalue() = vector<string>();
			vector<string> Process_infiniteTimeCapacity_dva;
			Process_infiniteTimeCapacity_dva.push_back("false");
			Process::meta_infiniteTimeCapacity.name() = "infiniteTimeCapacity";
			Process::meta_infiniteTimeCapacity.type() = "Boolean";
			Process::meta_infiniteTimeCapacity.min() = 1;
			Process::meta_infiniteTimeCapacity.max() = 1;
			Process::meta_infiniteTimeCapacity.nonpersistent() = false;
			Process::meta_infiniteTimeCapacity.registry() = false;
			Process::meta_infiniteTimeCapacity.ordered() = false;
			Process::meta_infiniteTimeCapacity.visibility() = "public";
			Process::meta_infiniteTimeCapacity.defvalue() = Process_infiniteTimeCapacity_dva;
			vector<string> Process_isHealthMonitor_dva;
			Process_isHealthMonitor_dva.push_back("false");
			Process::meta_isHealthMonitor.name() = "isHealthMonitor";
			Process::meta_isHealthMonitor.type() = "Boolean";
			Process::meta_isHealthMonitor.min() = 1;
			Process::meta_isHealthMonitor.max() = 1;
			Process::meta_isHealthMonitor.nonpersistent() = false;
			Process::meta_isHealthMonitor.registry() = false;
			Process::meta_isHealthMonitor.ordered() = false;
			Process::meta_isHealthMonitor.visibility() = "public";
			Process::meta_isHealthMonitor.defvalue() = Process_isHealthMonitor_dva;
			Process::meta_ProcessAssignedtoExactlyOnePartition.name() = "ProcessAssignedtoExactlyOnePartition";
			Process::meta_ProcessAssignedtoExactlyOnePartition.description() = "A Process must be Assigned to Exactly One Partition";
			Process::meta_ProcessAssignedtoExactlyOnePartition.expression() = " self.memberOfSets( Partition )->size = 1";
			OperatingMode::meta_Name.name() = "Name";
			OperatingMode::meta_Name.type() = "String";
			OperatingMode::meta_Name.min() = 1;
			OperatingMode::meta_Name.max() = 1;
			OperatingMode::meta_Name.nonpersistent() = false;
			OperatingMode::meta_Name.registry() = false;
			OperatingMode::meta_Name.ordered() = false;
			OperatingMode::meta_Name.visibility() = "public";
			OperatingMode::meta_Name.defvalue() = vector<string>();
			ProcessingModule::meta_SPECint_rate2000.name() = "SPECint_rate2000";
			ProcessingModule::meta_SPECint_rate2000.type() = "Integer";
			ProcessingModule::meta_SPECint_rate2000.min() = 1;
			ProcessingModule::meta_SPECint_rate2000.max() = 1;
			ProcessingModule::meta_SPECint_rate2000.nonpersistent() = false;
			ProcessingModule::meta_SPECint_rate2000.registry() = false;
			ProcessingModule::meta_SPECint_rate2000.ordered() = false;
			ProcessingModule::meta_SPECint_rate2000.visibility() = "public";
			ProcessingModule::meta_SPECint_rate2000.defvalue() = vector<string>();
			ProcessingModule::meta_Name.name() = "Name";
			ProcessingModule::meta_Name.type() = "String";
			ProcessingModule::meta_Name.min() = 1;
			ProcessingModule::meta_Name.max() = 1;
			ProcessingModule::meta_Name.nonpersistent() = false;
			ProcessingModule::meta_Name.registry() = false;
			ProcessingModule::meta_Name.ordered() = false;
			ProcessingModule::meta_Name.visibility() = "public";
			ProcessingModule::meta_Name.defvalue() = vector<string>();
			ProcessingModule::meta_CPUType.name() = "CPUType";
			ProcessingModule::meta_CPUType.type() = "String";
			ProcessingModule::meta_CPUType.min() = 1;
			ProcessingModule::meta_CPUType.max() = 1;
			ProcessingModule::meta_CPUType.nonpersistent() = false;
			ProcessingModule::meta_CPUType.registry() = false;
			ProcessingModule::meta_CPUType.ordered() = false;
			ProcessingModule::meta_CPUType.visibility() = "public";
			ProcessingModule::meta_CPUType.defvalue() = vector<string>();
			vector<string> ProcessingModule_Cores_dva;
			ProcessingModule_Cores_dva.push_back("1");
			ProcessingModule::meta_Cores.name() = "Cores";
			ProcessingModule::meta_Cores.type() = "Integer";
			ProcessingModule::meta_Cores.min() = 1;
			ProcessingModule::meta_Cores.max() = 1;
			ProcessingModule::meta_Cores.nonpersistent() = false;
			ProcessingModule::meta_Cores.registry() = false;
			ProcessingModule::meta_Cores.ordered() = false;
			ProcessingModule::meta_Cores.visibility() = "public";
			ProcessingModule::meta_Cores.defvalue() = ProcessingModule_Cores_dva;
			ProcessingModule::meta_SPECfp_rate2000.name() = "SPECfp_rate2000";
			ProcessingModule::meta_SPECfp_rate2000.type() = "Integer";
			ProcessingModule::meta_SPECfp_rate2000.min() = 1;
			ProcessingModule::meta_SPECfp_rate2000.max() = 1;
			ProcessingModule::meta_SPECfp_rate2000.nonpersistent() = false;
			ProcessingModule::meta_SPECfp_rate2000.registry() = false;
			ProcessingModule::meta_SPECfp_rate2000.ordered() = false;
			ProcessingModule::meta_SPECfp_rate2000.visibility() = "public";
			ProcessingModule::meta_SPECfp_rate2000.defvalue() = vector<string>();
			ProcessingModule::meta_Memory.name() = "Memory";
			ProcessingModule::meta_Memory.type() = "Integer";
			ProcessingModule::meta_Memory.min() = 1;
			ProcessingModule::meta_Memory.max() = 1;
			ProcessingModule::meta_Memory.nonpersistent() = false;
			ProcessingModule::meta_Memory.registry() = false;
			ProcessingModule::meta_Memory.ordered() = false;
			ProcessingModule::meta_Memory.visibility() = "public";
			ProcessingModule::meta_Memory.defvalue() = vector<string>();
			DevicePort::meta_PhysicalAddress.name() = "PhysicalAddress";
			DevicePort::meta_PhysicalAddress.type() = "String";
			DevicePort::meta_PhysicalAddress.min() = 1;
			DevicePort::meta_PhysicalAddress.max() = 1;
			DevicePort::meta_PhysicalAddress.nonpersistent() = false;
			DevicePort::meta_PhysicalAddress.registry() = false;
			DevicePort::meta_PhysicalAddress.ordered() = false;
			DevicePort::meta_PhysicalAddress.visibility() = "public";
			DevicePort::meta_PhysicalAddress.defvalue() = vector<string>();
			DevicePort::meta_Procedure.name() = "Procedure";
			DevicePort::meta_Procedure.type() = "String";
			DevicePort::meta_Procedure.min() = 1;
			DevicePort::meta_Procedure.max() = 1;
			DevicePort::meta_Procedure.nonpersistent() = false;
			DevicePort::meta_Procedure.registry() = false;
			DevicePort::meta_Procedure.ordered() = false;
			DevicePort::meta_Procedure.visibility() = "public";
			DevicePort::meta_Procedure.defvalue() = vector<string>();
			Bus::meta_Medium.name() = "Medium";
			Bus::meta_Medium.type() = "String";
			Bus::meta_Medium.min() = 1;
			Bus::meta_Medium.max() = 1;
			Bus::meta_Medium.nonpersistent() = false;
			Bus::meta_Medium.registry() = false;
			Bus::meta_Medium.ordered() = false;
			Bus::meta_Medium.visibility() = "public";
			Bus::meta_Medium.defvalue() = vector<string>();
			Bus::meta_Name.name() = "Name";
			Bus::meta_Name.type() = "String";
			Bus::meta_Name.min() = 1;
			Bus::meta_Name.max() = 1;
			Bus::meta_Name.nonpersistent() = false;
			Bus::meta_Name.registry() = false;
			Bus::meta_Name.ordered() = false;
			Bus::meta_Name.visibility() = "public";
			Bus::meta_Name.defvalue() = vector<string>();
			Bus::meta_FrameSize.name() = "FrameSize";
			Bus::meta_FrameSize.type() = "Integer";
			Bus::meta_FrameSize.min() = 1;
			Bus::meta_FrameSize.max() = 1;
			Bus::meta_FrameSize.nonpersistent() = false;
			Bus::meta_FrameSize.registry() = false;
			Bus::meta_FrameSize.ordered() = false;
			Bus::meta_FrameSize.visibility() = "public";
			Bus::meta_FrameSize.defvalue() = vector<string>();
			Bus::meta_BusSpeed.name() = "BusSpeed";
			Bus::meta_BusSpeed.type() = "Integer";
			Bus::meta_BusSpeed.min() = 1;
			Bus::meta_BusSpeed.max() = 1;
			Bus::meta_BusSpeed.nonpersistent() = false;
			Bus::meta_BusSpeed.registry() = false;
			Bus::meta_BusSpeed.ordered() = false;
			Bus::meta_BusSpeed.visibility() = "public";
			Bus::meta_BusSpeed.defvalue() = vector<string>();
			Bus::meta_MajorCycle.name() = "MajorCycle";
			Bus::meta_MajorCycle.type() = "String";
			Bus::meta_MajorCycle.min() = 1;
			Bus::meta_MajorCycle.max() = 1;
			Bus::meta_MajorCycle.nonpersistent() = false;
			Bus::meta_MajorCycle.registry() = false;
			Bus::meta_MajorCycle.ordered() = false;
			Bus::meta_MajorCycle.visibility() = "public";
			Bus::meta_MajorCycle.defvalue() = vector<string>();
			HardwareModels::meta_name.name() = "name";
			HardwareModels::meta_name.type() = "String";
			HardwareModels::meta_name.min() = 0;
			HardwareModels::meta_name.max() = 1;
			HardwareModels::meta_name.nonpersistent() = false;
			HardwareModels::meta_name.registry() = false;
			HardwareModels::meta_name.ordered() = false;
			HardwareModels::meta_name.visibility() = "public";
			HardwareModels::meta_name.defvalue() = vector<string>();
			EventPort::meta_Name.name() = "Name";
			EventPort::meta_Name.type() = "String";
			EventPort::meta_Name.min() = 1;
			EventPort::meta_Name.max() = 1;
			EventPort::meta_Name.nonpersistent() = false;
			EventPort::meta_Name.registry() = false;
			EventPort::meta_Name.ordered() = false;
			EventPort::meta_Name.visibility() = "public";
			EventPort::meta_Name.defvalue() = vector<string>();
			Port::meta_MaxMessageSize.name() = "MaxMessageSize";
			Port::meta_MaxMessageSize.type() = "String";
			Port::meta_MaxMessageSize.min() = 1;
			Port::meta_MaxMessageSize.max() = 1;
			Port::meta_MaxMessageSize.nonpersistent() = false;
			Port::meta_MaxMessageSize.registry() = false;
			Port::meta_MaxMessageSize.ordered() = false;
			Port::meta_MaxMessageSize.visibility() = "public";
			Port::meta_MaxMessageSize.defvalue() = vector<string>();
			Port::meta_Name.name() = "Name";
			Port::meta_Name.type() = "String";
			Port::meta_Name.min() = 1;
			Port::meta_Name.max() = 1;
			Port::meta_Name.nonpersistent() = false;
			Port::meta_Name.registry() = false;
			Port::meta_Name.ordered() = false;
			Port::meta_Name.visibility() = "public";
			Port::meta_Name.defvalue() = vector<string>();
			Port::meta_RefreshRateSeconds.name() = "RefreshRateSeconds";
			Port::meta_RefreshRateSeconds.type() = "Integer";
			Port::meta_RefreshRateSeconds.min() = 1;
			Port::meta_RefreshRateSeconds.max() = 1;
			Port::meta_RefreshRateSeconds.nonpersistent() = false;
			Port::meta_RefreshRateSeconds.registry() = false;
			Port::meta_RefreshRateSeconds.ordered() = false;
			Port::meta_RefreshRateSeconds.visibility() = "public";
			Port::meta_RefreshRateSeconds.defvalue() = vector<string>();
			Port::meta_MaxNbMessages.name() = "MaxNbMessages";
			Port::meta_MaxNbMessages.type() = "Integer";
			Port::meta_MaxNbMessages.min() = 1;
			Port::meta_MaxNbMessages.max() = 1;
			Port::meta_MaxNbMessages.nonpersistent() = false;
			Port::meta_MaxNbMessages.registry() = false;
			Port::meta_MaxNbMessages.ordered() = false;
			Port::meta_MaxNbMessages.visibility() = "public";
			Port::meta_MaxNbMessages.defvalue() = vector<string>();
			vector<string> Port_Type_dva;
			Port_Type_dva.push_back("QUEUING");
			Port::meta_Type.name() = "Type";
			Port::meta_Type.type() = "String";
			Port::meta_Type.min() = 1;
			Port::meta_Type.max() = 1;
			Port::meta_Type.nonpersistent() = false;
			Port::meta_Type.registry() = false;
			Port::meta_Type.ordered() = false;
			Port::meta_Type.visibility() = "public";
			Port::meta_Type.defvalue() = Port_Type_dva;
			Channel::meta_ID.name() = "ID";
			Channel::meta_ID.type() = "String";
			Channel::meta_ID.min() = 1;
			Channel::meta_ID.max() = 1;
			Channel::meta_ID.nonpersistent() = false;
			Channel::meta_ID.registry() = false;
			Channel::meta_ID.ordered() = false;
			Channel::meta_ID.visibility() = "public";
			Channel::meta_ID.defvalue() = vector<string>();
			Channel::meta_Name.name() = "Name";
			Channel::meta_Name.type() = "String";
			Channel::meta_Name.min() = 1;
			Channel::meta_Name.max() = 1;
			Channel::meta_Name.nonpersistent() = false;
			Channel::meta_Name.registry() = false;
			Channel::meta_Name.ordered() = false;
			Channel::meta_Name.visibility() = "public";
			Channel::meta_Name.defvalue() = vector<string>();
			vector<string> Channel_Type_dva;
			Channel_Type_dva.push_back("QUEUING");
			Channel::meta_Type.name() = "Type";
			Channel::meta_Type.type() = "String";
			Channel::meta_Type.min() = 1;
			Channel::meta_Type.max() = 1;
			Channel::meta_Type.nonpersistent() = false;
			Channel::meta_Type.registry() = false;
			Channel::meta_Type.ordered() = false;
			Channel::meta_Type.visibility() = "public";
			Channel::meta_Type.defvalue() = Channel_Type_dva;
			Channel::meta_PortChannelTypeConsistency.name() = "PortChannelTypeConsistency";
			Channel::meta_PortChannelTypeConsistency.description() = "Ports connected thru a channel must have same Types";
			Channel::meta_PortChannelTypeConsistency.expression() = "let srcs = self.connectedFCOs( Port2Channel ) in\n  let dsts = self.connectedFCOs( Channel2Port ) in\n     srcs->forAll( s | s.oclAsType( OutputPort ).Type = self.Type)\n     and\n     dsts->forAll( d | d.oclAsType( InputPort ).Type = self.Type)";
			vector<string> EventChannel_QueuingDiscipline_dva;
			EventChannel_QueuingDiscipline_dva.push_back("FIFO");
			EventChannel::meta_QueuingDiscipline.name() = "QueuingDiscipline";
			EventChannel::meta_QueuingDiscipline.type() = "String";
			EventChannel::meta_QueuingDiscipline.min() = 1;
			EventChannel::meta_QueuingDiscipline.max() = 1;
			EventChannel::meta_QueuingDiscipline.nonpersistent() = false;
			EventChannel::meta_QueuingDiscipline.registry() = false;
			EventChannel::meta_QueuingDiscipline.ordered() = false;
			EventChannel::meta_QueuingDiscipline.visibility() = "public";
			EventChannel::meta_QueuingDiscipline.defvalue() = EventChannel_QueuingDiscipline_dva;
			EventChannel::meta_Name.name() = "Name";
			EventChannel::meta_Name.type() = "String";
			EventChannel::meta_Name.min() = 1;
			EventChannel::meta_Name.max() = 1;
			EventChannel::meta_Name.nonpersistent() = false;
			EventChannel::meta_Name.registry() = false;
			EventChannel::meta_Name.ordered() = false;
			EventChannel::meta_Name.visibility() = "public";
			EventChannel::meta_Name.defvalue() = vector<string>();
			vector<string> EventChannel_ChannelType_dva;
			EventChannel_ChannelType_dva.push_back("EVENT");
			EventChannel::meta_ChannelType.name() = "ChannelType";
			EventChannel::meta_ChannelType.type() = "String";
			EventChannel::meta_ChannelType.min() = 1;
			EventChannel::meta_ChannelType.max() = 1;
			EventChannel::meta_ChannelType.nonpersistent() = false;
			EventChannel::meta_ChannelType.registry() = false;
			EventChannel::meta_ChannelType.ordered() = false;
			EventChannel::meta_ChannelType.visibility() = "public";
			EventChannel::meta_ChannelType.defvalue() = EventChannel_ChannelType_dva;
			vector<string> EventChannel_Count_dva;
			EventChannel_Count_dva.push_back("1");
			EventChannel::meta_Count.name() = "Count";
			EventChannel::meta_Count.type() = "Integer";
			EventChannel::meta_Count.min() = 1;
			EventChannel::meta_Count.max() = 1;
			EventChannel::meta_Count.nonpersistent() = false;
			EventChannel::meta_Count.registry() = false;
			EventChannel::meta_Count.ordered() = false;
			EventChannel::meta_Count.visibility() = "public";
			EventChannel::meta_Count.defvalue() = EventChannel_Count_dva;
			Component::meta_Name.name() = "Name";
			Component::meta_Name.type() = "String";
			Component::meta_Name.min() = 1;
			Component::meta_Name.max() = 1;
			Component::meta_Name.nonpersistent() = false;
			Component::meta_Name.registry() = false;
			Component::meta_Name.ordered() = false;
			Component::meta_Name.visibility() = "public";
			Component::meta_Name.defvalue() = vector<string>();
			Component::meta_ExactlyOneRef.name() = "ExactlyOneRef";
			Component::meta_ExactlyOneRef.description() = "Each Component must be referenced exactly once in Processor/Partition";
			Component::meta_ExactlyOneRef.expression() = "self.referencedBy( Process )->size <= 1";
			EventPortMapping::meta_StorageClass.name() = "StorageClass";
			EventPortMapping::meta_StorageClass.type() = "String";
			EventPortMapping::meta_StorageClass.min() = 1;
			EventPortMapping::meta_StorageClass.max() = 1;
			EventPortMapping::meta_StorageClass.nonpersistent() = false;
			EventPortMapping::meta_StorageClass.registry() = false;
			EventPortMapping::meta_StorageClass.ordered() = false;
			EventPortMapping::meta_StorageClass.visibility() = "public";
			EventPortMapping::meta_StorageClass.defvalue() = vector<string>();
			ComponentModels::meta_name.name() = "name";
			ComponentModels::meta_name.type() = "String";
			ComponentModels::meta_name.min() = 0;
			ComponentModels::meta_name.max() = 1;
			ComponentModels::meta_name.nonpersistent() = false;
			ComponentModels::meta_name.registry() = false;
			ComponentModels::meta_name.ordered() = false;
			ComponentModels::meta_name.visibility() = "public";
			ComponentModels::meta_name.defvalue() = vector<string>();
			PortMapping::meta_StorageClass.name() = "StorageClass";
			PortMapping::meta_StorageClass.type() = "String";
			PortMapping::meta_StorageClass.min() = 1;
			PortMapping::meta_StorageClass.max() = 1;
			PortMapping::meta_StorageClass.nonpersistent() = false;
			PortMapping::meta_StorageClass.registry() = false;
			PortMapping::meta_StorageClass.ordered() = false;
			PortMapping::meta_StorageClass.visibility() = "public";
			PortMapping::meta_StorageClass.defvalue() = vector<string>();
			RootFolder::meta_name.name() = "name";
			RootFolder::meta_name.type() = "String";
			RootFolder::meta_name.min() = 0;
			RootFolder::meta_name.max() = 1;
			RootFolder::meta_name.nonpersistent() = false;
			RootFolder::meta_name.registry() = false;
			RootFolder::meta_name.ordered() = false;
			RootFolder::meta_name.visibility() = "public";
			RootFolder::meta_name.defvalue() = vector<string>();
			MgaObject::meta_position.name() = "position";
			MgaObject::meta_position.type() = "String";
			MgaObject::meta_position.min() = 0;
			MgaObject::meta_position.max() = 1;
			MgaObject::meta_position.nonpersistent() = false;
			MgaObject::meta_position.registry() = false;
			MgaObject::meta_position.ordered() = false;
			MgaObject::meta_position.visibility() = "public";
			MgaObject::meta_position.defvalue() = vector<string>();
			MgaObject::meta_name.name() = "name";
			MgaObject::meta_name.type() = "String";
			MgaObject::meta_name.min() = 0;
			MgaObject::meta_name.max() = 1;
			MgaObject::meta_name.nonpersistent() = false;
			MgaObject::meta_name.registry() = false;
			MgaObject::meta_name.ordered() = false;
			MgaObject::meta_name.visibility() = "public";
			MgaObject::meta_name.defvalue() = vector<string>();
			
		}
		void CreatesNamespaces()
		{
			FM::meta = ::Uml::Namespace::Create(umldiagram);
			SLSF::meta = ::Uml::Namespace::Create(umldiagram);
		}
		void InitNamespaces()
		{
			FM::meta.name() = "FM";
			FM::InitializeNS();
			SLSF::meta.name() = "SLSF";
			SLSF::InitializeNS();
		}
		void InitAssociation0()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "EventPortMapping";
			ass.assocClass() = ::FCSL::EventPortMapping::meta;
			::FCSL::EventPortMapping_Members_Base::meta_srcEventPortMapping = ::Uml::AssociationRole::Create(ass);
			::FCSL::EventPortMapping_Members_Base::meta_srcEventPortMapping.name() = "srcEventPortMapping";
			::FCSL::EventPortMapping_Members_Base::meta_srcEventPortMapping.min() = 0;
			::FCSL::EventPortMapping_Members_Base::meta_srcEventPortMapping.max() = -1;
			::FCSL::EventPortMapping_Members_Base::meta_srcEventPortMapping.isNavigable() = true;
			::FCSL::EventPortMapping_Members_Base::meta_srcEventPortMapping.isPrimary() = false;
			::FCSL::EventPortMapping_Members_Base::meta_srcEventPortMapping.target() = ::FCSL::EventPortMapping_Members_Base::meta;
			::FCSL::EventPortMapping::meta_srcEventPortMapping_end_ = ::FCSL::EventPortMapping_Members_Base::meta_dstEventPortMapping_rev = ::FCSL::EventPortMapping_Members_Base::meta_srcEventPortMapping;
			::FCSL::EventPortMapping_Members_Base::meta_dstEventPortMapping = ::Uml::AssociationRole::Create(ass);
			::FCSL::EventPortMapping_Members_Base::meta_dstEventPortMapping.name() = "dstEventPortMapping";
			::FCSL::EventPortMapping_Members_Base::meta_dstEventPortMapping.min() = 0;
			::FCSL::EventPortMapping_Members_Base::meta_dstEventPortMapping.max() = -1;
			::FCSL::EventPortMapping_Members_Base::meta_dstEventPortMapping.isNavigable() = true;
			::FCSL::EventPortMapping_Members_Base::meta_dstEventPortMapping.isPrimary() = false;
			::FCSL::EventPortMapping_Members_Base::meta_dstEventPortMapping.target() = ::FCSL::EventPortMapping_Members_Base::meta;
			::FCSL::EventPortMapping::meta_dstEventPortMapping_end_ = ::FCSL::EventPortMapping_Members_Base::meta_srcEventPortMapping_rev = ::FCSL::EventPortMapping_Members_Base::meta_dstEventPortMapping;
		};
		void InitAssociation1()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "CommMapping";
			ass.assocClass() = ::FCSL::CommMapping::meta;
			::FCSL::CommMapping_Members_Base::meta_srcCommMapping = ::Uml::AssociationRole::Create(ass);
			::FCSL::CommMapping_Members_Base::meta_srcCommMapping.name() = "srcCommMapping";
			::FCSL::CommMapping_Members_Base::meta_srcCommMapping.min() = 0;
			::FCSL::CommMapping_Members_Base::meta_srcCommMapping.max() = -1;
			::FCSL::CommMapping_Members_Base::meta_srcCommMapping.isNavigable() = true;
			::FCSL::CommMapping_Members_Base::meta_srcCommMapping.isPrimary() = false;
			::FCSL::CommMapping_Members_Base::meta_srcCommMapping.target() = ::FCSL::CommMapping_Members_Base::meta;
			::FCSL::CommMapping::meta_srcCommMapping_end_ = ::FCSL::CommMapping_Members_Base::meta_dstCommMapping_rev = ::FCSL::CommMapping_Members_Base::meta_srcCommMapping;
			::FCSL::CommMapping_Members_Base::meta_dstCommMapping = ::Uml::AssociationRole::Create(ass);
			::FCSL::CommMapping_Members_Base::meta_dstCommMapping.name() = "dstCommMapping";
			::FCSL::CommMapping_Members_Base::meta_dstCommMapping.min() = 0;
			::FCSL::CommMapping_Members_Base::meta_dstCommMapping.max() = -1;
			::FCSL::CommMapping_Members_Base::meta_dstCommMapping.isNavigable() = true;
			::FCSL::CommMapping_Members_Base::meta_dstCommMapping.isPrimary() = false;
			::FCSL::CommMapping_Members_Base::meta_dstCommMapping.target() = ::FCSL::CommMapping_Members_Base::meta;
			::FCSL::CommMapping::meta_dstCommMapping_end_ = ::FCSL::CommMapping_Members_Base::meta_srcCommMapping_rev = ::FCSL::CommMapping_Members_Base::meta_dstCommMapping;
		};
		void InitAssociation2()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "PortMapping";
			ass.assocClass() = ::FCSL::PortMapping::meta;
			::FCSL::PortMapping_Members_Base::meta_srcInPortMapping = ::Uml::AssociationRole::Create(ass);
			::FCSL::PortMapping_Members_Base::meta_srcInPortMapping.name() = "srcInPortMapping";
			::FCSL::PortMapping_Members_Base::meta_srcInPortMapping.min() = 0;
			::FCSL::PortMapping_Members_Base::meta_srcInPortMapping.max() = -1;
			::FCSL::PortMapping_Members_Base::meta_srcInPortMapping.isNavigable() = true;
			::FCSL::PortMapping_Members_Base::meta_srcInPortMapping.isPrimary() = false;
			::FCSL::PortMapping_Members_Base::meta_srcInPortMapping.target() = ::FCSL::PortMapping_Members_Base::meta;
			::FCSL::PortMapping::meta_srcInPortMapping_end_ = ::FCSL::PortMapping_Members_Base::meta_dstInPortMapping_rev = ::FCSL::PortMapping_Members_Base::meta_srcInPortMapping;
			::FCSL::PortMapping_Members_Base::meta_dstInPortMapping = ::Uml::AssociationRole::Create(ass);
			::FCSL::PortMapping_Members_Base::meta_dstInPortMapping.name() = "dstInPortMapping";
			::FCSL::PortMapping_Members_Base::meta_dstInPortMapping.min() = 0;
			::FCSL::PortMapping_Members_Base::meta_dstInPortMapping.max() = -1;
			::FCSL::PortMapping_Members_Base::meta_dstInPortMapping.isNavigable() = true;
			::FCSL::PortMapping_Members_Base::meta_dstInPortMapping.isPrimary() = false;
			::FCSL::PortMapping_Members_Base::meta_dstInPortMapping.target() = ::FCSL::PortMapping_Members_Base::meta;
			::FCSL::PortMapping::meta_dstInPortMapping_end_ = ::FCSL::PortMapping_Members_Base::meta_srcInPortMapping_rev = ::FCSL::PortMapping_Members_Base::meta_dstInPortMapping;
		};
		void InitAssociation3()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::FCSL::ScheduleItem::meta_ref = ::Uml::AssociationRole::Create(ass);
			::FCSL::ScheduleItem::meta_ref.name() = "ref";
			::FCSL::ScheduleItem::meta_ref.min() = 0;
			::FCSL::ScheduleItem::meta_ref.max() = 1;
			::FCSL::ScheduleItem::meta_ref.isNavigable() = true;
			::FCSL::ScheduleItem::meta_ref.isPrimary() = false;
			::FCSL::ScheduleItem::meta_ref.target() = ::FCSL::Partition::meta;
			::FCSL::Partition::meta_referedbyScheduleItem = ::Uml::AssociationRole::Create(ass);
			::FCSL::Partition::meta_referedbyScheduleItem.name() = "referedbyScheduleItem";
			::FCSL::Partition::meta_referedbyScheduleItem.min() = 0;
			::FCSL::Partition::meta_referedbyScheduleItem.max() = -1;
			::FCSL::Partition::meta_referedbyScheduleItem.isNavigable() = true;
			::FCSL::Partition::meta_referedbyScheduleItem.isPrimary() = false;
			::FCSL::Partition::meta_referedbyScheduleItem.target() = ::FCSL::ScheduleItem::meta;
		};
		void InitAssociation4()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::FCSL::ScheduleItem::meta_setOperatingMode = ::Uml::AssociationRole::Create(ass);
			::FCSL::ScheduleItem::meta_setOperatingMode.name() = "setOperatingMode";
			::FCSL::ScheduleItem::meta_setOperatingMode.min() = 0;
			::FCSL::ScheduleItem::meta_setOperatingMode.max() = -1;
			::FCSL::ScheduleItem::meta_setOperatingMode.isNavigable() = true;
			::FCSL::ScheduleItem::meta_setOperatingMode.isPrimary() = false;
			::FCSL::ScheduleItem::meta_setOperatingMode.target() = ::FCSL::OperatingMode::meta;
			::FCSL::OperatingMode::meta_members = ::Uml::AssociationRole::Create(ass);
			::FCSL::OperatingMode::meta_members.name() = "members";
			::FCSL::OperatingMode::meta_members.min() = 0;
			::FCSL::OperatingMode::meta_members.max() = -1;
			::FCSL::OperatingMode::meta_members.isNavigable() = true;
			::FCSL::OperatingMode::meta_members.isPrimary() = false;
			::FCSL::OperatingMode::meta_members.target() = ::FCSL::ScheduleItem::meta;
		};
		void InitAssociation5()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::FCSL::Partition::meta_members = ::Uml::AssociationRole::Create(ass);
			::FCSL::Partition::meta_members.name() = "members";
			::FCSL::Partition::meta_members.min() = 0;
			::FCSL::Partition::meta_members.max() = -1;
			::FCSL::Partition::meta_members.isNavigable() = true;
			::FCSL::Partition::meta_members.isPrimary() = false;
			::FCSL::Partition::meta_members.target() = ::FCSL::Process::meta;
			::FCSL::Process::meta_setPartition = ::Uml::AssociationRole::Create(ass);
			::FCSL::Process::meta_setPartition.name() = "setPartition";
			::FCSL::Process::meta_setPartition.min() = 0;
			::FCSL::Process::meta_setPartition.max() = -1;
			::FCSL::Process::meta_setPartition.isNavigable() = true;
			::FCSL::Process::meta_setPartition.isPrimary() = false;
			::FCSL::Process::meta_setPartition.target() = ::FCSL::Partition::meta;
		};
		void InitAssociation6()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::FCSL::Process::meta_ref = ::Uml::AssociationRole::Create(ass);
			::FCSL::Process::meta_ref.name() = "ref";
			::FCSL::Process::meta_ref.min() = 0;
			::FCSL::Process::meta_ref.max() = 1;
			::FCSL::Process::meta_ref.isNavigable() = true;
			::FCSL::Process::meta_ref.isPrimary() = false;
			::FCSL::Process::meta_ref.target() = ::FCSL::Component::meta;
			::FCSL::Component::meta_referedbyProcess = ::Uml::AssociationRole::Create(ass);
			::FCSL::Component::meta_referedbyProcess.name() = "referedbyProcess";
			::FCSL::Component::meta_referedbyProcess.min() = 0;
			::FCSL::Component::meta_referedbyProcess.max() = -1;
			::FCSL::Component::meta_referedbyProcess.isNavigable() = true;
			::FCSL::Component::meta_referedbyProcess.isPrimary() = false;
			::FCSL::Component::meta_referedbyProcess.target() = ::FCSL::Process::meta;
		};
		void InitAssociation7()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "Wire";
			ass.assocClass() = ::FCSL::Wire::meta;
			::FCSL::CommElement::meta_srcWire = ::Uml::AssociationRole::Create(ass);
			::FCSL::CommElement::meta_srcWire.name() = "srcWire";
			::FCSL::CommElement::meta_srcWire.min() = 0;
			::FCSL::CommElement::meta_srcWire.max() = -1;
			::FCSL::CommElement::meta_srcWire.isNavigable() = true;
			::FCSL::CommElement::meta_srcWire.isPrimary() = false;
			::FCSL::CommElement::meta_srcWire.target() = ::FCSL::CommElement::meta;
			::FCSL::Wire::meta_srcWire_end_ = ::FCSL::CommElement::meta_dstWire_rev = ::FCSL::CommElement::meta_srcWire;
			::FCSL::CommElement::meta_dstWire = ::Uml::AssociationRole::Create(ass);
			::FCSL::CommElement::meta_dstWire.name() = "dstWire";
			::FCSL::CommElement::meta_dstWire.min() = 0;
			::FCSL::CommElement::meta_dstWire.max() = -1;
			::FCSL::CommElement::meta_dstWire.isNavigable() = true;
			::FCSL::CommElement::meta_dstWire.isPrimary() = false;
			::FCSL::CommElement::meta_dstWire.target() = ::FCSL::CommElement::meta;
			::FCSL::Wire::meta_dstWire_end_ = ::FCSL::CommElement::meta_srcWire_rev = ::FCSL::CommElement::meta_dstWire;
		};
		void InitAssociation8()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "Port2Channel";
			ass.assocClass() = ::FCSL::Port2Channel::meta;
			::FCSL::Channel::meta_srcPort2Channel = ::Uml::AssociationRole::Create(ass);
			::FCSL::Channel::meta_srcPort2Channel.name() = "srcPort2Channel";
			::FCSL::Channel::meta_srcPort2Channel.min() = 0;
			::FCSL::Channel::meta_srcPort2Channel.max() = -1;
			::FCSL::Channel::meta_srcPort2Channel.isNavigable() = true;
			::FCSL::Channel::meta_srcPort2Channel.isPrimary() = false;
			::FCSL::Channel::meta_srcPort2Channel.target() = ::FCSL::OutputPort::meta;
			::FCSL::Port2Channel::meta_srcPort2Channel_end_ = ::FCSL::OutputPort::meta_dstPort2Channel_rev = ::FCSL::Channel::meta_srcPort2Channel;
			::FCSL::OutputPort::meta_dstPort2Channel = ::Uml::AssociationRole::Create(ass);
			::FCSL::OutputPort::meta_dstPort2Channel.name() = "dstPort2Channel";
			::FCSL::OutputPort::meta_dstPort2Channel.min() = 0;
			::FCSL::OutputPort::meta_dstPort2Channel.max() = -1;
			::FCSL::OutputPort::meta_dstPort2Channel.isNavigable() = true;
			::FCSL::OutputPort::meta_dstPort2Channel.isPrimary() = false;
			::FCSL::OutputPort::meta_dstPort2Channel.target() = ::FCSL::Channel::meta;
			::FCSL::Port2Channel::meta_dstPort2Channel_end_ = ::FCSL::Channel::meta_srcPort2Channel_rev = ::FCSL::OutputPort::meta_dstPort2Channel;
		};
		void InitAssociation9()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "Channel2Port";
			ass.assocClass() = ::FCSL::Channel2Port::meta;
			::FCSL::Channel::meta_dstChannel2Port = ::Uml::AssociationRole::Create(ass);
			::FCSL::Channel::meta_dstChannel2Port.name() = "dstChannel2Port";
			::FCSL::Channel::meta_dstChannel2Port.min() = 0;
			::FCSL::Channel::meta_dstChannel2Port.max() = -1;
			::FCSL::Channel::meta_dstChannel2Port.isNavigable() = true;
			::FCSL::Channel::meta_dstChannel2Port.isPrimary() = false;
			::FCSL::Channel::meta_dstChannel2Port.target() = ::FCSL::InputPort::meta;
			::FCSL::Channel2Port::meta_dstChannel2Port_end_ = ::FCSL::InputPort::meta_srcChannel2Port_rev = ::FCSL::Channel::meta_dstChannel2Port;
			::FCSL::InputPort::meta_srcChannel2Port = ::Uml::AssociationRole::Create(ass);
			::FCSL::InputPort::meta_srcChannel2Port.name() = "srcChannel2Port";
			::FCSL::InputPort::meta_srcChannel2Port.min() = 0;
			::FCSL::InputPort::meta_srcChannel2Port.max() = -1;
			::FCSL::InputPort::meta_srcChannel2Port.isNavigable() = true;
			::FCSL::InputPort::meta_srcChannel2Port.isPrimary() = false;
			::FCSL::InputPort::meta_srcChannel2Port.target() = ::FCSL::Channel::meta;
			::FCSL::Channel2Port::meta_srcChannel2Port_end_ = ::FCSL::Channel::meta_dstChannel2Port_rev = ::FCSL::InputPort::meta_srcChannel2Port;
		};
		void InitAssociation10()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "OE2EC";
			ass.assocClass() = ::FCSL::OE2EC::meta;
			::FCSL::EventChannel::meta_srcOE2EC = ::Uml::AssociationRole::Create(ass);
			::FCSL::EventChannel::meta_srcOE2EC.name() = "srcOE2EC";
			::FCSL::EventChannel::meta_srcOE2EC.min() = 0;
			::FCSL::EventChannel::meta_srcOE2EC.max() = -1;
			::FCSL::EventChannel::meta_srcOE2EC.isNavigable() = true;
			::FCSL::EventChannel::meta_srcOE2EC.isPrimary() = false;
			::FCSL::EventChannel::meta_srcOE2EC.target() = ::FCSL::OutputEvent::meta;
			::FCSL::OE2EC::meta_srcOE2EC_end_ = ::FCSL::OutputEvent::meta_dstOE2EC_rev = ::FCSL::EventChannel::meta_srcOE2EC;
			::FCSL::OutputEvent::meta_dstOE2EC = ::Uml::AssociationRole::Create(ass);
			::FCSL::OutputEvent::meta_dstOE2EC.name() = "dstOE2EC";
			::FCSL::OutputEvent::meta_dstOE2EC.min() = 0;
			::FCSL::OutputEvent::meta_dstOE2EC.max() = -1;
			::FCSL::OutputEvent::meta_dstOE2EC.isNavigable() = true;
			::FCSL::OutputEvent::meta_dstOE2EC.isPrimary() = false;
			::FCSL::OutputEvent::meta_dstOE2EC.target() = ::FCSL::EventChannel::meta;
			::FCSL::OE2EC::meta_dstOE2EC_end_ = ::FCSL::EventChannel::meta_srcOE2EC_rev = ::FCSL::OutputEvent::meta_dstOE2EC;
		};
		void InitAssociation11()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "EC2IE";
			ass.assocClass() = ::FCSL::EC2IE::meta;
			::FCSL::EventChannel::meta_dstEC2IE = ::Uml::AssociationRole::Create(ass);
			::FCSL::EventChannel::meta_dstEC2IE.name() = "dstEC2IE";
			::FCSL::EventChannel::meta_dstEC2IE.min() = 0;
			::FCSL::EventChannel::meta_dstEC2IE.max() = -1;
			::FCSL::EventChannel::meta_dstEC2IE.isNavigable() = true;
			::FCSL::EventChannel::meta_dstEC2IE.isPrimary() = false;
			::FCSL::EventChannel::meta_dstEC2IE.target() = ::FCSL::InputEvent::meta;
			::FCSL::EC2IE::meta_dstEC2IE_end_ = ::FCSL::InputEvent::meta_srcEC2IE_rev = ::FCSL::EventChannel::meta_dstEC2IE;
			::FCSL::InputEvent::meta_srcEC2IE = ::Uml::AssociationRole::Create(ass);
			::FCSL::InputEvent::meta_srcEC2IE.name() = "srcEC2IE";
			::FCSL::InputEvent::meta_srcEC2IE.min() = 0;
			::FCSL::InputEvent::meta_srcEC2IE.max() = -1;
			::FCSL::InputEvent::meta_srcEC2IE.isNavigable() = true;
			::FCSL::InputEvent::meta_srcEC2IE.isPrimary() = false;
			::FCSL::InputEvent::meta_srcEC2IE.target() = ::FCSL::EventChannel::meta;
			::FCSL::EC2IE::meta_srcEC2IE_end_ = ::FCSL::EventChannel::meta_dstEC2IE_rev = ::FCSL::InputEvent::meta_srcEC2IE;
		};
		void InitAssociation12()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::FCSL::Component::meta_referedbyComponentShortcut = ::Uml::AssociationRole::Create(ass);
			::FCSL::Component::meta_referedbyComponentShortcut.name() = "referedbyComponentShortcut";
			::FCSL::Component::meta_referedbyComponentShortcut.min() = 0;
			::FCSL::Component::meta_referedbyComponentShortcut.max() = -1;
			::FCSL::Component::meta_referedbyComponentShortcut.isNavigable() = true;
			::FCSL::Component::meta_referedbyComponentShortcut.isPrimary() = false;
			::FCSL::Component::meta_referedbyComponentShortcut.target() = ::FCSL::ComponentShortcut::meta;
			::FCSL::ComponentShortcut::meta_ref = ::Uml::AssociationRole::Create(ass);
			::FCSL::ComponentShortcut::meta_ref.name() = "ref";
			::FCSL::ComponentShortcut::meta_ref.min() = 0;
			::FCSL::ComponentShortcut::meta_ref.max() = 1;
			::FCSL::ComponentShortcut::meta_ref.isNavigable() = true;
			::FCSL::ComponentShortcut::meta_ref.isPrimary() = false;
			::FCSL::ComponentShortcut::meta_ref.target() = ::FCSL::Component::meta;
		};
		void InitAssociation13()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::FCSL::FM::Test::meta_referedbyBitTestRef = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::Test::meta_referedbyBitTestRef.name() = "referedbyBitTestRef";
			::FCSL::FM::Test::meta_referedbyBitTestRef.min() = 0;
			::FCSL::FM::Test::meta_referedbyBitTestRef.max() = -1;
			::FCSL::FM::Test::meta_referedbyBitTestRef.isNavigable() = true;
			::FCSL::FM::Test::meta_referedbyBitTestRef.isPrimary() = false;
			::FCSL::FM::Test::meta_referedbyBitTestRef.target() = ::FCSL::BitTestRef::meta;
			::FCSL::BitTestRef::meta_ref = ::Uml::AssociationRole::Create(ass);
			::FCSL::BitTestRef::meta_ref.name() = "ref";
			::FCSL::BitTestRef::meta_ref.min() = 0;
			::FCSL::BitTestRef::meta_ref.max() = 1;
			::FCSL::BitTestRef::meta_ref.isNavigable() = true;
			::FCSL::BitTestRef::meta_ref.isPrimary() = false;
			::FCSL::BitTestRef::meta_ref.target() = ::FCSL::FM::Test::meta;
		};
		void InitAssociation14()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::FCSL::SLSF::System::meta_referedbySystemRef = ::Uml::AssociationRole::Create(ass);
			::FCSL::SLSF::System::meta_referedbySystemRef.name() = "referedbySystemRef";
			::FCSL::SLSF::System::meta_referedbySystemRef.min() = 0;
			::FCSL::SLSF::System::meta_referedbySystemRef.max() = -1;
			::FCSL::SLSF::System::meta_referedbySystemRef.isNavigable() = true;
			::FCSL::SLSF::System::meta_referedbySystemRef.isPrimary() = false;
			::FCSL::SLSF::System::meta_referedbySystemRef.target() = ::FCSL::SystemRef::meta;
			::FCSL::SystemRef::meta_ref = ::Uml::AssociationRole::Create(ass);
			::FCSL::SystemRef::meta_ref.name() = "ref";
			::FCSL::SystemRef::meta_ref.min() = 0;
			::FCSL::SystemRef::meta_ref.max() = 1;
			::FCSL::SystemRef::meta_ref.isNavigable() = true;
			::FCSL::SystemRef::meta_ref.isPrimary() = false;
			::FCSL::SystemRef::meta_ref.target() = ::FCSL::SLSF::System::meta;
		};
		void InitCrossNSAssociations()
		{
			InitAssociation13();
			InitAssociation14();
		}
		void InitComposition0()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::Process::meta_ProcessingModule_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::Process::meta_ProcessingModule_parent.name() = "ProcessingModule_parent";
			::FCSL::Process::meta_ProcessingModule_parent.isNavigable() = true;
			::FCSL::Process::meta_ProcessingModule_parent.target() = ::FCSL::ProcessingModule::meta;
			::FCSL::ProcessingModule::meta_Process_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::ProcessingModule::meta_Process_children.name() = "Process";
			::FCSL::ProcessingModule::meta_Process_children.min() = 0;
			::FCSL::ProcessingModule::meta_Process_children.max() = -1;
			::FCSL::ProcessingModule::meta_Process_children.isNavigable() = true;
			::FCSL::ProcessingModule::meta_Process_children.target() = ::FCSL::Process::meta;
		}
		void InitComposition1()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::DevicePort::meta_ProcessingModule_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::DevicePort::meta_ProcessingModule_parent.name() = "ProcessingModule_parent";
			::FCSL::DevicePort::meta_ProcessingModule_parent.isNavigable() = true;
			::FCSL::DevicePort::meta_ProcessingModule_parent.target() = ::FCSL::ProcessingModule::meta;
			::FCSL::ProcessingModule::meta_DevicePort_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::ProcessingModule::meta_DevicePort_children.name() = "DevicePort";
			::FCSL::ProcessingModule::meta_DevicePort_children.min() = 0;
			::FCSL::ProcessingModule::meta_DevicePort_children.max() = -1;
			::FCSL::ProcessingModule::meta_DevicePort_children.isNavigable() = true;
			::FCSL::ProcessingModule::meta_DevicePort_children.target() = ::FCSL::DevicePort::meta;
		}
		void InitComposition2()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::OperatingMode::meta_ProcessingModule_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::OperatingMode::meta_ProcessingModule_parent.name() = "ProcessingModule_parent";
			::FCSL::OperatingMode::meta_ProcessingModule_parent.isNavigable() = true;
			::FCSL::OperatingMode::meta_ProcessingModule_parent.target() = ::FCSL::ProcessingModule::meta;
			::FCSL::ProcessingModule::meta_OperatingMode_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::ProcessingModule::meta_OperatingMode_children.name() = "OperatingMode";
			::FCSL::ProcessingModule::meta_OperatingMode_children.min() = 0;
			::FCSL::ProcessingModule::meta_OperatingMode_children.max() = -1;
			::FCSL::ProcessingModule::meta_OperatingMode_children.isNavigable() = true;
			::FCSL::ProcessingModule::meta_OperatingMode_children.target() = ::FCSL::OperatingMode::meta;
		}
		void InitComposition3()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::ScheduleItem::meta_ProcessingModule_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::ScheduleItem::meta_ProcessingModule_parent.name() = "ProcessingModule_parent";
			::FCSL::ScheduleItem::meta_ProcessingModule_parent.isNavigable() = true;
			::FCSL::ScheduleItem::meta_ProcessingModule_parent.target() = ::FCSL::ProcessingModule::meta;
			::FCSL::ProcessingModule::meta_ScheduleItem_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::ProcessingModule::meta_ScheduleItem_children.name() = "ScheduleItem";
			::FCSL::ProcessingModule::meta_ScheduleItem_children.min() = 0;
			::FCSL::ProcessingModule::meta_ScheduleItem_children.max() = -1;
			::FCSL::ProcessingModule::meta_ScheduleItem_children.isNavigable() = true;
			::FCSL::ProcessingModule::meta_ScheduleItem_children.target() = ::FCSL::ScheduleItem::meta;
		}
		void InitComposition4()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::CommMapping::meta_ProcessingModule_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::CommMapping::meta_ProcessingModule_parent.name() = "ProcessingModule_parent";
			::FCSL::CommMapping::meta_ProcessingModule_parent.isNavigable() = true;
			::FCSL::CommMapping::meta_ProcessingModule_parent.target() = ::FCSL::ProcessingModule::meta;
			::FCSL::ProcessingModule::meta_CommMapping_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::ProcessingModule::meta_CommMapping_children.name() = "CommMapping";
			::FCSL::ProcessingModule::meta_CommMapping_children.min() = 0;
			::FCSL::ProcessingModule::meta_CommMapping_children.max() = -1;
			::FCSL::ProcessingModule::meta_CommMapping_children.isNavigable() = true;
			::FCSL::ProcessingModule::meta_CommMapping_children.target() = ::FCSL::CommMapping::meta;
		}
		void InitComposition5()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::Partition::meta_ProcessingModule_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::Partition::meta_ProcessingModule_parent.name() = "ProcessingModule_parent";
			::FCSL::Partition::meta_ProcessingModule_parent.isNavigable() = true;
			::FCSL::Partition::meta_ProcessingModule_parent.target() = ::FCSL::ProcessingModule::meta;
			::FCSL::ProcessingModule::meta_Partition_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::ProcessingModule::meta_Partition_children.name() = "Partition";
			::FCSL::ProcessingModule::meta_Partition_children.min() = 0;
			::FCSL::ProcessingModule::meta_Partition_children.max() = -1;
			::FCSL::ProcessingModule::meta_Partition_children.isNavigable() = true;
			::FCSL::ProcessingModule::meta_Partition_children.target() = ::FCSL::Partition::meta;
		}
		void InitComposition6()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::HardwareSheet::meta_HardwareModels_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::HardwareSheet::meta_HardwareModels_parent.name() = "HardwareModels_parent";
			::FCSL::HardwareSheet::meta_HardwareModels_parent.isNavigable() = true;
			::FCSL::HardwareSheet::meta_HardwareModels_parent.target() = ::FCSL::HardwareModels::meta;
			::FCSL::HardwareModels::meta_HardwareSheet_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::HardwareModels::meta_HardwareSheet_children.name() = "HardwareSheet";
			::FCSL::HardwareModels::meta_HardwareSheet_children.min() = 0;
			::FCSL::HardwareModels::meta_HardwareSheet_children.max() = -1;
			::FCSL::HardwareModels::meta_HardwareSheet_children.isNavigable() = true;
			::FCSL::HardwareModels::meta_HardwareSheet_children.target() = ::FCSL::HardwareSheet::meta;
		}
		void InitComposition7()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::HWElement::meta_HardwareSheet_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::HWElement::meta_HardwareSheet_parent.name() = "HardwareSheet_parent";
			::FCSL::HWElement::meta_HardwareSheet_parent.isNavigable() = true;
			::FCSL::HWElement::meta_HardwareSheet_parent.target() = ::FCSL::HardwareSheet::meta;
			::FCSL::HardwareSheet::meta_HWElement_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::HardwareSheet::meta_HWElement_children.name() = "HWElement";
			::FCSL::HardwareSheet::meta_HWElement_children.min() = 0;
			::FCSL::HardwareSheet::meta_HWElement_children.max() = -1;
			::FCSL::HardwareSheet::meta_HWElement_children.isNavigable() = true;
			::FCSL::HardwareSheet::meta_HWElement_children.target() = ::FCSL::HWElement::meta;
		}
		void InitComposition8()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::Component::meta_ComponentSheet_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::Component::meta_ComponentSheet_parent.name() = "ComponentSheet_parent";
			::FCSL::Component::meta_ComponentSheet_parent.isNavigable() = true;
			::FCSL::Component::meta_ComponentSheet_parent.target() = ::FCSL::ComponentSheet::meta;
			::FCSL::ComponentSheet::meta_Component_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::ComponentSheet::meta_Component_children.name() = "Component";
			::FCSL::ComponentSheet::meta_Component_children.min() = 0;
			::FCSL::ComponentSheet::meta_Component_children.max() = -1;
			::FCSL::ComponentSheet::meta_Component_children.isNavigable() = true;
			::FCSL::ComponentSheet::meta_Component_children.target() = ::FCSL::Component::meta;
		}
		void InitComposition9()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::EC2IE::meta_ComponentSheet_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::EC2IE::meta_ComponentSheet_parent.name() = "ComponentSheet_parent";
			::FCSL::EC2IE::meta_ComponentSheet_parent.isNavigable() = true;
			::FCSL::EC2IE::meta_ComponentSheet_parent.target() = ::FCSL::ComponentSheet::meta;
			::FCSL::ComponentSheet::meta_EC2IE_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::ComponentSheet::meta_EC2IE_children.name() = "EC2IE";
			::FCSL::ComponentSheet::meta_EC2IE_children.min() = 0;
			::FCSL::ComponentSheet::meta_EC2IE_children.max() = -1;
			::FCSL::ComponentSheet::meta_EC2IE_children.isNavigable() = true;
			::FCSL::ComponentSheet::meta_EC2IE_children.target() = ::FCSL::EC2IE::meta;
		}
		void InitComposition10()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::OE2EC::meta_ComponentSheet_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::OE2EC::meta_ComponentSheet_parent.name() = "ComponentSheet_parent";
			::FCSL::OE2EC::meta_ComponentSheet_parent.isNavigable() = true;
			::FCSL::OE2EC::meta_ComponentSheet_parent.target() = ::FCSL::ComponentSheet::meta;
			::FCSL::ComponentSheet::meta_OE2EC_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::ComponentSheet::meta_OE2EC_children.name() = "OE2EC";
			::FCSL::ComponentSheet::meta_OE2EC_children.min() = 0;
			::FCSL::ComponentSheet::meta_OE2EC_children.max() = -1;
			::FCSL::ComponentSheet::meta_OE2EC_children.isNavigable() = true;
			::FCSL::ComponentSheet::meta_OE2EC_children.target() = ::FCSL::OE2EC::meta;
		}
		void InitComposition11()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::ComponentShortcut::meta_ComponentSheet_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::ComponentShortcut::meta_ComponentSheet_parent.name() = "ComponentSheet_parent";
			::FCSL::ComponentShortcut::meta_ComponentSheet_parent.isNavigable() = true;
			::FCSL::ComponentShortcut::meta_ComponentSheet_parent.target() = ::FCSL::ComponentSheet::meta;
			::FCSL::ComponentSheet::meta_ComponentShortcut_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::ComponentSheet::meta_ComponentShortcut_children.name() = "ComponentShortcut";
			::FCSL::ComponentSheet::meta_ComponentShortcut_children.min() = 0;
			::FCSL::ComponentSheet::meta_ComponentShortcut_children.max() = -1;
			::FCSL::ComponentSheet::meta_ComponentShortcut_children.isNavigable() = true;
			::FCSL::ComponentSheet::meta_ComponentShortcut_children.target() = ::FCSL::ComponentShortcut::meta;
		}
		void InitComposition12()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::Channel2Port::meta_ComponentSheet_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::Channel2Port::meta_ComponentSheet_parent.name() = "ComponentSheet_parent";
			::FCSL::Channel2Port::meta_ComponentSheet_parent.isNavigable() = true;
			::FCSL::Channel2Port::meta_ComponentSheet_parent.target() = ::FCSL::ComponentSheet::meta;
			::FCSL::ComponentSheet::meta_Channel2Port_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::ComponentSheet::meta_Channel2Port_children.name() = "Channel2Port";
			::FCSL::ComponentSheet::meta_Channel2Port_children.min() = 0;
			::FCSL::ComponentSheet::meta_Channel2Port_children.max() = -1;
			::FCSL::ComponentSheet::meta_Channel2Port_children.isNavigable() = true;
			::FCSL::ComponentSheet::meta_Channel2Port_children.target() = ::FCSL::Channel2Port::meta;
		}
		void InitComposition13()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::EventChannel::meta_ComponentSheet_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::EventChannel::meta_ComponentSheet_parent.name() = "ComponentSheet_parent";
			::FCSL::EventChannel::meta_ComponentSheet_parent.isNavigable() = true;
			::FCSL::EventChannel::meta_ComponentSheet_parent.target() = ::FCSL::ComponentSheet::meta;
			::FCSL::ComponentSheet::meta_EventChannel_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::ComponentSheet::meta_EventChannel_children.name() = "EventChannel";
			::FCSL::ComponentSheet::meta_EventChannel_children.min() = 0;
			::FCSL::ComponentSheet::meta_EventChannel_children.max() = -1;
			::FCSL::ComponentSheet::meta_EventChannel_children.isNavigable() = true;
			::FCSL::ComponentSheet::meta_EventChannel_children.target() = ::FCSL::EventChannel::meta;
		}
		void InitComposition14()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::Port2Channel::meta_ComponentSheet_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::Port2Channel::meta_ComponentSheet_parent.name() = "ComponentSheet_parent";
			::FCSL::Port2Channel::meta_ComponentSheet_parent.isNavigable() = true;
			::FCSL::Port2Channel::meta_ComponentSheet_parent.target() = ::FCSL::ComponentSheet::meta;
			::FCSL::ComponentSheet::meta_Port2Channel_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::ComponentSheet::meta_Port2Channel_children.name() = "Port2Channel";
			::FCSL::ComponentSheet::meta_Port2Channel_children.min() = 0;
			::FCSL::ComponentSheet::meta_Port2Channel_children.max() = -1;
			::FCSL::ComponentSheet::meta_Port2Channel_children.isNavigable() = true;
			::FCSL::ComponentSheet::meta_Port2Channel_children.target() = ::FCSL::Port2Channel::meta;
		}
		void InitComposition15()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::Channel::meta_ComponentSheet_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::Channel::meta_ComponentSheet_parent.name() = "ComponentSheet_parent";
			::FCSL::Channel::meta_ComponentSheet_parent.isNavigable() = true;
			::FCSL::Channel::meta_ComponentSheet_parent.target() = ::FCSL::ComponentSheet::meta;
			::FCSL::ComponentSheet::meta_Channel_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::ComponentSheet::meta_Channel_children.name() = "Channel";
			::FCSL::ComponentSheet::meta_Channel_children.min() = 0;
			::FCSL::ComponentSheet::meta_Channel_children.max() = -1;
			::FCSL::ComponentSheet::meta_Channel_children.isNavigable() = true;
			::FCSL::ComponentSheet::meta_Channel_children.target() = ::FCSL::Channel::meta;
		}
		void InitComposition16()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::EventPortMapping::meta_Component_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::EventPortMapping::meta_Component_parent.name() = "Component_parent";
			::FCSL::EventPortMapping::meta_Component_parent.isNavigable() = true;
			::FCSL::EventPortMapping::meta_Component_parent.target() = ::FCSL::Component::meta;
			::FCSL::Component::meta_EventPortMapping_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::Component::meta_EventPortMapping_children.name() = "EventPortMapping";
			::FCSL::Component::meta_EventPortMapping_children.min() = 0;
			::FCSL::Component::meta_EventPortMapping_children.max() = -1;
			::FCSL::Component::meta_EventPortMapping_children.isNavigable() = true;
			::FCSL::Component::meta_EventPortMapping_children.target() = ::FCSL::EventPortMapping::meta;
		}
		void InitComposition17()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::Port::meta_Component_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::Port::meta_Component_parent.name() = "Component_parent";
			::FCSL::Port::meta_Component_parent.isNavigable() = true;
			::FCSL::Port::meta_Component_parent.target() = ::FCSL::Component::meta;
			::FCSL::Component::meta_Port_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::Component::meta_Port_children.name() = "Port";
			::FCSL::Component::meta_Port_children.min() = 0;
			::FCSL::Component::meta_Port_children.max() = -1;
			::FCSL::Component::meta_Port_children.isNavigable() = true;
			::FCSL::Component::meta_Port_children.target() = ::FCSL::Port::meta;
		}
		void InitComposition18()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::SystemRef::meta_Component_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SystemRef::meta_Component_parent.name() = "Component_parent";
			::FCSL::SystemRef::meta_Component_parent.isNavigable() = true;
			::FCSL::SystemRef::meta_Component_parent.target() = ::FCSL::Component::meta;
			::FCSL::Component::meta_SystemRef_child = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::Component::meta_SystemRef_child.name() = "SystemRef";
			::FCSL::Component::meta_SystemRef_child.min() = 0;
			::FCSL::Component::meta_SystemRef_child.max() = 1;
			::FCSL::Component::meta_SystemRef_child.isNavigable() = true;
			::FCSL::Component::meta_SystemRef_child.target() = ::FCSL::SystemRef::meta;
		}
		void InitComposition19()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::BitTestRef::meta_Component_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::BitTestRef::meta_Component_parent.name() = "Component_parent";
			::FCSL::BitTestRef::meta_Component_parent.isNavigable() = true;
			::FCSL::BitTestRef::meta_Component_parent.target() = ::FCSL::Component::meta;
			::FCSL::Component::meta_BitTestRef_child = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::Component::meta_BitTestRef_child.name() = "BitTestRef";
			::FCSL::Component::meta_BitTestRef_child.min() = 0;
			::FCSL::Component::meta_BitTestRef_child.max() = 1;
			::FCSL::Component::meta_BitTestRef_child.isNavigable() = true;
			::FCSL::Component::meta_BitTestRef_child.target() = ::FCSL::BitTestRef::meta;
		}
		void InitComposition20()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::PortMapping::meta_Component_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::PortMapping::meta_Component_parent.name() = "Component_parent";
			::FCSL::PortMapping::meta_Component_parent.isNavigable() = true;
			::FCSL::PortMapping::meta_Component_parent.target() = ::FCSL::Component::meta;
			::FCSL::Component::meta_PortMapping_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::Component::meta_PortMapping_children.name() = "PortMapping";
			::FCSL::Component::meta_PortMapping_children.min() = 0;
			::FCSL::Component::meta_PortMapping_children.max() = -1;
			::FCSL::Component::meta_PortMapping_children.isNavigable() = true;
			::FCSL::Component::meta_PortMapping_children.target() = ::FCSL::PortMapping::meta;
		}
		void InitComposition21()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::EventPort::meta_Component_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::EventPort::meta_Component_parent.name() = "Component_parent";
			::FCSL::EventPort::meta_Component_parent.isNavigable() = true;
			::FCSL::EventPort::meta_Component_parent.target() = ::FCSL::Component::meta;
			::FCSL::Component::meta_EventPort_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::Component::meta_EventPort_children.name() = "EventPort";
			::FCSL::Component::meta_EventPort_children.min() = 0;
			::FCSL::Component::meta_EventPort_children.max() = -1;
			::FCSL::Component::meta_EventPort_children.isNavigable() = true;
			::FCSL::Component::meta_EventPort_children.target() = ::FCSL::EventPort::meta;
		}
		void InitComposition22()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::ComponentSheet::meta_ComponentModels_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::ComponentSheet::meta_ComponentModels_parent.name() = "ComponentModels_parent";
			::FCSL::ComponentSheet::meta_ComponentModels_parent.isNavigable() = true;
			::FCSL::ComponentSheet::meta_ComponentModels_parent.target() = ::FCSL::ComponentModels::meta;
			::FCSL::ComponentModels::meta_ComponentSheet_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::ComponentModels::meta_ComponentSheet_children.name() = "ComponentSheet";
			::FCSL::ComponentModels::meta_ComponentSheet_children.min() = 0;
			::FCSL::ComponentModels::meta_ComponentSheet_children.max() = -1;
			::FCSL::ComponentModels::meta_ComponentSheet_children.isNavigable() = true;
			::FCSL::ComponentModels::meta_ComponentSheet_children.target() = ::FCSL::ComponentSheet::meta;
		}
		void InitComposition23()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::ComponentModels::meta_RootFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::ComponentModels::meta_RootFolder_parent.name() = "RootFolder_parent";
			::FCSL::ComponentModels::meta_RootFolder_parent.isNavigable() = true;
			::FCSL::ComponentModels::meta_RootFolder_parent.target() = ::FCSL::RootFolder::meta;
			::FCSL::RootFolder::meta_ComponentModels_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::RootFolder::meta_ComponentModels_children.name() = "ComponentModels";
			::FCSL::RootFolder::meta_ComponentModels_children.min() = 0;
			::FCSL::RootFolder::meta_ComponentModels_children.max() = -1;
			::FCSL::RootFolder::meta_ComponentModels_children.isNavigable() = true;
			::FCSL::RootFolder::meta_ComponentModels_children.target() = ::FCSL::ComponentModels::meta;
		}
		void InitComposition24()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::HardwareModels::meta_RootFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::HardwareModels::meta_RootFolder_parent.name() = "RootFolder_parent";
			::FCSL::HardwareModels::meta_RootFolder_parent.isNavigable() = true;
			::FCSL::HardwareModels::meta_RootFolder_parent.target() = ::FCSL::RootFolder::meta;
			::FCSL::RootFolder::meta_HardwareModels_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::RootFolder::meta_HardwareModels_children.name() = "HardwareModels";
			::FCSL::RootFolder::meta_HardwareModels_children.min() = 0;
			::FCSL::RootFolder::meta_HardwareModels_children.max() = -1;
			::FCSL::RootFolder::meta_HardwareModels_children.isNavigable() = true;
			::FCSL::RootFolder::meta_HardwareModels_children.target() = ::FCSL::HardwareModels::meta;
		}
		void InitComposition25()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::FM::TestModels::meta_RootFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::TestModels::meta_RootFolder_parent.name() = "RootFolder_parent";
			::FCSL::FM::TestModels::meta_RootFolder_parent.isNavigable() = true;
			::FCSL::FM::TestModels::meta_RootFolder_parent.target() = ::FCSL::RootFolder::meta;
			::FCSL::RootFolder::meta_FM_TestModels_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::RootFolder::meta_FM_TestModels_children.name() = "FM_TestModels";
			::FCSL::RootFolder::meta_FM_TestModels_children.min() = 0;
			::FCSL::RootFolder::meta_FM_TestModels_children.max() = -1;
			::FCSL::RootFolder::meta_FM_TestModels_children.isNavigable() = true;
			::FCSL::RootFolder::meta_FM_TestModels_children.target() = ::FCSL::FM::TestModels::meta;
		}
		void InitComposition26()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::FM::PlatformModels::meta_RootFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::PlatformModels::meta_RootFolder_parent.name() = "RootFolder_parent";
			::FCSL::FM::PlatformModels::meta_RootFolder_parent.isNavigable() = true;
			::FCSL::FM::PlatformModels::meta_RootFolder_parent.target() = ::FCSL::RootFolder::meta;
			::FCSL::RootFolder::meta_FM_PlatformModels_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::RootFolder::meta_FM_PlatformModels_children.name() = "FM_PlatformModels";
			::FCSL::RootFolder::meta_FM_PlatformModels_children.min() = 0;
			::FCSL::RootFolder::meta_FM_PlatformModels_children.max() = -1;
			::FCSL::RootFolder::meta_FM_PlatformModels_children.isNavigable() = true;
			::FCSL::RootFolder::meta_FM_PlatformModels_children.target() = ::FCSL::FM::PlatformModels::meta;
		}
		void InitComposition27()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::FM::UnitModels::meta_RootFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::UnitModels::meta_RootFolder_parent.name() = "RootFolder_parent";
			::FCSL::FM::UnitModels::meta_RootFolder_parent.isNavigable() = true;
			::FCSL::FM::UnitModels::meta_RootFolder_parent.target() = ::FCSL::RootFolder::meta;
			::FCSL::RootFolder::meta_FM_UnitModels_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::RootFolder::meta_FM_UnitModels_children.name() = "FM_UnitModels";
			::FCSL::RootFolder::meta_FM_UnitModels_children.min() = 0;
			::FCSL::RootFolder::meta_FM_UnitModels_children.max() = -1;
			::FCSL::RootFolder::meta_FM_UnitModels_children.isNavigable() = true;
			::FCSL::RootFolder::meta_FM_UnitModels_children.target() = ::FCSL::FM::UnitModels::meta;
		}
		void InitComposition28()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::SLSF::Dataflow::meta_RootFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SLSF::Dataflow::meta_RootFolder_parent.name() = "RootFolder_parent";
			::FCSL::SLSF::Dataflow::meta_RootFolder_parent.isNavigable() = true;
			::FCSL::SLSF::Dataflow::meta_RootFolder_parent.target() = ::FCSL::RootFolder::meta;
			::FCSL::RootFolder::meta_SLSF_Dataflow_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::RootFolder::meta_SLSF_Dataflow_children.name() = "SLSF_Dataflow";
			::FCSL::RootFolder::meta_SLSF_Dataflow_children.min() = 0;
			::FCSL::RootFolder::meta_SLSF_Dataflow_children.max() = -1;
			::FCSL::RootFolder::meta_SLSF_Dataflow_children.isNavigable() = true;
			::FCSL::RootFolder::meta_SLSF_Dataflow_children.target() = ::FCSL::SLSF::Dataflow::meta;
		}
		void InitComposition29()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::SLSF::Types::meta_RootFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SLSF::Types::meta_RootFolder_parent.name() = "RootFolder_parent";
			::FCSL::SLSF::Types::meta_RootFolder_parent.isNavigable() = true;
			::FCSL::SLSF::Types::meta_RootFolder_parent.target() = ::FCSL::RootFolder::meta;
			::FCSL::RootFolder::meta_SLSF_Types_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::RootFolder::meta_SLSF_Types_children.name() = "SLSF_Types";
			::FCSL::RootFolder::meta_SLSF_Types_children.min() = 0;
			::FCSL::RootFolder::meta_SLSF_Types_children.max() = -1;
			::FCSL::RootFolder::meta_SLSF_Types_children.isNavigable() = true;
			::FCSL::RootFolder::meta_SLSF_Types_children.target() = ::FCSL::SLSF::Types::meta;
		}
		void InitComposition30()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::SLSF::Stateflow::meta_RootFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SLSF::Stateflow::meta_RootFolder_parent.name() = "RootFolder_parent";
			::FCSL::SLSF::Stateflow::meta_RootFolder_parent.isNavigable() = true;
			::FCSL::SLSF::Stateflow::meta_RootFolder_parent.target() = ::FCSL::RootFolder::meta;
			::FCSL::RootFolder::meta_SLSF_Stateflow_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::RootFolder::meta_SLSF_Stateflow_children.name() = "SLSF_Stateflow";
			::FCSL::RootFolder::meta_SLSF_Stateflow_children.min() = 0;
			::FCSL::RootFolder::meta_SLSF_Stateflow_children.max() = -1;
			::FCSL::RootFolder::meta_SLSF_Stateflow_children.isNavigable() = true;
			::FCSL::RootFolder::meta_SLSF_Stateflow_children.target() = ::FCSL::SLSF::Stateflow::meta;
		}
		void InitComposition31()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::FCSL::RootFolder::meta_RootFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::RootFolder::meta_RootFolder_parent.name() = "RootFolder_parent";
			::FCSL::RootFolder::meta_RootFolder_parent.isNavigable() = true;
			::FCSL::RootFolder::meta_RootFolder_parent.target() = ::FCSL::RootFolder::meta;
			::FCSL::RootFolder::meta_RootFolder_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::RootFolder::meta_RootFolder_children.name() = "RootFolder";
			::FCSL::RootFolder::meta_RootFolder_children.min() = 0;
			::FCSL::RootFolder::meta_RootFolder_children.max() = -1;
			::FCSL::RootFolder::meta_RootFolder_children.isNavigable() = true;
			::FCSL::RootFolder::meta_RootFolder_children.target() = ::FCSL::RootFolder::meta;
		}
		void InitCrossNSCompositions()
		{
			InitComposition25();
			InitComposition26();
			InitComposition27();
			InitComposition28();
			InitComposition29();
			InitComposition30();
		}
		void InitInheritence()
		{
			EventPortMapping_Members_Base::meta.subTypes() +=  ::FCSL::EventPort::meta;
			CommMapping_Members_Base::meta.subTypes() +=  ::FCSL::DevicePort::meta;
			CommMapping_Members_Base::meta.subTypes() +=  ::FCSL::Port::meta;
			PortMapping_Members_Base::meta.subTypes() +=  ::FCSL::Port::meta;
			DevicePort::meta.subTypes() +=  ::FCSL::BusPort::meta;
			HWElement::meta.subTypes() +=  ::FCSL::ProcessingModule::meta;
			HWElement::meta.subTypes() +=  ::FCSL::Bus::meta;
			HWElement::meta.subTypes() +=  ::FCSL::Wire::meta;
			CommElement::meta.subTypes() +=  ::FCSL::Bus::meta;
			CommElement::meta.subTypes() +=  ::FCSL::BusPort::meta;
			EventPort::meta.subTypes() +=  ::FCSL::InputEvent::meta;
			EventPort::meta.subTypes() +=  ::FCSL::OutputEvent::meta;
			Port::meta.subTypes() +=  ::FCSL::OutputPort::meta;
			Port::meta.subTypes() +=  ::FCSL::InputPort::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::ScheduleItem::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::Partition::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::CommMapping::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::Process::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::OperatingMode::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::DevicePort::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::HWElement::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::CommElement::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::HardwareSheet::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::Port2Channel::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::Channel2Port::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::EventPort::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::Port::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::Channel::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::EventChannel::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::ComponentSheet::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::Component::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::EventPortMapping::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::OE2EC::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::EC2IE::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::BitTestRef::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::PortMapping::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::SystemRef::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::ComponentShortcut::meta;
		}
		void InitCrossNSInheritence()
		{
			EventPortMapping_Members_Base::meta.subTypes() +=  ::FCSL::SLSF::Port::meta;
			PortMapping_Members_Base::meta.subTypes() +=  ::FCSL::SLSF::Port::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::FM::Sig2Dataport::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::FM::Device2Surface::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::FM::Ctrl2Device::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::FM::FaultModelElementPort::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::FM::Test::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::FM::TestContainer::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::FM::TestGroup::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::FM::FaultModelElement::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::FM::FailureModeRef::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::FM::Platform::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::FM::Entity::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::FM::DataPort::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::FM::TestRef::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::SLSF::Block::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::SLSF::Annotation::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::SLSF::Parameter::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::SLSF::Line::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::SLSF::Port::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::SLSF::TypeBase::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::SLSF::TypeBaseRef::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::SLSF::Data::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::SLSF::Event::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::SLSF::Transition::meta;
			MgaObject::meta.subTypes() +=  ::FCSL::SLSF::TransConnector::meta;
		}
		void InitializeDgr()
		{
			Creates();
			InitClassesAttributes();
			CreatesNamespaces();
			InitNamespaces();
			InitAssociation0();
			InitAssociation1();
			InitAssociation2();
			InitAssociation3();
			InitAssociation4();
			InitAssociation5();
			InitAssociation6();
			InitAssociation7();
			InitAssociation8();
			InitAssociation9();
			InitAssociation10();
			InitAssociation11();
			InitAssociation12();
			InitComposition0();
			InitComposition1();
			InitComposition2();
			InitComposition3();
			InitComposition4();
			InitComposition5();
			InitComposition6();
			InitComposition7();
			InitComposition8();
			InitComposition9();
			InitComposition10();
			InitComposition11();
			InitComposition12();
			InitComposition13();
			InitComposition14();
			InitComposition15();
			InitComposition16();
			InitComposition17();
			InitComposition18();
			InitComposition19();
			InitComposition20();
			InitComposition21();
			InitComposition22();
			InitComposition23();
			InitComposition24();
			InitComposition31();
			InitInheritence();
		}

		// initialize from another diagram
		void Creates2(const ::Uml::Diagram &dgr)
		{
			::Uml::SetClass(EventPortMapping_Members_Base::meta, dgr, "EventPortMapping_Members_Base");
			::Uml::SetClass(CommMapping_Members_Base::meta, dgr, "CommMapping_Members_Base");
			::Uml::SetClass(PortMapping_Members_Base::meta, dgr, "PortMapping_Members_Base");
			::Uml::SetClass(ScheduleItem::meta, dgr, "ScheduleItem");
			::Uml::SetAttribute(ScheduleItem::meta_Duration, ScheduleItem::meta, "Duration");
			::Uml::SetAttribute(ScheduleItem::meta_activationDelay, ScheduleItem::meta, "activationDelay");
			::Uml::SetAttribute(ScheduleItem::meta_activationPeriod, ScheduleItem::meta, "activationPeriod");
			::Uml::SetClass(Partition::meta, dgr, "Partition");
			::Uml::SetAttribute(Partition::meta_ID, Partition::meta, "ID");
			::Uml::SetAttribute(Partition::meta_Name, Partition::meta, "Name");
			::Uml::SetAttribute(Partition::meta_PartitionMemory, Partition::meta, "PartitionMemory");
			::Uml::SetAttribute(Partition::meta_SystemPartition, Partition::meta, "SystemPartition");
			::Uml::SetAttribute(Partition::meta_Criticality, Partition::meta, "Criticality");
			::Uml::SetAttribute(Partition::meta_startupOrder, Partition::meta, "startupOrder");
			::Uml::SetClass(CommMapping::meta, dgr, "CommMapping");
			::Uml::SetClass(Process::meta, dgr, "Process");
			::Uml::SetAttribute(Process::meta_TimeCapacity, Process::meta, "TimeCapacity");
			::Uml::SetAttribute(Process::meta_Name, Process::meta, "Name");
			::Uml::SetAttribute(Process::meta_kindOfDeadline, Process::meta, "kindOfDeadline");
			::Uml::SetAttribute(Process::meta_stackSize, Process::meta, "stackSize");
			::Uml::SetAttribute(Process::meta_startOffset, Process::meta, "startOffset");
			::Uml::SetAttribute(Process::meta_basePriority, Process::meta, "basePriority");
			::Uml::SetAttribute(Process::meta_activationPeriod, Process::meta, "activationPeriod");
			::Uml::SetAttribute(Process::meta_isAperiodic, Process::meta, "isAperiodic");
			::Uml::SetAttribute(Process::meta_entryPoint, Process::meta, "entryPoint");
			::Uml::SetAttribute(Process::meta_infiniteTimeCapacity, Process::meta, "infiniteTimeCapacity");
			::Uml::SetAttribute(Process::meta_isHealthMonitor, Process::meta, "isHealthMonitor");
			::Uml::SetClass(OperatingMode::meta, dgr, "OperatingMode");
			::Uml::SetAttribute(OperatingMode::meta_Name, OperatingMode::meta, "Name");
			::Uml::SetClass(ProcessingModule::meta, dgr, "ProcessingModule");
			::Uml::SetAttribute(ProcessingModule::meta_SPECint_rate2000, ProcessingModule::meta, "SPECint_rate2000");
			::Uml::SetAttribute(ProcessingModule::meta_Name, ProcessingModule::meta, "Name");
			::Uml::SetAttribute(ProcessingModule::meta_CPUType, ProcessingModule::meta, "CPUType");
			::Uml::SetAttribute(ProcessingModule::meta_Cores, ProcessingModule::meta, "Cores");
			::Uml::SetAttribute(ProcessingModule::meta_SPECfp_rate2000, ProcessingModule::meta, "SPECfp_rate2000");
			::Uml::SetAttribute(ProcessingModule::meta_Memory, ProcessingModule::meta, "Memory");
			::Uml::SetClass(DevicePort::meta, dgr, "DevicePort");
			::Uml::SetAttribute(DevicePort::meta_PhysicalAddress, DevicePort::meta, "PhysicalAddress");
			::Uml::SetAttribute(DevicePort::meta_Procedure, DevicePort::meta, "Procedure");
			::Uml::SetClass(Bus::meta, dgr, "Bus");
			::Uml::SetAttribute(Bus::meta_Medium, Bus::meta, "Medium");
			::Uml::SetAttribute(Bus::meta_Name, Bus::meta, "Name");
			::Uml::SetAttribute(Bus::meta_FrameSize, Bus::meta, "FrameSize");
			::Uml::SetAttribute(Bus::meta_BusSpeed, Bus::meta, "BusSpeed");
			::Uml::SetAttribute(Bus::meta_MajorCycle, Bus::meta, "MajorCycle");
			::Uml::SetClass(BusPort::meta, dgr, "BusPort");
			::Uml::SetClass(HWElement::meta, dgr, "HWElement");
			::Uml::SetClass(Wire::meta, dgr, "Wire");
			::Uml::SetClass(HardwareModels::meta, dgr, "HardwareModels");
			::Uml::SetAttribute(HardwareModels::meta_name, HardwareModels::meta, "name");
			::Uml::SetClass(CommElement::meta, dgr, "CommElement");
			::Uml::SetClass(HardwareSheet::meta, dgr, "HardwareSheet");
			::Uml::SetClass(Port2Channel::meta, dgr, "Port2Channel");
			::Uml::SetClass(Channel2Port::meta, dgr, "Channel2Port");
			::Uml::SetClass(EventPort::meta, dgr, "EventPort");
			::Uml::SetAttribute(EventPort::meta_Name, EventPort::meta, "Name");
			::Uml::SetClass(Port::meta, dgr, "Port");
			::Uml::SetAttribute(Port::meta_MaxMessageSize, Port::meta, "MaxMessageSize");
			::Uml::SetAttribute(Port::meta_Name, Port::meta, "Name");
			::Uml::SetAttribute(Port::meta_RefreshRateSeconds, Port::meta, "RefreshRateSeconds");
			::Uml::SetAttribute(Port::meta_MaxNbMessages, Port::meta, "MaxNbMessages");
			::Uml::SetAttribute(Port::meta_Type, Port::meta, "Type");
			::Uml::SetClass(Channel::meta, dgr, "Channel");
			::Uml::SetAttribute(Channel::meta_ID, Channel::meta, "ID");
			::Uml::SetAttribute(Channel::meta_Name, Channel::meta, "Name");
			::Uml::SetAttribute(Channel::meta_Type, Channel::meta, "Type");
			::Uml::SetClass(EventChannel::meta, dgr, "EventChannel");
			::Uml::SetAttribute(EventChannel::meta_QueuingDiscipline, EventChannel::meta, "QueuingDiscipline");
			::Uml::SetAttribute(EventChannel::meta_Name, EventChannel::meta, "Name");
			::Uml::SetAttribute(EventChannel::meta_ChannelType, EventChannel::meta, "ChannelType");
			::Uml::SetAttribute(EventChannel::meta_Count, EventChannel::meta, "Count");
			::Uml::SetClass(ComponentSheet::meta, dgr, "ComponentSheet");
			::Uml::SetClass(Component::meta, dgr, "Component");
			::Uml::SetAttribute(Component::meta_Name, Component::meta, "Name");
			::Uml::SetClass(EventPortMapping::meta, dgr, "EventPortMapping");
			::Uml::SetAttribute(EventPortMapping::meta_StorageClass, EventPortMapping::meta, "StorageClass");
			::Uml::SetClass(OutputPort::meta, dgr, "OutputPort");
			::Uml::SetClass(OE2EC::meta, dgr, "OE2EC");
			::Uml::SetClass(EC2IE::meta, dgr, "EC2IE");
			::Uml::SetClass(ComponentModels::meta, dgr, "ComponentModels");
			::Uml::SetAttribute(ComponentModels::meta_name, ComponentModels::meta, "name");
			::Uml::SetClass(BitTestRef::meta, dgr, "BitTestRef");
			::Uml::SetClass(PortMapping::meta, dgr, "PortMapping");
			::Uml::SetAttribute(PortMapping::meta_StorageClass, PortMapping::meta, "StorageClass");
			::Uml::SetClass(InputEvent::meta, dgr, "InputEvent");
			::Uml::SetClass(SystemRef::meta, dgr, "SystemRef");
			::Uml::SetClass(OutputEvent::meta, dgr, "OutputEvent");
			::Uml::SetClass(InputPort::meta, dgr, "InputPort");
			::Uml::SetClass(ComponentShortcut::meta, dgr, "ComponentShortcut");
			::Uml::SetClass(RootFolder::meta, dgr, "RootFolder");
			::Uml::SetAttribute(RootFolder::meta_name, RootFolder::meta, "name");
			::Uml::SetClass(MgaObject::meta, dgr, "MgaObject");
			::Uml::SetAttribute(MgaObject::meta_position, MgaObject::meta, "position");
			::Uml::SetAttribute(MgaObject::meta_name, MgaObject::meta, "name");
		}
		void CreatesNamespaces2(const ::Uml::Diagram &dgr)
		{
			::Uml::SetNamespace(FM::meta, dgr, "FM");
			::Uml::SetNamespace(SLSF::meta, dgr, "SLSF");
		}
		void InitializeDgrSetupMeta(const ::Uml::Diagram & dgr)
		{
			Creates2(dgr);
			CreatesNamespaces2(dgr);
			FM::InitializeNSSetupMeta(FM::meta);
			SLSF::InitializeNSSetupMeta(SLSF::meta);
		}
		void InitializeDgr2()
		{
			//composition child roles 
			::Uml::SetParentRole(ScheduleItem::meta_ProcessingModule_parent, ScheduleItem::meta, ::FCSL::ProcessingModule::meta, "", "");
			::Uml::SetParentRole(Partition::meta_ProcessingModule_parent, Partition::meta, ::FCSL::ProcessingModule::meta, "", "");
			::Uml::SetParentRole(CommMapping::meta_ProcessingModule_parent, CommMapping::meta, ::FCSL::ProcessingModule::meta, "", "");
			::Uml::SetParentRole(Process::meta_ProcessingModule_parent, Process::meta, ::FCSL::ProcessingModule::meta, "", "");
			::Uml::SetParentRole(OperatingMode::meta_ProcessingModule_parent, OperatingMode::meta, ::FCSL::ProcessingModule::meta, "", "");
			::Uml::SetParentRole(DevicePort::meta_ProcessingModule_parent, DevicePort::meta, ::FCSL::ProcessingModule::meta, "", "");
			::Uml::SetParentRole(HWElement::meta_HardwareSheet_parent, HWElement::meta, ::FCSL::HardwareSheet::meta, "", "");
			::Uml::SetParentRole(HardwareModels::meta_RootFolder_parent, HardwareModels::meta, ::FCSL::RootFolder::meta, "", "");
			::Uml::SetParentRole(HardwareSheet::meta_HardwareModels_parent, HardwareSheet::meta, ::FCSL::HardwareModels::meta, "", "");
			::Uml::SetParentRole(Port2Channel::meta_ComponentSheet_parent, Port2Channel::meta, ::FCSL::ComponentSheet::meta, "", "");
			::Uml::SetParentRole(Channel2Port::meta_ComponentSheet_parent, Channel2Port::meta, ::FCSL::ComponentSheet::meta, "", "");
			::Uml::SetParentRole(EventPort::meta_Component_parent, EventPort::meta, ::FCSL::Component::meta, "", "");
			::Uml::SetParentRole(Port::meta_Component_parent, Port::meta, ::FCSL::Component::meta, "", "");
			::Uml::SetParentRole(Channel::meta_ComponentSheet_parent, Channel::meta, ::FCSL::ComponentSheet::meta, "", "");
			::Uml::SetParentRole(EventChannel::meta_ComponentSheet_parent, EventChannel::meta, ::FCSL::ComponentSheet::meta, "", "");
			::Uml::SetParentRole(ComponentSheet::meta_ComponentModels_parent, ComponentSheet::meta, ::FCSL::ComponentModels::meta, "", "");
			::Uml::SetParentRole(Component::meta_ComponentSheet_parent, Component::meta, ::FCSL::ComponentSheet::meta, "", "");
			::Uml::SetParentRole(EventPortMapping::meta_Component_parent, EventPortMapping::meta, ::FCSL::Component::meta, "", "");
			::Uml::SetParentRole(OE2EC::meta_ComponentSheet_parent, OE2EC::meta, ::FCSL::ComponentSheet::meta, "", "");
			::Uml::SetParentRole(EC2IE::meta_ComponentSheet_parent, EC2IE::meta, ::FCSL::ComponentSheet::meta, "", "");
			::Uml::SetParentRole(ComponentModels::meta_RootFolder_parent, ComponentModels::meta, ::FCSL::RootFolder::meta, "", "");
			::Uml::SetParentRole(BitTestRef::meta_Component_parent, BitTestRef::meta, ::FCSL::Component::meta, "", "");
			::Uml::SetParentRole(PortMapping::meta_Component_parent, PortMapping::meta, ::FCSL::Component::meta, "", "");
			::Uml::SetParentRole(SystemRef::meta_Component_parent, SystemRef::meta, ::FCSL::Component::meta, "", "");
			::Uml::SetParentRole(ComponentShortcut::meta_ComponentSheet_parent, ComponentShortcut::meta, ::FCSL::ComponentSheet::meta, "", "");
			::Uml::SetParentRole(RootFolder::meta_RootFolder_parent, RootFolder::meta, ::FCSL::RootFolder::meta, "", "");

			// composition parentroles 
			::Uml::SetChildRole(ProcessingModule::meta_Process_children, ProcessingModule::meta, ::FCSL::Process::meta, "", "");
			::Uml::SetChildRole(ProcessingModule::meta_DevicePort_children, ProcessingModule::meta, ::FCSL::DevicePort::meta, "", "");
			::Uml::SetChildRole(ProcessingModule::meta_OperatingMode_children, ProcessingModule::meta, ::FCSL::OperatingMode::meta, "", "");
			::Uml::SetChildRole(ProcessingModule::meta_ScheduleItem_children, ProcessingModule::meta, ::FCSL::ScheduleItem::meta, "", "");
			::Uml::SetChildRole(ProcessingModule::meta_CommMapping_children, ProcessingModule::meta, ::FCSL::CommMapping::meta, "", "");
			::Uml::SetChildRole(ProcessingModule::meta_Partition_children, ProcessingModule::meta, ::FCSL::Partition::meta, "", "");
			::Uml::SetChildRole(HardwareModels::meta_HardwareSheet_children, HardwareModels::meta, ::FCSL::HardwareSheet::meta, "", "");
			::Uml::SetChildRole(HardwareSheet::meta_HWElement_children, HardwareSheet::meta, ::FCSL::HWElement::meta, "", "");
			::Uml::SetChildRole(ComponentSheet::meta_Component_children, ComponentSheet::meta, ::FCSL::Component::meta, "", "");
			::Uml::SetChildRole(ComponentSheet::meta_EC2IE_children, ComponentSheet::meta, ::FCSL::EC2IE::meta, "", "");
			::Uml::SetChildRole(ComponentSheet::meta_OE2EC_children, ComponentSheet::meta, ::FCSL::OE2EC::meta, "", "");
			::Uml::SetChildRole(ComponentSheet::meta_ComponentShortcut_children, ComponentSheet::meta, ::FCSL::ComponentShortcut::meta, "", "");
			::Uml::SetChildRole(ComponentSheet::meta_Channel2Port_children, ComponentSheet::meta, ::FCSL::Channel2Port::meta, "", "");
			::Uml::SetChildRole(ComponentSheet::meta_EventChannel_children, ComponentSheet::meta, ::FCSL::EventChannel::meta, "", "");
			::Uml::SetChildRole(ComponentSheet::meta_Port2Channel_children, ComponentSheet::meta, ::FCSL::Port2Channel::meta, "", "");
			::Uml::SetChildRole(ComponentSheet::meta_Channel_children, ComponentSheet::meta, ::FCSL::Channel::meta, "", "");
			::Uml::SetChildRole(Component::meta_EventPortMapping_children, Component::meta, ::FCSL::EventPortMapping::meta, "", "");
			::Uml::SetChildRole(Component::meta_Port_children, Component::meta, ::FCSL::Port::meta, "", "");
			::Uml::SetChildRole(Component::meta_SystemRef_child, Component::meta, ::FCSL::SystemRef::meta, "", "");
			::Uml::SetChildRole(Component::meta_BitTestRef_child, Component::meta, ::FCSL::BitTestRef::meta, "", "");
			::Uml::SetChildRole(Component::meta_PortMapping_children, Component::meta, ::FCSL::PortMapping::meta, "", "");
			::Uml::SetChildRole(Component::meta_EventPort_children, Component::meta, ::FCSL::EventPort::meta, "", "");
			::Uml::SetChildRole(ComponentModels::meta_ComponentSheet_children, ComponentModels::meta, ::FCSL::ComponentSheet::meta, "", "");
			::Uml::SetChildRole(RootFolder::meta_ComponentModels_children, RootFolder::meta, ::FCSL::ComponentModels::meta, "", "");
			::Uml::SetChildRole(RootFolder::meta_HardwareModels_children, RootFolder::meta, ::FCSL::HardwareModels::meta, "", "");
			::Uml::SetChildRole(RootFolder::meta_FM_TestModels_children, RootFolder::meta, ::FCSL::FM::TestModels::meta, "", "");
			::Uml::SetChildRole(RootFolder::meta_FM_PlatformModels_children, RootFolder::meta, ::FCSL::FM::PlatformModels::meta, "", "");
			::Uml::SetChildRole(RootFolder::meta_FM_UnitModels_children, RootFolder::meta, ::FCSL::FM::UnitModels::meta, "", "");
			::Uml::SetChildRole(RootFolder::meta_SLSF_Dataflow_children, RootFolder::meta, ::FCSL::SLSF::Dataflow::meta, "", "");
			::Uml::SetChildRole(RootFolder::meta_SLSF_Types_children, RootFolder::meta, ::FCSL::SLSF::Types::meta, "", "");
			::Uml::SetChildRole(RootFolder::meta_SLSF_Stateflow_children, RootFolder::meta, ::FCSL::SLSF::Stateflow::meta, "", "");
			::Uml::SetChildRole(RootFolder::meta_RootFolder_children, RootFolder::meta, ::FCSL::RootFolder::meta, "", "");

			// Association roles 
			::Uml::SetAssocRole(EventPortMapping_Members_Base::meta_srcEventPortMapping, EventPortMapping_Members_Base::meta, ::FCSL::EventPortMapping_Members_Base::meta, "dstEventPortMapping");
			::FCSL::EventPortMapping_Members_Base::meta_dstEventPortMapping_rev = EventPortMapping_Members_Base::meta_srcEventPortMapping;
			::Uml::SetAssocRole(EventPortMapping_Members_Base::meta_dstEventPortMapping, EventPortMapping_Members_Base::meta, ::FCSL::EventPortMapping_Members_Base::meta, "srcEventPortMapping");
			::FCSL::EventPortMapping_Members_Base::meta_srcEventPortMapping_rev = EventPortMapping_Members_Base::meta_dstEventPortMapping;
			::Uml::SetAssocRole(CommMapping_Members_Base::meta_srcCommMapping, CommMapping_Members_Base::meta, ::FCSL::CommMapping_Members_Base::meta, "dstCommMapping");
			::FCSL::CommMapping_Members_Base::meta_dstCommMapping_rev = CommMapping_Members_Base::meta_srcCommMapping;
			::Uml::SetAssocRole(CommMapping_Members_Base::meta_dstCommMapping, CommMapping_Members_Base::meta, ::FCSL::CommMapping_Members_Base::meta, "srcCommMapping");
			::FCSL::CommMapping_Members_Base::meta_srcCommMapping_rev = CommMapping_Members_Base::meta_dstCommMapping;
			::Uml::SetAssocRole(PortMapping_Members_Base::meta_srcInPortMapping, PortMapping_Members_Base::meta, ::FCSL::PortMapping_Members_Base::meta, "dstInPortMapping");
			::FCSL::PortMapping_Members_Base::meta_dstInPortMapping_rev = PortMapping_Members_Base::meta_srcInPortMapping;
			::Uml::SetAssocRole(PortMapping_Members_Base::meta_dstInPortMapping, PortMapping_Members_Base::meta, ::FCSL::PortMapping_Members_Base::meta, "srcInPortMapping");
			::FCSL::PortMapping_Members_Base::meta_srcInPortMapping_rev = PortMapping_Members_Base::meta_dstInPortMapping;
			::Uml::SetAssocRole(ScheduleItem::meta_ref, ScheduleItem::meta, ::FCSL::Partition::meta, "referedbyScheduleItem");
			::Uml::SetAssocRole(ScheduleItem::meta_setOperatingMode, ScheduleItem::meta, ::FCSL::OperatingMode::meta, "members");
			::Uml::SetAssocRole(Partition::meta_referedbyScheduleItem, Partition::meta, ::FCSL::ScheduleItem::meta, "ref");
			::Uml::SetAssocRole(Partition::meta_members, Partition::meta, ::FCSL::Process::meta, "setPartition");
			::Uml::SetAssocRole(Process::meta_setPartition, Process::meta, ::FCSL::Partition::meta, "members");
			::Uml::SetAssocRole(Process::meta_ref, Process::meta, ::FCSL::Component::meta, "referedbyProcess");
			::Uml::SetAssocRole(OperatingMode::meta_members, OperatingMode::meta, ::FCSL::ScheduleItem::meta, "setOperatingMode");
			::Uml::SetAssocRole(CommElement::meta_srcWire, CommElement::meta, ::FCSL::CommElement::meta, "dstWire");
			::FCSL::CommElement::meta_dstWire_rev = CommElement::meta_srcWire;
			::Uml::SetAssocRole(CommElement::meta_dstWire, CommElement::meta, ::FCSL::CommElement::meta, "srcWire");
			::FCSL::CommElement::meta_srcWire_rev = CommElement::meta_dstWire;
			::Uml::SetAssocRole(Channel::meta_srcPort2Channel, Channel::meta, ::FCSL::OutputPort::meta, "dstPort2Channel");
			::FCSL::OutputPort::meta_dstPort2Channel_rev = Channel::meta_srcPort2Channel;
			::Uml::SetAssocRole(Channel::meta_dstChannel2Port, Channel::meta, ::FCSL::InputPort::meta, "srcChannel2Port");
			::FCSL::InputPort::meta_srcChannel2Port_rev = Channel::meta_dstChannel2Port;
			::Uml::SetAssocRole(EventChannel::meta_srcOE2EC, EventChannel::meta, ::FCSL::OutputEvent::meta, "dstOE2EC");
			::FCSL::OutputEvent::meta_dstOE2EC_rev = EventChannel::meta_srcOE2EC;
			::Uml::SetAssocRole(EventChannel::meta_dstEC2IE, EventChannel::meta, ::FCSL::InputEvent::meta, "srcEC2IE");
			::FCSL::InputEvent::meta_srcEC2IE_rev = EventChannel::meta_dstEC2IE;
			::Uml::SetAssocRole(Component::meta_referedbyProcess, Component::meta, ::FCSL::Process::meta, "ref");
			::Uml::SetAssocRole(Component::meta_referedbyComponentShortcut, Component::meta, ::FCSL::ComponentShortcut::meta, "ref");
			::Uml::SetAssocRole(OutputPort::meta_dstPort2Channel, OutputPort::meta, ::FCSL::Channel::meta, "srcPort2Channel");
			::FCSL::Channel::meta_srcPort2Channel_rev = OutputPort::meta_dstPort2Channel;
			::Uml::SetAssocRole(BitTestRef::meta_ref, BitTestRef::meta, ::FCSL::FM::Test::meta, "referedbyBitTestRef");
			::Uml::SetAssocRole(InputEvent::meta_srcEC2IE, InputEvent::meta, ::FCSL::EventChannel::meta, "dstEC2IE");
			::FCSL::EventChannel::meta_dstEC2IE_rev = InputEvent::meta_srcEC2IE;
			::Uml::SetAssocRole(SystemRef::meta_ref, SystemRef::meta, ::FCSL::SLSF::System::meta, "referedbySystemRef");
			::Uml::SetAssocRole(OutputEvent::meta_dstOE2EC, OutputEvent::meta, ::FCSL::EventChannel::meta, "srcOE2EC");
			::FCSL::EventChannel::meta_srcOE2EC_rev = OutputEvent::meta_dstOE2EC;
			::Uml::SetAssocRole(InputPort::meta_srcChannel2Port, InputPort::meta, ::FCSL::Channel::meta, "dstChannel2Port");
			::FCSL::Channel::meta_dstChannel2Port_rev = InputPort::meta_srcChannel2Port;
			::Uml::SetAssocRole(ComponentShortcut::meta_ref, ComponentShortcut::meta, ::FCSL::Component::meta, "referedbyComponentShortcut");
			CommMapping::meta_dstCommMapping_end_ = ::FCSL::CommMapping_Members_Base::meta_dstCommMapping;
			CommMapping::meta_srcCommMapping_end_ = ::FCSL::CommMapping_Members_Base::meta_srcCommMapping;
			Wire::meta_dstWire_end_ = ::FCSL::CommElement::meta_dstWire;
			Wire::meta_srcWire_end_ = ::FCSL::CommElement::meta_srcWire;
			Port2Channel::meta_dstPort2Channel_end_ = ::FCSL::OutputPort::meta_dstPort2Channel;
			Port2Channel::meta_srcPort2Channel_end_ = ::FCSL::Channel::meta_srcPort2Channel;
			Channel2Port::meta_srcChannel2Port_end_ = ::FCSL::InputPort::meta_srcChannel2Port;
			Channel2Port::meta_dstChannel2Port_end_ = ::FCSL::Channel::meta_dstChannel2Port;
			EventPortMapping::meta_dstEventPortMapping_end_ = ::FCSL::EventPortMapping_Members_Base::meta_dstEventPortMapping;
			EventPortMapping::meta_srcEventPortMapping_end_ = ::FCSL::EventPortMapping_Members_Base::meta_srcEventPortMapping;
			OE2EC::meta_dstOE2EC_end_ = ::FCSL::OutputEvent::meta_dstOE2EC;
			OE2EC::meta_srcOE2EC_end_ = ::FCSL::EventChannel::meta_srcOE2EC;
			EC2IE::meta_srcEC2IE_end_ = ::FCSL::InputEvent::meta_srcEC2IE;
			EC2IE::meta_dstEC2IE_end_ = ::FCSL::EventChannel::meta_dstEC2IE;
			PortMapping::meta_dstInPortMapping_end_ = ::FCSL::PortMapping_Members_Base::meta_dstInPortMapping;
			PortMapping::meta_srcInPortMapping_end_ = ::FCSL::PortMapping_Members_Base::meta_srcInPortMapping;

			// namespaces
			FM::InitializeNS2();
			SLSF::InitializeNS2();
			
		}

	namespace FM {
		::Uml::Namespace meta;
		::Uml::Class TestModels::meta;
		::Uml::Class PlatformModels::meta;
		::Uml::Class UnitModels::meta;
		::Uml::Class FM2DOP::meta;
		::Uml::Class Device::meta;
		::Uml::Class Sig2Dataport::meta;
		::Uml::Class Device2Surface::meta;
		::Uml::Class DiscrepancyPort::meta;
		::Uml::Class FailureMode::meta;
		::Uml::Class Assembly::meta;
		::Uml::Class DIP2D::meta;
		::Uml::Class Discrepancy::meta;
		::Uml::Class FM2D::meta;
		::Uml::Class DiscrepancyOutPort::meta;
		::Uml::Class SignalflowConn::meta;
		::Uml::Class DOP2T::meta;
		::Uml::Class Surface::meta;
		::Uml::Class DataOut::meta;
		::Uml::Class Ctrl2Device::meta;
		::Uml::Class FaultModelElementPort::meta;
		::Uml::Class DataIn::meta;
		::Uml::Class Test::meta;
		::Uml::Class TestContainer::meta;
		::Uml::Class TestGroup::meta;
		::Uml::Class D2Test::meta;
		::Uml::Class Control::meta;
		::Uml::Class FaultModelElement::meta;
		::Uml::Class FailureModeRef::meta;
		::Uml::Class Platform::meta;
		::Uml::Class DOP2D::meta;
		::Uml::Class D2DOP::meta;
		::Uml::Class Entity::meta;
		::Uml::Class Unit::meta;
		::Uml::Class DiscrepancyInPort::meta;
		::Uml::Class DataPort::meta;
		::Uml::Class FailureProp::meta;
		::Uml::Class DIP2DOP::meta;
		::Uml::Class TestInstance::meta;
		::Uml::Class Signal::meta;
		::Uml::Class TestRef::meta;
		::Uml::Attribute TestModels::meta_name;
		::Uml::Attribute PlatformModels::meta_name;
		::Uml::Attribute UnitModels::meta_name;
		::Uml::Attribute Discrepancy::meta_DiscrepancyType;
		::Uml::AssociationRole FM2DOP::meta_srcFM2DOP_end_;
		::Uml::AssociationRole FM2DOP::meta_dstFM2DOP_end_;
		::Uml::AssociationRole Device::meta_srcCtrl2Device, Device::meta_srcCtrl2Device_rev;
		::Uml::AssociationRole Device::meta_dstDevice2Surface, Device::meta_dstDevice2Surface_rev;
		::Uml::AssociationRole Sig2Dataport::meta_dstSig2Dataport_end_;
		::Uml::AssociationRole Sig2Dataport::meta_srcSig2Dataport_end_;
		::Uml::AssociationRole Device2Surface::meta_srcDevice2Surface_end_;
		::Uml::AssociationRole Device2Surface::meta_dstDevice2Surface_end_;
		::Uml::AssociationRole DiscrepancyPort::meta_srcDIP2DOP, DiscrepancyPort::meta_srcDIP2DOP_rev;
		::Uml::AssociationRole DiscrepancyPort::meta_dstDIP2DOP, DiscrepancyPort::meta_dstDIP2DOP_rev;
		::Uml::AssociationRole FailureMode::meta_dstFM2DOP, FailureMode::meta_dstFM2DOP_rev;
		::Uml::AssociationRole FailureMode::meta_dstFM2D, FailureMode::meta_dstFM2D_rev;
		::Uml::AssociationRole FailureMode::meta_referedbyFailureModeRef;
		::Uml::AssociationRole DIP2D::meta_dstDIP2D_end_;
		::Uml::AssociationRole DIP2D::meta_srcDIP2D_end_;
		::Uml::AssociationRole Discrepancy::meta_srcFM2D, Discrepancy::meta_srcFM2D_rev;
		::Uml::AssociationRole Discrepancy::meta_dstD2Test, Discrepancy::meta_dstD2Test_rev;
		::Uml::AssociationRole Discrepancy::meta_dstD2DOP, Discrepancy::meta_dstD2DOP_rev;
		::Uml::AssociationRole Discrepancy::meta_dstFailureProp, Discrepancy::meta_dstFailureProp_rev;
		::Uml::AssociationRole Discrepancy::meta_srcFailureProp, Discrepancy::meta_srcFailureProp_rev;
		::Uml::AssociationRole Discrepancy::meta_srcDOP2D, Discrepancy::meta_srcDOP2D_rev;
		::Uml::AssociationRole Discrepancy::meta_srcDIP2D, Discrepancy::meta_srcDIP2D_rev;
		::Uml::AssociationRole FM2D::meta_srcFM2D_end_;
		::Uml::AssociationRole FM2D::meta_dstFM2D_end_;
		::Uml::AssociationRole DiscrepancyOutPort::meta_srcFM2DOP, DiscrepancyOutPort::meta_srcFM2DOP_rev;
		::Uml::AssociationRole DiscrepancyOutPort::meta_srcD2DOP, DiscrepancyOutPort::meta_srcD2DOP_rev;
		::Uml::AssociationRole DiscrepancyOutPort::meta_dstDOP2D, DiscrepancyOutPort::meta_dstDOP2D_rev;
		::Uml::AssociationRole DiscrepancyOutPort::meta_dstDOP2T, DiscrepancyOutPort::meta_dstDOP2T_rev;
		::Uml::AssociationRole SignalflowConn::meta_dstSignalflowConn_end_;
		::Uml::AssociationRole SignalflowConn::meta_srcSignalflowConn_end_;
		::Uml::AssociationRole DOP2T::meta_srcDOP2T_end_;
		::Uml::AssociationRole DOP2T::meta_dstDOP2T_end_;
		::Uml::AssociationRole Surface::meta_srcDevice2Surface, Surface::meta_srcDevice2Surface_rev;
		::Uml::AssociationRole Ctrl2Device::meta_dstCtrl2Device_end_;
		::Uml::AssociationRole Ctrl2Device::meta_srcCtrl2Device_end_;
		::Uml::AssociationRole Test::meta_referedbyBitTestRef;
		::Uml::AssociationRole Test::meta_referedbyTestRef;
		::Uml::AssociationRole Test::meta_referedbyTestInstance;
		::Uml::AssociationRole D2Test::meta_srcD2Test_end_;
		::Uml::AssociationRole D2Test::meta_dstD2Test_end_;
		::Uml::AssociationRole Control::meta_dstCtrl2Device, Control::meta_dstCtrl2Device_rev;
		::Uml::AssociationRole FailureModeRef::meta_ref;
		::Uml::AssociationRole DOP2D::meta_dstDOP2D_end_;
		::Uml::AssociationRole DOP2D::meta_srcDOP2D_end_;
		::Uml::AssociationRole D2DOP::meta_srcD2DOP_end_;
		::Uml::AssociationRole D2DOP::meta_dstD2DOP_end_;
		::Uml::AssociationRole DiscrepancyInPort::meta_dstDIP2D, DiscrepancyInPort::meta_dstDIP2D_rev;
		::Uml::AssociationRole DataPort::meta_srcSignalflowConn, DataPort::meta_srcSignalflowConn_rev;
		::Uml::AssociationRole DataPort::meta_dstSignalflowConn, DataPort::meta_dstSignalflowConn_rev;
		::Uml::AssociationRole DataPort::meta_srcSig2Dataport, DataPort::meta_srcSig2Dataport_rev;
		::Uml::AssociationRole FailureProp::meta_srcFailureProp_end_;
		::Uml::AssociationRole FailureProp::meta_dstFailureProp_end_;
		::Uml::AssociationRole DIP2DOP::meta_dstDIP2DOP_end_;
		::Uml::AssociationRole DIP2DOP::meta_srcDIP2DOP_end_;
		::Uml::AssociationRole TestInstance::meta_srcD2Test, TestInstance::meta_srcD2Test_rev;
		::Uml::AssociationRole TestInstance::meta_srcDOP2T, TestInstance::meta_srcDOP2T_rev;
		::Uml::AssociationRole TestInstance::meta_ref;
		::Uml::AssociationRole Signal::meta_dstSig2Dataport, Signal::meta_dstSig2Dataport_rev;
		::Uml::AssociationRole TestRef::meta_ref;
		::Uml::CompositionParentRole TestModels::meta_RootFolder_parent;
		::Uml::CompositionParentRole PlatformModels::meta_RootFolder_parent;
		::Uml::CompositionParentRole UnitModels::meta_RootFolder_parent;
		::Uml::CompositionParentRole Sig2Dataport::meta_Device_parent;
		::Uml::CompositionParentRole Device2Surface::meta_Assembly_parent;
		::Uml::CompositionParentRole Assembly::meta_Assembly_parent;
		::Uml::CompositionParentRole SignalflowConn::meta_Platform_parent;
		::Uml::CompositionParentRole Ctrl2Device::meta_Assembly_parent;
		::Uml::CompositionParentRole FaultModelElementPort::meta_Assembly_parent;
		::Uml::CompositionParentRole FaultModelElementPort::meta_Unit_parent;
		::Uml::CompositionParentRole Test::meta_TestContainer_parent;
		::Uml::CompositionParentRole TestContainer::meta_TestModels_parent;
		::Uml::CompositionParentRole TestGroup::meta_TestModels_parent;
		::Uml::CompositionParentRole FaultModelElement::meta_Assembly_parent;
		::Uml::CompositionParentRole FaultModelElement::meta_Unit_parent;
		::Uml::CompositionParentRole FailureModeRef::meta_Test_parent;
		::Uml::CompositionParentRole Platform::meta_PlatformModels_parent;
		::Uml::CompositionParentRole Entity::meta_Platform_parent;
		::Uml::CompositionParentRole Unit::meta_UnitModels_parent;
		::Uml::CompositionParentRole Unit::meta_Assembly_parent;
		::Uml::CompositionParentRole DataPort::meta_Device_parent;
		::Uml::CompositionParentRole DataPort::meta_Assembly_parent;
		::Uml::CompositionParentRole DIP2DOP::meta_Platform_parent;
		::Uml::CompositionParentRole Signal::meta_Device_parent;
		::Uml::CompositionParentRole TestRef::meta_TestGroup_parent;
		::Uml::CompositionChildRole TestModels::meta_TestGroup_children;
		::Uml::CompositionChildRole TestModels::meta_TestContainer_children;
		::Uml::CompositionChildRole PlatformModels::meta_Platform_children;
		::Uml::CompositionChildRole UnitModels::meta_Unit_children;
		::Uml::CompositionChildRole Device::meta_Sig2Dataport_children;
		::Uml::CompositionChildRole Device::meta_Signal_children;
		::Uml::CompositionChildRole Device::meta_DataPort_children;
		::Uml::CompositionChildRole Assembly::meta_DataPort_children;
		::Uml::CompositionChildRole Assembly::meta_Device2Surface_children;
		::Uml::CompositionChildRole Assembly::meta_Ctrl2Device_children;
		::Uml::CompositionChildRole Assembly::meta_Assembly_children;
		::Uml::CompositionChildRole Assembly::meta_Unit_children;
		::Uml::CompositionChildRole Assembly::meta_FaultModelElementPort_children;
		::Uml::CompositionChildRole Assembly::meta_FaultModelElement_children;
		::Uml::CompositionChildRole Test::meta_FailureModeRef_children;
		::Uml::CompositionChildRole TestContainer::meta_Test_children;
		::Uml::CompositionChildRole TestGroup::meta_TestRef_children;
		::Uml::CompositionChildRole Platform::meta_SignalflowConn_children;
		::Uml::CompositionChildRole Platform::meta_DIP2DOP_children;
		::Uml::CompositionChildRole Platform::meta_Entity_children;
		::Uml::CompositionChildRole Unit::meta_FaultModelElement_children;
		::Uml::CompositionChildRole Unit::meta_FaultModelElementPort_children;
		void Creates()
		{
			TestModels::meta = ::Uml::Class::Create(meta);
			PlatformModels::meta = ::Uml::Class::Create(meta);
			UnitModels::meta = ::Uml::Class::Create(meta);
			FM2DOP::meta = ::Uml::Class::Create(meta);
			Device::meta = ::Uml::Class::Create(meta);
			Sig2Dataport::meta = ::Uml::Class::Create(meta);
			Device2Surface::meta = ::Uml::Class::Create(meta);
			DiscrepancyPort::meta = ::Uml::Class::Create(meta);
			FailureMode::meta = ::Uml::Class::Create(meta);
			Assembly::meta = ::Uml::Class::Create(meta);
			DIP2D::meta = ::Uml::Class::Create(meta);
			Discrepancy::meta = ::Uml::Class::Create(meta);
			FM2D::meta = ::Uml::Class::Create(meta);
			DiscrepancyOutPort::meta = ::Uml::Class::Create(meta);
			SignalflowConn::meta = ::Uml::Class::Create(meta);
			DOP2T::meta = ::Uml::Class::Create(meta);
			Surface::meta = ::Uml::Class::Create(meta);
			DataOut::meta = ::Uml::Class::Create(meta);
			Ctrl2Device::meta = ::Uml::Class::Create(meta);
			FaultModelElementPort::meta = ::Uml::Class::Create(meta);
			DataIn::meta = ::Uml::Class::Create(meta);
			Test::meta = ::Uml::Class::Create(meta);
			TestContainer::meta = ::Uml::Class::Create(meta);
			TestGroup::meta = ::Uml::Class::Create(meta);
			D2Test::meta = ::Uml::Class::Create(meta);
			Control::meta = ::Uml::Class::Create(meta);
			FaultModelElement::meta = ::Uml::Class::Create(meta);
			FailureModeRef::meta = ::Uml::Class::Create(meta);
			Platform::meta = ::Uml::Class::Create(meta);
			DOP2D::meta = ::Uml::Class::Create(meta);
			D2DOP::meta = ::Uml::Class::Create(meta);
			Entity::meta = ::Uml::Class::Create(meta);
			Unit::meta = ::Uml::Class::Create(meta);
			DiscrepancyInPort::meta = ::Uml::Class::Create(meta);
			DataPort::meta = ::Uml::Class::Create(meta);
			FailureProp::meta = ::Uml::Class::Create(meta);
			DIP2DOP::meta = ::Uml::Class::Create(meta);
			TestInstance::meta = ::Uml::Class::Create(meta);
			Signal::meta = ::Uml::Class::Create(meta);
			TestRef::meta = ::Uml::Class::Create(meta);
			TestModels::meta_name = ::Uml::Attribute::Create(TestModels::meta);
			PlatformModels::meta_name = ::Uml::Attribute::Create(PlatformModels::meta);
			UnitModels::meta_name = ::Uml::Attribute::Create(UnitModels::meta);
			Discrepancy::meta_DiscrepancyType = ::Uml::Attribute::Create(Discrepancy::meta);
		}
		void InitClassesAttributes()
		{
			TestModels::meta.name() = "TestModels";
			TestModels::meta.isAbstract() = false;
			TestModels::meta.stereotype() = "Folder";
			PlatformModels::meta.name() = "PlatformModels";
			PlatformModels::meta.isAbstract() = false;
			PlatformModels::meta.stereotype() = "Folder";
			UnitModels::meta.name() = "UnitModels";
			UnitModels::meta.isAbstract() = false;
			UnitModels::meta.stereotype() = "Folder";
			FM2DOP::meta.name() = "FM2DOP";
			FM2DOP::meta.isAbstract() = false;
			FM2DOP::meta.stereotype() = "Connection";
			Device::meta.name() = "Device";
			Device::meta.isAbstract() = false;
			Device::meta.stereotype() = "Model";
			Sig2Dataport::meta.name() = "Sig2Dataport";
			Sig2Dataport::meta.isAbstract() = false;
			Sig2Dataport::meta.stereotype() = "Connection";
			Device2Surface::meta.name() = "Device2Surface";
			Device2Surface::meta.isAbstract() = false;
			Device2Surface::meta.stereotype() = "Connection";
			DiscrepancyPort::meta.name() = "DiscrepancyPort";
			DiscrepancyPort::meta.isAbstract() = true;
			DiscrepancyPort::meta.stereotype() = "FCO";
			FailureMode::meta.name() = "FailureMode";
			FailureMode::meta.isAbstract() = false;
			FailureMode::meta.stereotype() = "Atom";
			Assembly::meta.name() = "Assembly";
			Assembly::meta.isAbstract() = false;
			Assembly::meta.stereotype() = "Model";
			DIP2D::meta.name() = "DIP2D";
			DIP2D::meta.isAbstract() = false;
			DIP2D::meta.stereotype() = "Connection";
			Discrepancy::meta.name() = "Discrepancy";
			Discrepancy::meta.isAbstract() = false;
			Discrepancy::meta.stereotype() = "Atom";
			FM2D::meta.name() = "FM2D";
			FM2D::meta.isAbstract() = false;
			FM2D::meta.stereotype() = "Connection";
			DiscrepancyOutPort::meta.name() = "DiscrepancyOutPort";
			DiscrepancyOutPort::meta.isAbstract() = false;
			DiscrepancyOutPort::meta.stereotype() = "Atom";
			SignalflowConn::meta.name() = "SignalflowConn";
			SignalflowConn::meta.isAbstract() = false;
			SignalflowConn::meta.stereotype() = "Connection";
			DOP2T::meta.name() = "DOP2T";
			DOP2T::meta.isAbstract() = false;
			DOP2T::meta.stereotype() = "Connection";
			Surface::meta.name() = "Surface";
			Surface::meta.isAbstract() = false;
			Surface::meta.stereotype() = "Model";
			DataOut::meta.name() = "DataOut";
			DataOut::meta.isAbstract() = false;
			DataOut::meta.stereotype() = "Atom";
			Ctrl2Device::meta.name() = "Ctrl2Device";
			Ctrl2Device::meta.isAbstract() = false;
			Ctrl2Device::meta.stereotype() = "Connection";
			FaultModelElementPort::meta.name() = "FaultModelElementPort";
			FaultModelElementPort::meta.isAbstract() = true;
			FaultModelElementPort::meta.stereotype() = "FCO";
			DataIn::meta.name() = "DataIn";
			DataIn::meta.isAbstract() = false;
			DataIn::meta.stereotype() = "Atom";
			Test::meta.name() = "Test";
			Test::meta.isAbstract() = false;
			Test::meta.stereotype() = "Model";
			TestContainer::meta.name() = "TestContainer";
			TestContainer::meta.isAbstract() = false;
			TestContainer::meta.stereotype() = "Model";
			TestGroup::meta.name() = "TestGroup";
			TestGroup::meta.isAbstract() = false;
			TestGroup::meta.stereotype() = "Model";
			D2Test::meta.name() = "D2Test";
			D2Test::meta.isAbstract() = false;
			D2Test::meta.stereotype() = "Connection";
			Control::meta.name() = "Control";
			Control::meta.isAbstract() = false;
			Control::meta.stereotype() = "Model";
			FaultModelElement::meta.name() = "FaultModelElement";
			FaultModelElement::meta.isAbstract() = true;
			FaultModelElement::meta.stereotype() = "FCO";
			FailureModeRef::meta.name() = "FailureModeRef";
			FailureModeRef::meta.isAbstract() = false;
			FailureModeRef::meta.stereotype() = "Reference";
			Platform::meta.name() = "Platform";
			Platform::meta.isAbstract() = false;
			Platform::meta.stereotype() = "Model";
			DOP2D::meta.name() = "DOP2D";
			DOP2D::meta.isAbstract() = false;
			DOP2D::meta.stereotype() = "Connection";
			D2DOP::meta.name() = "D2DOP";
			D2DOP::meta.isAbstract() = false;
			D2DOP::meta.stereotype() = "Connection";
			Entity::meta.name() = "Entity";
			Entity::meta.isAbstract() = true;
			Entity::meta.stereotype() = "FCO";
			Unit::meta.name() = "Unit";
			Unit::meta.isAbstract() = true;
			Unit::meta.stereotype() = "Model";
			DiscrepancyInPort::meta.name() = "DiscrepancyInPort";
			DiscrepancyInPort::meta.isAbstract() = false;
			DiscrepancyInPort::meta.stereotype() = "Atom";
			DataPort::meta.name() = "DataPort";
			DataPort::meta.isAbstract() = true;
			DataPort::meta.stereotype() = "Atom";
			FailureProp::meta.name() = "FailureProp";
			FailureProp::meta.isAbstract() = false;
			FailureProp::meta.stereotype() = "Connection";
			DIP2DOP::meta.name() = "DIP2DOP";
			DIP2DOP::meta.isAbstract() = false;
			DIP2DOP::meta.stereotype() = "Connection";
			TestInstance::meta.name() = "TestInstance";
			TestInstance::meta.isAbstract() = false;
			TestInstance::meta.stereotype() = "Reference";
			Signal::meta.name() = "Signal";
			Signal::meta.isAbstract() = false;
			Signal::meta.stereotype() = "Model";
			TestRef::meta.name() = "TestRef";
			TestRef::meta.isAbstract() = false;
			TestRef::meta.stereotype() = "Reference";
			
			TestModels::meta_name.name() = "name";
			TestModels::meta_name.type() = "String";
			TestModels::meta_name.min() = 0;
			TestModels::meta_name.max() = 1;
			TestModels::meta_name.nonpersistent() = false;
			TestModels::meta_name.registry() = false;
			TestModels::meta_name.ordered() = false;
			TestModels::meta_name.visibility() = "public";
			TestModels::meta_name.defvalue() = vector<string>();
			PlatformModels::meta_name.name() = "name";
			PlatformModels::meta_name.type() = "String";
			PlatformModels::meta_name.min() = 0;
			PlatformModels::meta_name.max() = 1;
			PlatformModels::meta_name.nonpersistent() = false;
			PlatformModels::meta_name.registry() = false;
			PlatformModels::meta_name.ordered() = false;
			PlatformModels::meta_name.visibility() = "public";
			PlatformModels::meta_name.defvalue() = vector<string>();
			UnitModels::meta_name.name() = "name";
			UnitModels::meta_name.type() = "String";
			UnitModels::meta_name.min() = 0;
			UnitModels::meta_name.max() = 1;
			UnitModels::meta_name.nonpersistent() = false;
			UnitModels::meta_name.registry() = false;
			UnitModels::meta_name.ordered() = false;
			UnitModels::meta_name.visibility() = "public";
			UnitModels::meta_name.defvalue() = vector<string>();
			Discrepancy::meta_DiscrepancyType.name() = "DiscrepancyType";
			Discrepancy::meta_DiscrepancyType.type() = "String";
			Discrepancy::meta_DiscrepancyType.min() = 1;
			Discrepancy::meta_DiscrepancyType.max() = 1;
			Discrepancy::meta_DiscrepancyType.nonpersistent() = false;
			Discrepancy::meta_DiscrepancyType.registry() = false;
			Discrepancy::meta_DiscrepancyType.ordered() = false;
			Discrepancy::meta_DiscrepancyType.visibility() = "public";
			Discrepancy::meta_DiscrepancyType.defvalue() = vector<string>();
			
		}
		void CreatesNamespaces()
		{
		}
		void InitNamespaces()
		{
		}
		void InitAssociation0()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			ass.name() = "Ctrl2Device";
			ass.assocClass() = ::FCSL::FM::Ctrl2Device::meta;
			::FCSL::FM::Device::meta_srcCtrl2Device = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::Device::meta_srcCtrl2Device.name() = "srcCtrl2Device";
			::FCSL::FM::Device::meta_srcCtrl2Device.min() = 0;
			::FCSL::FM::Device::meta_srcCtrl2Device.max() = -1;
			::FCSL::FM::Device::meta_srcCtrl2Device.isNavigable() = true;
			::FCSL::FM::Device::meta_srcCtrl2Device.isPrimary() = false;
			::FCSL::FM::Device::meta_srcCtrl2Device.target() = ::FCSL::FM::Control::meta;
			::FCSL::FM::Ctrl2Device::meta_srcCtrl2Device_end_ = ::FCSL::FM::Control::meta_dstCtrl2Device_rev = ::FCSL::FM::Device::meta_srcCtrl2Device;
			::FCSL::FM::Control::meta_dstCtrl2Device = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::Control::meta_dstCtrl2Device.name() = "dstCtrl2Device";
			::FCSL::FM::Control::meta_dstCtrl2Device.min() = 0;
			::FCSL::FM::Control::meta_dstCtrl2Device.max() = -1;
			::FCSL::FM::Control::meta_dstCtrl2Device.isNavigable() = true;
			::FCSL::FM::Control::meta_dstCtrl2Device.isPrimary() = false;
			::FCSL::FM::Control::meta_dstCtrl2Device.target() = ::FCSL::FM::Device::meta;
			::FCSL::FM::Ctrl2Device::meta_dstCtrl2Device_end_ = ::FCSL::FM::Device::meta_srcCtrl2Device_rev = ::FCSL::FM::Control::meta_dstCtrl2Device;
		};
		void InitAssociation1()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			ass.name() = "Device2Surface";
			ass.assocClass() = ::FCSL::FM::Device2Surface::meta;
			::FCSL::FM::Device::meta_dstDevice2Surface = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::Device::meta_dstDevice2Surface.name() = "dstDevice2Surface";
			::FCSL::FM::Device::meta_dstDevice2Surface.min() = 0;
			::FCSL::FM::Device::meta_dstDevice2Surface.max() = -1;
			::FCSL::FM::Device::meta_dstDevice2Surface.isNavigable() = true;
			::FCSL::FM::Device::meta_dstDevice2Surface.isPrimary() = false;
			::FCSL::FM::Device::meta_dstDevice2Surface.target() = ::FCSL::FM::Surface::meta;
			::FCSL::FM::Device2Surface::meta_dstDevice2Surface_end_ = ::FCSL::FM::Surface::meta_srcDevice2Surface_rev = ::FCSL::FM::Device::meta_dstDevice2Surface;
			::FCSL::FM::Surface::meta_srcDevice2Surface = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::Surface::meta_srcDevice2Surface.name() = "srcDevice2Surface";
			::FCSL::FM::Surface::meta_srcDevice2Surface.min() = 0;
			::FCSL::FM::Surface::meta_srcDevice2Surface.max() = -1;
			::FCSL::FM::Surface::meta_srcDevice2Surface.isNavigable() = true;
			::FCSL::FM::Surface::meta_srcDevice2Surface.isPrimary() = false;
			::FCSL::FM::Surface::meta_srcDevice2Surface.target() = ::FCSL::FM::Device::meta;
			::FCSL::FM::Device2Surface::meta_srcDevice2Surface_end_ = ::FCSL::FM::Device::meta_dstDevice2Surface_rev = ::FCSL::FM::Surface::meta_srcDevice2Surface;
		};
		void InitAssociation2()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			ass.name() = "DIP2DOP";
			ass.assocClass() = ::FCSL::FM::DIP2DOP::meta;
			::FCSL::FM::DiscrepancyPort::meta_srcDIP2DOP = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::DiscrepancyPort::meta_srcDIP2DOP.name() = "srcDIP2DOP";
			::FCSL::FM::DiscrepancyPort::meta_srcDIP2DOP.min() = 0;
			::FCSL::FM::DiscrepancyPort::meta_srcDIP2DOP.max() = -1;
			::FCSL::FM::DiscrepancyPort::meta_srcDIP2DOP.isNavigable() = true;
			::FCSL::FM::DiscrepancyPort::meta_srcDIP2DOP.isPrimary() = false;
			::FCSL::FM::DiscrepancyPort::meta_srcDIP2DOP.target() = ::FCSL::FM::DiscrepancyPort::meta;
			::FCSL::FM::DIP2DOP::meta_srcDIP2DOP_end_ = ::FCSL::FM::DiscrepancyPort::meta_dstDIP2DOP_rev = ::FCSL::FM::DiscrepancyPort::meta_srcDIP2DOP;
			::FCSL::FM::DiscrepancyPort::meta_dstDIP2DOP = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::DiscrepancyPort::meta_dstDIP2DOP.name() = "dstDIP2DOP";
			::FCSL::FM::DiscrepancyPort::meta_dstDIP2DOP.min() = 0;
			::FCSL::FM::DiscrepancyPort::meta_dstDIP2DOP.max() = -1;
			::FCSL::FM::DiscrepancyPort::meta_dstDIP2DOP.isNavigable() = true;
			::FCSL::FM::DiscrepancyPort::meta_dstDIP2DOP.isPrimary() = false;
			::FCSL::FM::DiscrepancyPort::meta_dstDIP2DOP.target() = ::FCSL::FM::DiscrepancyPort::meta;
			::FCSL::FM::DIP2DOP::meta_dstDIP2DOP_end_ = ::FCSL::FM::DiscrepancyPort::meta_srcDIP2DOP_rev = ::FCSL::FM::DiscrepancyPort::meta_dstDIP2DOP;
		};
		void InitAssociation3()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			ass.name() = "FM2DOP";
			ass.assocClass() = ::FCSL::FM::FM2DOP::meta;
			::FCSL::FM::FailureMode::meta_dstFM2DOP = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::FailureMode::meta_dstFM2DOP.name() = "dstFM2DOP";
			::FCSL::FM::FailureMode::meta_dstFM2DOP.min() = 0;
			::FCSL::FM::FailureMode::meta_dstFM2DOP.max() = -1;
			::FCSL::FM::FailureMode::meta_dstFM2DOP.isNavigable() = true;
			::FCSL::FM::FailureMode::meta_dstFM2DOP.isPrimary() = false;
			::FCSL::FM::FailureMode::meta_dstFM2DOP.target() = ::FCSL::FM::DiscrepancyOutPort::meta;
			::FCSL::FM::FM2DOP::meta_dstFM2DOP_end_ = ::FCSL::FM::DiscrepancyOutPort::meta_srcFM2DOP_rev = ::FCSL::FM::FailureMode::meta_dstFM2DOP;
			::FCSL::FM::DiscrepancyOutPort::meta_srcFM2DOP = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::DiscrepancyOutPort::meta_srcFM2DOP.name() = "srcFM2DOP";
			::FCSL::FM::DiscrepancyOutPort::meta_srcFM2DOP.min() = 0;
			::FCSL::FM::DiscrepancyOutPort::meta_srcFM2DOP.max() = -1;
			::FCSL::FM::DiscrepancyOutPort::meta_srcFM2DOP.isNavigable() = true;
			::FCSL::FM::DiscrepancyOutPort::meta_srcFM2DOP.isPrimary() = false;
			::FCSL::FM::DiscrepancyOutPort::meta_srcFM2DOP.target() = ::FCSL::FM::FailureMode::meta;
			::FCSL::FM::FM2DOP::meta_srcFM2DOP_end_ = ::FCSL::FM::FailureMode::meta_dstFM2DOP_rev = ::FCSL::FM::DiscrepancyOutPort::meta_srcFM2DOP;
		};
		void InitAssociation4()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			ass.name() = "FM2D";
			ass.assocClass() = ::FCSL::FM::FM2D::meta;
			::FCSL::FM::FailureMode::meta_dstFM2D = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::FailureMode::meta_dstFM2D.name() = "dstFM2D";
			::FCSL::FM::FailureMode::meta_dstFM2D.min() = 0;
			::FCSL::FM::FailureMode::meta_dstFM2D.max() = -1;
			::FCSL::FM::FailureMode::meta_dstFM2D.isNavigable() = true;
			::FCSL::FM::FailureMode::meta_dstFM2D.isPrimary() = false;
			::FCSL::FM::FailureMode::meta_dstFM2D.target() = ::FCSL::FM::Discrepancy::meta;
			::FCSL::FM::FM2D::meta_dstFM2D_end_ = ::FCSL::FM::Discrepancy::meta_srcFM2D_rev = ::FCSL::FM::FailureMode::meta_dstFM2D;
			::FCSL::FM::Discrepancy::meta_srcFM2D = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::Discrepancy::meta_srcFM2D.name() = "srcFM2D";
			::FCSL::FM::Discrepancy::meta_srcFM2D.min() = 0;
			::FCSL::FM::Discrepancy::meta_srcFM2D.max() = -1;
			::FCSL::FM::Discrepancy::meta_srcFM2D.isNavigable() = true;
			::FCSL::FM::Discrepancy::meta_srcFM2D.isPrimary() = false;
			::FCSL::FM::Discrepancy::meta_srcFM2D.target() = ::FCSL::FM::FailureMode::meta;
			::FCSL::FM::FM2D::meta_srcFM2D_end_ = ::FCSL::FM::FailureMode::meta_dstFM2D_rev = ::FCSL::FM::Discrepancy::meta_srcFM2D;
		};
		void InitAssociation5()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			::FCSL::FM::FailureMode::meta_referedbyFailureModeRef = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::FailureMode::meta_referedbyFailureModeRef.name() = "referedbyFailureModeRef";
			::FCSL::FM::FailureMode::meta_referedbyFailureModeRef.min() = 0;
			::FCSL::FM::FailureMode::meta_referedbyFailureModeRef.max() = -1;
			::FCSL::FM::FailureMode::meta_referedbyFailureModeRef.isNavigable() = true;
			::FCSL::FM::FailureMode::meta_referedbyFailureModeRef.isPrimary() = false;
			::FCSL::FM::FailureMode::meta_referedbyFailureModeRef.target() = ::FCSL::FM::FailureModeRef::meta;
			::FCSL::FM::FailureModeRef::meta_ref = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::FailureModeRef::meta_ref.name() = "ref";
			::FCSL::FM::FailureModeRef::meta_ref.min() = 0;
			::FCSL::FM::FailureModeRef::meta_ref.max() = 1;
			::FCSL::FM::FailureModeRef::meta_ref.isNavigable() = true;
			::FCSL::FM::FailureModeRef::meta_ref.isPrimary() = false;
			::FCSL::FM::FailureModeRef::meta_ref.target() = ::FCSL::FM::FailureMode::meta;
		};
		void InitAssociation6()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			ass.name() = "D2Test";
			ass.assocClass() = ::FCSL::FM::D2Test::meta;
			::FCSL::FM::Discrepancy::meta_dstD2Test = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::Discrepancy::meta_dstD2Test.name() = "dstD2Test";
			::FCSL::FM::Discrepancy::meta_dstD2Test.min() = 0;
			::FCSL::FM::Discrepancy::meta_dstD2Test.max() = -1;
			::FCSL::FM::Discrepancy::meta_dstD2Test.isNavigable() = true;
			::FCSL::FM::Discrepancy::meta_dstD2Test.isPrimary() = false;
			::FCSL::FM::Discrepancy::meta_dstD2Test.target() = ::FCSL::FM::TestInstance::meta;
			::FCSL::FM::D2Test::meta_dstD2Test_end_ = ::FCSL::FM::TestInstance::meta_srcD2Test_rev = ::FCSL::FM::Discrepancy::meta_dstD2Test;
			::FCSL::FM::TestInstance::meta_srcD2Test = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::TestInstance::meta_srcD2Test.name() = "srcD2Test";
			::FCSL::FM::TestInstance::meta_srcD2Test.min() = 0;
			::FCSL::FM::TestInstance::meta_srcD2Test.max() = -1;
			::FCSL::FM::TestInstance::meta_srcD2Test.isNavigable() = true;
			::FCSL::FM::TestInstance::meta_srcD2Test.isPrimary() = false;
			::FCSL::FM::TestInstance::meta_srcD2Test.target() = ::FCSL::FM::Discrepancy::meta;
			::FCSL::FM::D2Test::meta_srcD2Test_end_ = ::FCSL::FM::Discrepancy::meta_dstD2Test_rev = ::FCSL::FM::TestInstance::meta_srcD2Test;
		};
		void InitAssociation7()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			ass.name() = "D2DOP";
			ass.assocClass() = ::FCSL::FM::D2DOP::meta;
			::FCSL::FM::Discrepancy::meta_dstD2DOP = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::Discrepancy::meta_dstD2DOP.name() = "dstD2DOP";
			::FCSL::FM::Discrepancy::meta_dstD2DOP.min() = 0;
			::FCSL::FM::Discrepancy::meta_dstD2DOP.max() = -1;
			::FCSL::FM::Discrepancy::meta_dstD2DOP.isNavigable() = true;
			::FCSL::FM::Discrepancy::meta_dstD2DOP.isPrimary() = false;
			::FCSL::FM::Discrepancy::meta_dstD2DOP.target() = ::FCSL::FM::DiscrepancyOutPort::meta;
			::FCSL::FM::D2DOP::meta_dstD2DOP_end_ = ::FCSL::FM::DiscrepancyOutPort::meta_srcD2DOP_rev = ::FCSL::FM::Discrepancy::meta_dstD2DOP;
			::FCSL::FM::DiscrepancyOutPort::meta_srcD2DOP = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::DiscrepancyOutPort::meta_srcD2DOP.name() = "srcD2DOP";
			::FCSL::FM::DiscrepancyOutPort::meta_srcD2DOP.min() = 0;
			::FCSL::FM::DiscrepancyOutPort::meta_srcD2DOP.max() = -1;
			::FCSL::FM::DiscrepancyOutPort::meta_srcD2DOP.isNavigable() = true;
			::FCSL::FM::DiscrepancyOutPort::meta_srcD2DOP.isPrimary() = false;
			::FCSL::FM::DiscrepancyOutPort::meta_srcD2DOP.target() = ::FCSL::FM::Discrepancy::meta;
			::FCSL::FM::D2DOP::meta_srcD2DOP_end_ = ::FCSL::FM::Discrepancy::meta_dstD2DOP_rev = ::FCSL::FM::DiscrepancyOutPort::meta_srcD2DOP;
		};
		void InitAssociation8()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			ass.name() = "FailureProp";
			ass.assocClass() = ::FCSL::FM::FailureProp::meta;
			::FCSL::FM::Discrepancy::meta_dstFailureProp = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::Discrepancy::meta_dstFailureProp.name() = "dstFailureProp";
			::FCSL::FM::Discrepancy::meta_dstFailureProp.min() = 0;
			::FCSL::FM::Discrepancy::meta_dstFailureProp.max() = -1;
			::FCSL::FM::Discrepancy::meta_dstFailureProp.isNavigable() = true;
			::FCSL::FM::Discrepancy::meta_dstFailureProp.isPrimary() = false;
			::FCSL::FM::Discrepancy::meta_dstFailureProp.target() = ::FCSL::FM::Discrepancy::meta;
			::FCSL::FM::FailureProp::meta_dstFailureProp_end_ = ::FCSL::FM::Discrepancy::meta_srcFailureProp_rev = ::FCSL::FM::Discrepancy::meta_dstFailureProp;
			::FCSL::FM::Discrepancy::meta_srcFailureProp = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::Discrepancy::meta_srcFailureProp.name() = "srcFailureProp";
			::FCSL::FM::Discrepancy::meta_srcFailureProp.min() = 0;
			::FCSL::FM::Discrepancy::meta_srcFailureProp.max() = -1;
			::FCSL::FM::Discrepancy::meta_srcFailureProp.isNavigable() = true;
			::FCSL::FM::Discrepancy::meta_srcFailureProp.isPrimary() = false;
			::FCSL::FM::Discrepancy::meta_srcFailureProp.target() = ::FCSL::FM::Discrepancy::meta;
			::FCSL::FM::FailureProp::meta_srcFailureProp_end_ = ::FCSL::FM::Discrepancy::meta_dstFailureProp_rev = ::FCSL::FM::Discrepancy::meta_srcFailureProp;
		};
		void InitAssociation9()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			ass.name() = "DOP2D";
			ass.assocClass() = ::FCSL::FM::DOP2D::meta;
			::FCSL::FM::Discrepancy::meta_srcDOP2D = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::Discrepancy::meta_srcDOP2D.name() = "srcDOP2D";
			::FCSL::FM::Discrepancy::meta_srcDOP2D.min() = 0;
			::FCSL::FM::Discrepancy::meta_srcDOP2D.max() = -1;
			::FCSL::FM::Discrepancy::meta_srcDOP2D.isNavigable() = true;
			::FCSL::FM::Discrepancy::meta_srcDOP2D.isPrimary() = false;
			::FCSL::FM::Discrepancy::meta_srcDOP2D.target() = ::FCSL::FM::DiscrepancyOutPort::meta;
			::FCSL::FM::DOP2D::meta_srcDOP2D_end_ = ::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2D_rev = ::FCSL::FM::Discrepancy::meta_srcDOP2D;
			::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2D = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2D.name() = "dstDOP2D";
			::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2D.min() = 0;
			::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2D.max() = -1;
			::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2D.isNavigable() = true;
			::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2D.isPrimary() = false;
			::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2D.target() = ::FCSL::FM::Discrepancy::meta;
			::FCSL::FM::DOP2D::meta_dstDOP2D_end_ = ::FCSL::FM::Discrepancy::meta_srcDOP2D_rev = ::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2D;
		};
		void InitAssociation10()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			ass.name() = "DIP2D";
			ass.assocClass() = ::FCSL::FM::DIP2D::meta;
			::FCSL::FM::Discrepancy::meta_srcDIP2D = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::Discrepancy::meta_srcDIP2D.name() = "srcDIP2D";
			::FCSL::FM::Discrepancy::meta_srcDIP2D.min() = 0;
			::FCSL::FM::Discrepancy::meta_srcDIP2D.max() = -1;
			::FCSL::FM::Discrepancy::meta_srcDIP2D.isNavigable() = true;
			::FCSL::FM::Discrepancy::meta_srcDIP2D.isPrimary() = false;
			::FCSL::FM::Discrepancy::meta_srcDIP2D.target() = ::FCSL::FM::DiscrepancyInPort::meta;
			::FCSL::FM::DIP2D::meta_srcDIP2D_end_ = ::FCSL::FM::DiscrepancyInPort::meta_dstDIP2D_rev = ::FCSL::FM::Discrepancy::meta_srcDIP2D;
			::FCSL::FM::DiscrepancyInPort::meta_dstDIP2D = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::DiscrepancyInPort::meta_dstDIP2D.name() = "dstDIP2D";
			::FCSL::FM::DiscrepancyInPort::meta_dstDIP2D.min() = 0;
			::FCSL::FM::DiscrepancyInPort::meta_dstDIP2D.max() = -1;
			::FCSL::FM::DiscrepancyInPort::meta_dstDIP2D.isNavigable() = true;
			::FCSL::FM::DiscrepancyInPort::meta_dstDIP2D.isPrimary() = false;
			::FCSL::FM::DiscrepancyInPort::meta_dstDIP2D.target() = ::FCSL::FM::Discrepancy::meta;
			::FCSL::FM::DIP2D::meta_dstDIP2D_end_ = ::FCSL::FM::Discrepancy::meta_srcDIP2D_rev = ::FCSL::FM::DiscrepancyInPort::meta_dstDIP2D;
		};
		void InitAssociation11()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			ass.name() = "DOP2T";
			ass.assocClass() = ::FCSL::FM::DOP2T::meta;
			::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2T = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2T.name() = "dstDOP2T";
			::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2T.min() = 0;
			::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2T.max() = -1;
			::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2T.isNavigable() = true;
			::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2T.isPrimary() = false;
			::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2T.target() = ::FCSL::FM::TestInstance::meta;
			::FCSL::FM::DOP2T::meta_dstDOP2T_end_ = ::FCSL::FM::TestInstance::meta_srcDOP2T_rev = ::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2T;
			::FCSL::FM::TestInstance::meta_srcDOP2T = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::TestInstance::meta_srcDOP2T.name() = "srcDOP2T";
			::FCSL::FM::TestInstance::meta_srcDOP2T.min() = 0;
			::FCSL::FM::TestInstance::meta_srcDOP2T.max() = -1;
			::FCSL::FM::TestInstance::meta_srcDOP2T.isNavigable() = true;
			::FCSL::FM::TestInstance::meta_srcDOP2T.isPrimary() = false;
			::FCSL::FM::TestInstance::meta_srcDOP2T.target() = ::FCSL::FM::DiscrepancyOutPort::meta;
			::FCSL::FM::DOP2T::meta_srcDOP2T_end_ = ::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2T_rev = ::FCSL::FM::TestInstance::meta_srcDOP2T;
		};
		void InitAssociation12()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			::FCSL::FM::Test::meta_referedbyTestRef = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::Test::meta_referedbyTestRef.name() = "referedbyTestRef";
			::FCSL::FM::Test::meta_referedbyTestRef.min() = 0;
			::FCSL::FM::Test::meta_referedbyTestRef.max() = -1;
			::FCSL::FM::Test::meta_referedbyTestRef.isNavigable() = true;
			::FCSL::FM::Test::meta_referedbyTestRef.isPrimary() = false;
			::FCSL::FM::Test::meta_referedbyTestRef.target() = ::FCSL::FM::TestRef::meta;
			::FCSL::FM::TestRef::meta_ref = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::TestRef::meta_ref.name() = "ref";
			::FCSL::FM::TestRef::meta_ref.min() = 0;
			::FCSL::FM::TestRef::meta_ref.max() = 1;
			::FCSL::FM::TestRef::meta_ref.isNavigable() = true;
			::FCSL::FM::TestRef::meta_ref.isPrimary() = false;
			::FCSL::FM::TestRef::meta_ref.target() = ::FCSL::FM::Test::meta;
		};
		void InitAssociation13()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			::FCSL::FM::Test::meta_referedbyTestInstance = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::Test::meta_referedbyTestInstance.name() = "referedbyTestInstance";
			::FCSL::FM::Test::meta_referedbyTestInstance.min() = 0;
			::FCSL::FM::Test::meta_referedbyTestInstance.max() = -1;
			::FCSL::FM::Test::meta_referedbyTestInstance.isNavigable() = true;
			::FCSL::FM::Test::meta_referedbyTestInstance.isPrimary() = false;
			::FCSL::FM::Test::meta_referedbyTestInstance.target() = ::FCSL::FM::TestInstance::meta;
			::FCSL::FM::TestInstance::meta_ref = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::TestInstance::meta_ref.name() = "ref";
			::FCSL::FM::TestInstance::meta_ref.min() = 0;
			::FCSL::FM::TestInstance::meta_ref.max() = 1;
			::FCSL::FM::TestInstance::meta_ref.isNavigable() = true;
			::FCSL::FM::TestInstance::meta_ref.isPrimary() = false;
			::FCSL::FM::TestInstance::meta_ref.target() = ::FCSL::FM::Test::meta;
		};
		void InitAssociation14()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			ass.name() = "SignalflowConn";
			ass.assocClass() = ::FCSL::FM::SignalflowConn::meta;
			::FCSL::FM::DataPort::meta_srcSignalflowConn = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::DataPort::meta_srcSignalflowConn.name() = "srcSignalflowConn";
			::FCSL::FM::DataPort::meta_srcSignalflowConn.min() = 0;
			::FCSL::FM::DataPort::meta_srcSignalflowConn.max() = -1;
			::FCSL::FM::DataPort::meta_srcSignalflowConn.isNavigable() = true;
			::FCSL::FM::DataPort::meta_srcSignalflowConn.isPrimary() = false;
			::FCSL::FM::DataPort::meta_srcSignalflowConn.target() = ::FCSL::FM::DataPort::meta;
			::FCSL::FM::SignalflowConn::meta_srcSignalflowConn_end_ = ::FCSL::FM::DataPort::meta_dstSignalflowConn_rev = ::FCSL::FM::DataPort::meta_srcSignalflowConn;
			::FCSL::FM::DataPort::meta_dstSignalflowConn = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::DataPort::meta_dstSignalflowConn.name() = "dstSignalflowConn";
			::FCSL::FM::DataPort::meta_dstSignalflowConn.min() = 0;
			::FCSL::FM::DataPort::meta_dstSignalflowConn.max() = -1;
			::FCSL::FM::DataPort::meta_dstSignalflowConn.isNavigable() = true;
			::FCSL::FM::DataPort::meta_dstSignalflowConn.isPrimary() = false;
			::FCSL::FM::DataPort::meta_dstSignalflowConn.target() = ::FCSL::FM::DataPort::meta;
			::FCSL::FM::SignalflowConn::meta_dstSignalflowConn_end_ = ::FCSL::FM::DataPort::meta_srcSignalflowConn_rev = ::FCSL::FM::DataPort::meta_dstSignalflowConn;
		};
		void InitAssociation15()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			ass.name() = "Sig2Dataport";
			ass.assocClass() = ::FCSL::FM::Sig2Dataport::meta;
			::FCSL::FM::DataPort::meta_srcSig2Dataport = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::DataPort::meta_srcSig2Dataport.name() = "srcSig2Dataport";
			::FCSL::FM::DataPort::meta_srcSig2Dataport.min() = 0;
			::FCSL::FM::DataPort::meta_srcSig2Dataport.max() = -1;
			::FCSL::FM::DataPort::meta_srcSig2Dataport.isNavigable() = true;
			::FCSL::FM::DataPort::meta_srcSig2Dataport.isPrimary() = false;
			::FCSL::FM::DataPort::meta_srcSig2Dataport.target() = ::FCSL::FM::Signal::meta;
			::FCSL::FM::Sig2Dataport::meta_srcSig2Dataport_end_ = ::FCSL::FM::Signal::meta_dstSig2Dataport_rev = ::FCSL::FM::DataPort::meta_srcSig2Dataport;
			::FCSL::FM::Signal::meta_dstSig2Dataport = ::Uml::AssociationRole::Create(ass);
			::FCSL::FM::Signal::meta_dstSig2Dataport.name() = "dstSig2Dataport";
			::FCSL::FM::Signal::meta_dstSig2Dataport.min() = 0;
			::FCSL::FM::Signal::meta_dstSig2Dataport.max() = -1;
			::FCSL::FM::Signal::meta_dstSig2Dataport.isNavigable() = true;
			::FCSL::FM::Signal::meta_dstSig2Dataport.isPrimary() = false;
			::FCSL::FM::Signal::meta_dstSig2Dataport.target() = ::FCSL::FM::DataPort::meta;
			::FCSL::FM::Sig2Dataport::meta_dstSig2Dataport_end_ = ::FCSL::FM::DataPort::meta_srcSig2Dataport_rev = ::FCSL::FM::Signal::meta_dstSig2Dataport;
		};
		void InitCrossNSAssociations()
		{
		}
		void InitComposition0()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::TestGroup::meta_TestModels_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::TestGroup::meta_TestModels_parent.name() = "TestModels_parent";
			::FCSL::FM::TestGroup::meta_TestModels_parent.isNavigable() = true;
			::FCSL::FM::TestGroup::meta_TestModels_parent.target() = ::FCSL::FM::TestModels::meta;
			::FCSL::FM::TestModels::meta_TestGroup_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::TestModels::meta_TestGroup_children.name() = "TestGroup";
			::FCSL::FM::TestModels::meta_TestGroup_children.min() = 0;
			::FCSL::FM::TestModels::meta_TestGroup_children.max() = -1;
			::FCSL::FM::TestModels::meta_TestGroup_children.isNavigable() = true;
			::FCSL::FM::TestModels::meta_TestGroup_children.target() = ::FCSL::FM::TestGroup::meta;
		}
		void InitComposition1()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::TestContainer::meta_TestModels_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::TestContainer::meta_TestModels_parent.name() = "TestModels_parent";
			::FCSL::FM::TestContainer::meta_TestModels_parent.isNavigable() = true;
			::FCSL::FM::TestContainer::meta_TestModels_parent.target() = ::FCSL::FM::TestModels::meta;
			::FCSL::FM::TestModels::meta_TestContainer_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::TestModels::meta_TestContainer_children.name() = "TestContainer";
			::FCSL::FM::TestModels::meta_TestContainer_children.min() = 0;
			::FCSL::FM::TestModels::meta_TestContainer_children.max() = -1;
			::FCSL::FM::TestModels::meta_TestContainer_children.isNavigable() = true;
			::FCSL::FM::TestModels::meta_TestContainer_children.target() = ::FCSL::FM::TestContainer::meta;
		}
		void InitComposition2()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::Platform::meta_PlatformModels_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::Platform::meta_PlatformModels_parent.name() = "PlatformModels_parent";
			::FCSL::FM::Platform::meta_PlatformModels_parent.isNavigable() = true;
			::FCSL::FM::Platform::meta_PlatformModels_parent.target() = ::FCSL::FM::PlatformModels::meta;
			::FCSL::FM::PlatformModels::meta_Platform_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::PlatformModels::meta_Platform_children.name() = "Platform";
			::FCSL::FM::PlatformModels::meta_Platform_children.min() = 0;
			::FCSL::FM::PlatformModels::meta_Platform_children.max() = -1;
			::FCSL::FM::PlatformModels::meta_Platform_children.isNavigable() = true;
			::FCSL::FM::PlatformModels::meta_Platform_children.target() = ::FCSL::FM::Platform::meta;
		}
		void InitComposition3()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::Unit::meta_UnitModels_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::Unit::meta_UnitModels_parent.name() = "UnitModels_parent";
			::FCSL::FM::Unit::meta_UnitModels_parent.isNavigable() = true;
			::FCSL::FM::Unit::meta_UnitModels_parent.target() = ::FCSL::FM::UnitModels::meta;
			::FCSL::FM::UnitModels::meta_Unit_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::UnitModels::meta_Unit_children.name() = "Unit";
			::FCSL::FM::UnitModels::meta_Unit_children.min() = 0;
			::FCSL::FM::UnitModels::meta_Unit_children.max() = -1;
			::FCSL::FM::UnitModels::meta_Unit_children.isNavigable() = true;
			::FCSL::FM::UnitModels::meta_Unit_children.target() = ::FCSL::FM::Unit::meta;
		}
		void InitComposition4()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::Sig2Dataport::meta_Device_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::Sig2Dataport::meta_Device_parent.name() = "Device_parent";
			::FCSL::FM::Sig2Dataport::meta_Device_parent.isNavigable() = true;
			::FCSL::FM::Sig2Dataport::meta_Device_parent.target() = ::FCSL::FM::Device::meta;
			::FCSL::FM::Device::meta_Sig2Dataport_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::Device::meta_Sig2Dataport_children.name() = "Sig2Dataport";
			::FCSL::FM::Device::meta_Sig2Dataport_children.min() = 0;
			::FCSL::FM::Device::meta_Sig2Dataport_children.max() = -1;
			::FCSL::FM::Device::meta_Sig2Dataport_children.isNavigable() = true;
			::FCSL::FM::Device::meta_Sig2Dataport_children.target() = ::FCSL::FM::Sig2Dataport::meta;
		}
		void InitComposition5()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::Signal::meta_Device_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::Signal::meta_Device_parent.name() = "Device_parent";
			::FCSL::FM::Signal::meta_Device_parent.isNavigable() = true;
			::FCSL::FM::Signal::meta_Device_parent.target() = ::FCSL::FM::Device::meta;
			::FCSL::FM::Device::meta_Signal_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::Device::meta_Signal_children.name() = "Signal";
			::FCSL::FM::Device::meta_Signal_children.min() = 0;
			::FCSL::FM::Device::meta_Signal_children.max() = -1;
			::FCSL::FM::Device::meta_Signal_children.isNavigable() = true;
			::FCSL::FM::Device::meta_Signal_children.target() = ::FCSL::FM::Signal::meta;
		}
		void InitComposition6()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::DataPort::meta_Device_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::DataPort::meta_Device_parent.name() = "Device_parent";
			::FCSL::FM::DataPort::meta_Device_parent.isNavigable() = true;
			::FCSL::FM::DataPort::meta_Device_parent.target() = ::FCSL::FM::Device::meta;
			::FCSL::FM::Device::meta_DataPort_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::Device::meta_DataPort_children.name() = "DataPort";
			::FCSL::FM::Device::meta_DataPort_children.min() = 0;
			::FCSL::FM::Device::meta_DataPort_children.max() = -1;
			::FCSL::FM::Device::meta_DataPort_children.isNavigable() = true;
			::FCSL::FM::Device::meta_DataPort_children.target() = ::FCSL::FM::DataPort::meta;
		}
		void InitComposition7()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::DataPort::meta_Assembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::DataPort::meta_Assembly_parent.name() = "Assembly_parent";
			::FCSL::FM::DataPort::meta_Assembly_parent.isNavigable() = true;
			::FCSL::FM::DataPort::meta_Assembly_parent.target() = ::FCSL::FM::Assembly::meta;
			::FCSL::FM::Assembly::meta_DataPort_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::Assembly::meta_DataPort_children.name() = "DataPort";
			::FCSL::FM::Assembly::meta_DataPort_children.min() = 0;
			::FCSL::FM::Assembly::meta_DataPort_children.max() = -1;
			::FCSL::FM::Assembly::meta_DataPort_children.isNavigable() = true;
			::FCSL::FM::Assembly::meta_DataPort_children.target() = ::FCSL::FM::DataPort::meta;
		}
		void InitComposition8()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::Device2Surface::meta_Assembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::Device2Surface::meta_Assembly_parent.name() = "Assembly_parent";
			::FCSL::FM::Device2Surface::meta_Assembly_parent.isNavigable() = true;
			::FCSL::FM::Device2Surface::meta_Assembly_parent.target() = ::FCSL::FM::Assembly::meta;
			::FCSL::FM::Assembly::meta_Device2Surface_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::Assembly::meta_Device2Surface_children.name() = "Device2Surface";
			::FCSL::FM::Assembly::meta_Device2Surface_children.min() = 0;
			::FCSL::FM::Assembly::meta_Device2Surface_children.max() = -1;
			::FCSL::FM::Assembly::meta_Device2Surface_children.isNavigable() = true;
			::FCSL::FM::Assembly::meta_Device2Surface_children.target() = ::FCSL::FM::Device2Surface::meta;
		}
		void InitComposition9()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::Ctrl2Device::meta_Assembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::Ctrl2Device::meta_Assembly_parent.name() = "Assembly_parent";
			::FCSL::FM::Ctrl2Device::meta_Assembly_parent.isNavigable() = true;
			::FCSL::FM::Ctrl2Device::meta_Assembly_parent.target() = ::FCSL::FM::Assembly::meta;
			::FCSL::FM::Assembly::meta_Ctrl2Device_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::Assembly::meta_Ctrl2Device_children.name() = "Ctrl2Device";
			::FCSL::FM::Assembly::meta_Ctrl2Device_children.min() = 0;
			::FCSL::FM::Assembly::meta_Ctrl2Device_children.max() = -1;
			::FCSL::FM::Assembly::meta_Ctrl2Device_children.isNavigable() = true;
			::FCSL::FM::Assembly::meta_Ctrl2Device_children.target() = ::FCSL::FM::Ctrl2Device::meta;
		}
		void InitComposition10()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::Assembly::meta_Assembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::Assembly::meta_Assembly_parent.name() = "Assembly_parent";
			::FCSL::FM::Assembly::meta_Assembly_parent.isNavigable() = true;
			::FCSL::FM::Assembly::meta_Assembly_parent.target() = ::FCSL::FM::Assembly::meta;
			::FCSL::FM::Assembly::meta_Assembly_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::Assembly::meta_Assembly_children.name() = "Assembly";
			::FCSL::FM::Assembly::meta_Assembly_children.min() = 0;
			::FCSL::FM::Assembly::meta_Assembly_children.max() = -1;
			::FCSL::FM::Assembly::meta_Assembly_children.isNavigable() = true;
			::FCSL::FM::Assembly::meta_Assembly_children.target() = ::FCSL::FM::Assembly::meta;
		}
		void InitComposition11()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::Unit::meta_Assembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::Unit::meta_Assembly_parent.name() = "Assembly_parent";
			::FCSL::FM::Unit::meta_Assembly_parent.isNavigable() = true;
			::FCSL::FM::Unit::meta_Assembly_parent.target() = ::FCSL::FM::Assembly::meta;
			::FCSL::FM::Assembly::meta_Unit_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::Assembly::meta_Unit_children.name() = "Unit";
			::FCSL::FM::Assembly::meta_Unit_children.min() = 0;
			::FCSL::FM::Assembly::meta_Unit_children.max() = -1;
			::FCSL::FM::Assembly::meta_Unit_children.isNavigable() = true;
			::FCSL::FM::Assembly::meta_Unit_children.target() = ::FCSL::FM::Unit::meta;
		}
		void InitComposition12()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::FaultModelElementPort::meta_Assembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::FaultModelElementPort::meta_Assembly_parent.name() = "Assembly_parent";
			::FCSL::FM::FaultModelElementPort::meta_Assembly_parent.isNavigable() = true;
			::FCSL::FM::FaultModelElementPort::meta_Assembly_parent.target() = ::FCSL::FM::Assembly::meta;
			::FCSL::FM::Assembly::meta_FaultModelElementPort_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::Assembly::meta_FaultModelElementPort_children.name() = "FaultModelElementPort";
			::FCSL::FM::Assembly::meta_FaultModelElementPort_children.min() = 0;
			::FCSL::FM::Assembly::meta_FaultModelElementPort_children.max() = -1;
			::FCSL::FM::Assembly::meta_FaultModelElementPort_children.isNavigable() = true;
			::FCSL::FM::Assembly::meta_FaultModelElementPort_children.target() = ::FCSL::FM::FaultModelElementPort::meta;
		}
		void InitComposition13()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::FaultModelElement::meta_Assembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::FaultModelElement::meta_Assembly_parent.name() = "Assembly_parent";
			::FCSL::FM::FaultModelElement::meta_Assembly_parent.isNavigable() = true;
			::FCSL::FM::FaultModelElement::meta_Assembly_parent.target() = ::FCSL::FM::Assembly::meta;
			::FCSL::FM::Assembly::meta_FaultModelElement_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::Assembly::meta_FaultModelElement_children.name() = "FaultModelElement";
			::FCSL::FM::Assembly::meta_FaultModelElement_children.min() = 0;
			::FCSL::FM::Assembly::meta_FaultModelElement_children.max() = -1;
			::FCSL::FM::Assembly::meta_FaultModelElement_children.isNavigable() = true;
			::FCSL::FM::Assembly::meta_FaultModelElement_children.target() = ::FCSL::FM::FaultModelElement::meta;
		}
		void InitComposition14()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::FailureModeRef::meta_Test_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::FailureModeRef::meta_Test_parent.name() = "Test_parent";
			::FCSL::FM::FailureModeRef::meta_Test_parent.isNavigable() = true;
			::FCSL::FM::FailureModeRef::meta_Test_parent.target() = ::FCSL::FM::Test::meta;
			::FCSL::FM::Test::meta_FailureModeRef_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::Test::meta_FailureModeRef_children.name() = "FailureModeRef";
			::FCSL::FM::Test::meta_FailureModeRef_children.min() = 0;
			::FCSL::FM::Test::meta_FailureModeRef_children.max() = -1;
			::FCSL::FM::Test::meta_FailureModeRef_children.isNavigable() = true;
			::FCSL::FM::Test::meta_FailureModeRef_children.target() = ::FCSL::FM::FailureModeRef::meta;
		}
		void InitComposition15()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::Test::meta_TestContainer_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::Test::meta_TestContainer_parent.name() = "TestContainer_parent";
			::FCSL::FM::Test::meta_TestContainer_parent.isNavigable() = true;
			::FCSL::FM::Test::meta_TestContainer_parent.target() = ::FCSL::FM::TestContainer::meta;
			::FCSL::FM::TestContainer::meta_Test_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::TestContainer::meta_Test_children.name() = "Test";
			::FCSL::FM::TestContainer::meta_Test_children.min() = 0;
			::FCSL::FM::TestContainer::meta_Test_children.max() = -1;
			::FCSL::FM::TestContainer::meta_Test_children.isNavigable() = true;
			::FCSL::FM::TestContainer::meta_Test_children.target() = ::FCSL::FM::Test::meta;
		}
		void InitComposition16()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::TestRef::meta_TestGroup_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::TestRef::meta_TestGroup_parent.name() = "TestGroup_parent";
			::FCSL::FM::TestRef::meta_TestGroup_parent.isNavigable() = true;
			::FCSL::FM::TestRef::meta_TestGroup_parent.target() = ::FCSL::FM::TestGroup::meta;
			::FCSL::FM::TestGroup::meta_TestRef_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::TestGroup::meta_TestRef_children.name() = "TestRef";
			::FCSL::FM::TestGroup::meta_TestRef_children.min() = 0;
			::FCSL::FM::TestGroup::meta_TestRef_children.max() = -1;
			::FCSL::FM::TestGroup::meta_TestRef_children.isNavigable() = true;
			::FCSL::FM::TestGroup::meta_TestRef_children.target() = ::FCSL::FM::TestRef::meta;
		}
		void InitComposition17()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::SignalflowConn::meta_Platform_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::SignalflowConn::meta_Platform_parent.name() = "Platform_parent";
			::FCSL::FM::SignalflowConn::meta_Platform_parent.isNavigable() = true;
			::FCSL::FM::SignalflowConn::meta_Platform_parent.target() = ::FCSL::FM::Platform::meta;
			::FCSL::FM::Platform::meta_SignalflowConn_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::Platform::meta_SignalflowConn_children.name() = "SignalflowConn";
			::FCSL::FM::Platform::meta_SignalflowConn_children.min() = 0;
			::FCSL::FM::Platform::meta_SignalflowConn_children.max() = -1;
			::FCSL::FM::Platform::meta_SignalflowConn_children.isNavigable() = true;
			::FCSL::FM::Platform::meta_SignalflowConn_children.target() = ::FCSL::FM::SignalflowConn::meta;
		}
		void InitComposition18()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::DIP2DOP::meta_Platform_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::DIP2DOP::meta_Platform_parent.name() = "Platform_parent";
			::FCSL::FM::DIP2DOP::meta_Platform_parent.isNavigable() = true;
			::FCSL::FM::DIP2DOP::meta_Platform_parent.target() = ::FCSL::FM::Platform::meta;
			::FCSL::FM::Platform::meta_DIP2DOP_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::Platform::meta_DIP2DOP_children.name() = "DIP2DOP";
			::FCSL::FM::Platform::meta_DIP2DOP_children.min() = 0;
			::FCSL::FM::Platform::meta_DIP2DOP_children.max() = -1;
			::FCSL::FM::Platform::meta_DIP2DOP_children.isNavigable() = true;
			::FCSL::FM::Platform::meta_DIP2DOP_children.target() = ::FCSL::FM::DIP2DOP::meta;
		}
		void InitComposition19()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::Entity::meta_Platform_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::Entity::meta_Platform_parent.name() = "Platform_parent";
			::FCSL::FM::Entity::meta_Platform_parent.isNavigable() = true;
			::FCSL::FM::Entity::meta_Platform_parent.target() = ::FCSL::FM::Platform::meta;
			::FCSL::FM::Platform::meta_Entity_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::Platform::meta_Entity_children.name() = "Entity";
			::FCSL::FM::Platform::meta_Entity_children.min() = 0;
			::FCSL::FM::Platform::meta_Entity_children.max() = -1;
			::FCSL::FM::Platform::meta_Entity_children.isNavigable() = true;
			::FCSL::FM::Platform::meta_Entity_children.target() = ::FCSL::FM::Entity::meta;
		}
		void InitComposition20()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::FaultModelElement::meta_Unit_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::FaultModelElement::meta_Unit_parent.name() = "Unit_parent";
			::FCSL::FM::FaultModelElement::meta_Unit_parent.isNavigable() = true;
			::FCSL::FM::FaultModelElement::meta_Unit_parent.target() = ::FCSL::FM::Unit::meta;
			::FCSL::FM::Unit::meta_FaultModelElement_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::Unit::meta_FaultModelElement_children.name() = "FaultModelElement";
			::FCSL::FM::Unit::meta_FaultModelElement_children.min() = 0;
			::FCSL::FM::Unit::meta_FaultModelElement_children.max() = -1;
			::FCSL::FM::Unit::meta_FaultModelElement_children.isNavigable() = true;
			::FCSL::FM::Unit::meta_FaultModelElement_children.target() = ::FCSL::FM::FaultModelElement::meta;
		}
		void InitComposition21()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::FM::FaultModelElementPort::meta_Unit_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::FM::FaultModelElementPort::meta_Unit_parent.name() = "Unit_parent";
			::FCSL::FM::FaultModelElementPort::meta_Unit_parent.isNavigable() = true;
			::FCSL::FM::FaultModelElementPort::meta_Unit_parent.target() = ::FCSL::FM::Unit::meta;
			::FCSL::FM::Unit::meta_FaultModelElementPort_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::FM::Unit::meta_FaultModelElementPort_children.name() = "FaultModelElementPort";
			::FCSL::FM::Unit::meta_FaultModelElementPort_children.min() = 0;
			::FCSL::FM::Unit::meta_FaultModelElementPort_children.max() = -1;
			::FCSL::FM::Unit::meta_FaultModelElementPort_children.isNavigable() = true;
			::FCSL::FM::Unit::meta_FaultModelElementPort_children.target() = ::FCSL::FM::FaultModelElementPort::meta;
		}
		void InitCrossNSCompositions()
		{
		}
		void InitInheritence()
		{
			DiscrepancyPort::meta.subTypes() +=  ::FCSL::FM::DiscrepancyOutPort::meta;
			DiscrepancyPort::meta.subTypes() +=  ::FCSL::FM::DiscrepancyInPort::meta;
			FaultModelElementPort::meta.subTypes() +=  ::FCSL::FM::DiscrepancyPort::meta;
			FaultModelElement::meta.subTypes() +=  ::FCSL::FM::FM2DOP::meta;
			FaultModelElement::meta.subTypes() +=  ::FCSL::FM::FailureMode::meta;
			FaultModelElement::meta.subTypes() +=  ::FCSL::FM::DIP2D::meta;
			FaultModelElement::meta.subTypes() +=  ::FCSL::FM::Discrepancy::meta;
			FaultModelElement::meta.subTypes() +=  ::FCSL::FM::FM2D::meta;
			FaultModelElement::meta.subTypes() +=  ::FCSL::FM::SignalflowConn::meta;
			FaultModelElement::meta.subTypes() +=  ::FCSL::FM::DOP2T::meta;
			FaultModelElement::meta.subTypes() +=  ::FCSL::FM::D2Test::meta;
			FaultModelElement::meta.subTypes() +=  ::FCSL::FM::DOP2D::meta;
			FaultModelElement::meta.subTypes() +=  ::FCSL::FM::D2DOP::meta;
			FaultModelElement::meta.subTypes() +=  ::FCSL::FM::FailureProp::meta;
			FaultModelElement::meta.subTypes() +=  ::FCSL::FM::DIP2DOP::meta;
			FaultModelElement::meta.subTypes() +=  ::FCSL::FM::TestInstance::meta;
			Entity::meta.subTypes() +=  ::FCSL::FM::Assembly::meta;
			Entity::meta.subTypes() +=  ::FCSL::FM::Unit::meta;
			Unit::meta.subTypes() +=  ::FCSL::FM::Device::meta;
			Unit::meta.subTypes() +=  ::FCSL::FM::Surface::meta;
			Unit::meta.subTypes() +=  ::FCSL::FM::Control::meta;
			Unit::meta.subTypes() +=  ::FCSL::FM::Signal::meta;
			DataPort::meta.subTypes() +=  ::FCSL::FM::DataOut::meta;
			DataPort::meta.subTypes() +=  ::FCSL::FM::DataIn::meta;
		}
		void InitCrossNSInheritence()
		{
		}
		void InitializeNS()
		{
			Creates();
			InitClassesAttributes();
			CreatesNamespaces();
			InitNamespaces();
			InitAssociation0();
			InitAssociation1();
			InitAssociation2();
			InitAssociation3();
			InitAssociation4();
			InitAssociation5();
			InitAssociation6();
			InitAssociation7();
			InitAssociation8();
			InitAssociation9();
			InitAssociation10();
			InitAssociation11();
			InitAssociation12();
			InitAssociation13();
			InitAssociation14();
			InitAssociation15();
			InitComposition0();
			InitComposition1();
			InitComposition2();
			InitComposition3();
			InitComposition4();
			InitComposition5();
			InitComposition6();
			InitComposition7();
			InitComposition8();
			InitComposition9();
			InitComposition10();
			InitComposition11();
			InitComposition12();
			InitComposition13();
			InitComposition14();
			InitComposition15();
			InitComposition16();
			InitComposition17();
			InitComposition18();
			InitComposition19();
			InitComposition20();
			InitComposition21();
			InitInheritence();
			
		}

		// initialize from another namespace
		void Creates2(const ::Uml::Namespace &ns)
		{
			::Uml::SetClass(TestModels::meta, ns, "TestModels");
			::Uml::SetAttribute(TestModels::meta_name, TestModels::meta, "name");
			::Uml::SetClass(PlatformModels::meta, ns, "PlatformModels");
			::Uml::SetAttribute(PlatformModels::meta_name, PlatformModels::meta, "name");
			::Uml::SetClass(UnitModels::meta, ns, "UnitModels");
			::Uml::SetAttribute(UnitModels::meta_name, UnitModels::meta, "name");
			::Uml::SetClass(FM2DOP::meta, ns, "FM2DOP");
			::Uml::SetClass(Device::meta, ns, "Device");
			::Uml::SetClass(Sig2Dataport::meta, ns, "Sig2Dataport");
			::Uml::SetClass(Device2Surface::meta, ns, "Device2Surface");
			::Uml::SetClass(DiscrepancyPort::meta, ns, "DiscrepancyPort");
			::Uml::SetClass(FailureMode::meta, ns, "FailureMode");
			::Uml::SetClass(Assembly::meta, ns, "Assembly");
			::Uml::SetClass(DIP2D::meta, ns, "DIP2D");
			::Uml::SetClass(Discrepancy::meta, ns, "Discrepancy");
			::Uml::SetAttribute(Discrepancy::meta_DiscrepancyType, Discrepancy::meta, "DiscrepancyType");
			::Uml::SetClass(FM2D::meta, ns, "FM2D");
			::Uml::SetClass(DiscrepancyOutPort::meta, ns, "DiscrepancyOutPort");
			::Uml::SetClass(SignalflowConn::meta, ns, "SignalflowConn");
			::Uml::SetClass(DOP2T::meta, ns, "DOP2T");
			::Uml::SetClass(Surface::meta, ns, "Surface");
			::Uml::SetClass(DataOut::meta, ns, "DataOut");
			::Uml::SetClass(Ctrl2Device::meta, ns, "Ctrl2Device");
			::Uml::SetClass(FaultModelElementPort::meta, ns, "FaultModelElementPort");
			::Uml::SetClass(DataIn::meta, ns, "DataIn");
			::Uml::SetClass(Test::meta, ns, "Test");
			::Uml::SetClass(TestContainer::meta, ns, "TestContainer");
			::Uml::SetClass(TestGroup::meta, ns, "TestGroup");
			::Uml::SetClass(D2Test::meta, ns, "D2Test");
			::Uml::SetClass(Control::meta, ns, "Control");
			::Uml::SetClass(FaultModelElement::meta, ns, "FaultModelElement");
			::Uml::SetClass(FailureModeRef::meta, ns, "FailureModeRef");
			::Uml::SetClass(Platform::meta, ns, "Platform");
			::Uml::SetClass(DOP2D::meta, ns, "DOP2D");
			::Uml::SetClass(D2DOP::meta, ns, "D2DOP");
			::Uml::SetClass(Entity::meta, ns, "Entity");
			::Uml::SetClass(Unit::meta, ns, "Unit");
			::Uml::SetClass(DiscrepancyInPort::meta, ns, "DiscrepancyInPort");
			::Uml::SetClass(DataPort::meta, ns, "DataPort");
			::Uml::SetClass(FailureProp::meta, ns, "FailureProp");
			::Uml::SetClass(DIP2DOP::meta, ns, "DIP2DOP");
			::Uml::SetClass(TestInstance::meta, ns, "TestInstance");
			::Uml::SetClass(Signal::meta, ns, "Signal");
			::Uml::SetClass(TestRef::meta, ns, "TestRef");
		}
		void CreatesNamespaces2(const ::Uml::Namespace &ns)
		{
		}
		void InitializeNSSetupMeta(const ::Uml::Namespace & ns)
		{
			Creates2(ns);
			CreatesNamespaces2(ns);
		}
		void InitializeNS2()
		{
			//composition child roles 
			::Uml::SetParentRole(TestModels::meta_RootFolder_parent, TestModels::meta, ::FCSL::RootFolder::meta, "", "");
			::Uml::SetParentRole(PlatformModels::meta_RootFolder_parent, PlatformModels::meta, ::FCSL::RootFolder::meta, "", "");
			::Uml::SetParentRole(UnitModels::meta_RootFolder_parent, UnitModels::meta, ::FCSL::RootFolder::meta, "", "");
			::Uml::SetParentRole(Sig2Dataport::meta_Device_parent, Sig2Dataport::meta, ::FCSL::FM::Device::meta, "", "");
			::Uml::SetParentRole(Device2Surface::meta_Assembly_parent, Device2Surface::meta, ::FCSL::FM::Assembly::meta, "", "");
			::Uml::SetParentRole(Assembly::meta_Assembly_parent, Assembly::meta, ::FCSL::FM::Assembly::meta, "", "");
			::Uml::SetParentRole(SignalflowConn::meta_Platform_parent, SignalflowConn::meta, ::FCSL::FM::Platform::meta, "", "");
			::Uml::SetParentRole(Ctrl2Device::meta_Assembly_parent, Ctrl2Device::meta, ::FCSL::FM::Assembly::meta, "", "");
			::Uml::SetParentRole(FaultModelElementPort::meta_Assembly_parent, FaultModelElementPort::meta, ::FCSL::FM::Assembly::meta, "", "");
			::Uml::SetParentRole(FaultModelElementPort::meta_Unit_parent, FaultModelElementPort::meta, ::FCSL::FM::Unit::meta, "", "");
			::Uml::SetParentRole(Test::meta_TestContainer_parent, Test::meta, ::FCSL::FM::TestContainer::meta, "", "");
			::Uml::SetParentRole(TestContainer::meta_TestModels_parent, TestContainer::meta, ::FCSL::FM::TestModels::meta, "", "");
			::Uml::SetParentRole(TestGroup::meta_TestModels_parent, TestGroup::meta, ::FCSL::FM::TestModels::meta, "", "");
			::Uml::SetParentRole(FaultModelElement::meta_Assembly_parent, FaultModelElement::meta, ::FCSL::FM::Assembly::meta, "", "");
			::Uml::SetParentRole(FaultModelElement::meta_Unit_parent, FaultModelElement::meta, ::FCSL::FM::Unit::meta, "", "");
			::Uml::SetParentRole(FailureModeRef::meta_Test_parent, FailureModeRef::meta, ::FCSL::FM::Test::meta, "", "");
			::Uml::SetParentRole(Platform::meta_PlatformModels_parent, Platform::meta, ::FCSL::FM::PlatformModels::meta, "", "");
			::Uml::SetParentRole(Entity::meta_Platform_parent, Entity::meta, ::FCSL::FM::Platform::meta, "", "");
			::Uml::SetParentRole(Unit::meta_UnitModels_parent, Unit::meta, ::FCSL::FM::UnitModels::meta, "", "");
			::Uml::SetParentRole(Unit::meta_Assembly_parent, Unit::meta, ::FCSL::FM::Assembly::meta, "", "");
			::Uml::SetParentRole(DataPort::meta_Device_parent, DataPort::meta, ::FCSL::FM::Device::meta, "", "");
			::Uml::SetParentRole(DataPort::meta_Assembly_parent, DataPort::meta, ::FCSL::FM::Assembly::meta, "", "");
			::Uml::SetParentRole(DIP2DOP::meta_Platform_parent, DIP2DOP::meta, ::FCSL::FM::Platform::meta, "", "");
			::Uml::SetParentRole(Signal::meta_Device_parent, Signal::meta, ::FCSL::FM::Device::meta, "", "");
			::Uml::SetParentRole(TestRef::meta_TestGroup_parent, TestRef::meta, ::FCSL::FM::TestGroup::meta, "", "");

			// composition parentroles 
			::Uml::SetChildRole(TestModels::meta_TestGroup_children, TestModels::meta, ::FCSL::FM::TestGroup::meta, "", "");
			::Uml::SetChildRole(TestModels::meta_TestContainer_children, TestModels::meta, ::FCSL::FM::TestContainer::meta, "", "");
			::Uml::SetChildRole(PlatformModels::meta_Platform_children, PlatformModels::meta, ::FCSL::FM::Platform::meta, "", "");
			::Uml::SetChildRole(UnitModels::meta_Unit_children, UnitModels::meta, ::FCSL::FM::Unit::meta, "", "");
			::Uml::SetChildRole(Device::meta_Sig2Dataport_children, Device::meta, ::FCSL::FM::Sig2Dataport::meta, "", "");
			::Uml::SetChildRole(Device::meta_Signal_children, Device::meta, ::FCSL::FM::Signal::meta, "", "");
			::Uml::SetChildRole(Device::meta_DataPort_children, Device::meta, ::FCSL::FM::DataPort::meta, "", "");
			::Uml::SetChildRole(Assembly::meta_DataPort_children, Assembly::meta, ::FCSL::FM::DataPort::meta, "", "");
			::Uml::SetChildRole(Assembly::meta_Device2Surface_children, Assembly::meta, ::FCSL::FM::Device2Surface::meta, "", "");
			::Uml::SetChildRole(Assembly::meta_Ctrl2Device_children, Assembly::meta, ::FCSL::FM::Ctrl2Device::meta, "", "");
			::Uml::SetChildRole(Assembly::meta_Assembly_children, Assembly::meta, ::FCSL::FM::Assembly::meta, "", "");
			::Uml::SetChildRole(Assembly::meta_Unit_children, Assembly::meta, ::FCSL::FM::Unit::meta, "", "");
			::Uml::SetChildRole(Assembly::meta_FaultModelElementPort_children, Assembly::meta, ::FCSL::FM::FaultModelElementPort::meta, "", "");
			::Uml::SetChildRole(Assembly::meta_FaultModelElement_children, Assembly::meta, ::FCSL::FM::FaultModelElement::meta, "", "");
			::Uml::SetChildRole(Test::meta_FailureModeRef_children, Test::meta, ::FCSL::FM::FailureModeRef::meta, "", "");
			::Uml::SetChildRole(TestContainer::meta_Test_children, TestContainer::meta, ::FCSL::FM::Test::meta, "", "");
			::Uml::SetChildRole(TestGroup::meta_TestRef_children, TestGroup::meta, ::FCSL::FM::TestRef::meta, "", "");
			::Uml::SetChildRole(Platform::meta_SignalflowConn_children, Platform::meta, ::FCSL::FM::SignalflowConn::meta, "", "");
			::Uml::SetChildRole(Platform::meta_DIP2DOP_children, Platform::meta, ::FCSL::FM::DIP2DOP::meta, "", "");
			::Uml::SetChildRole(Platform::meta_Entity_children, Platform::meta, ::FCSL::FM::Entity::meta, "", "");
			::Uml::SetChildRole(Unit::meta_FaultModelElement_children, Unit::meta, ::FCSL::FM::FaultModelElement::meta, "", "");
			::Uml::SetChildRole(Unit::meta_FaultModelElementPort_children, Unit::meta, ::FCSL::FM::FaultModelElementPort::meta, "", "");

			// Association roles 
			::Uml::SetAssocRole(Device::meta_srcCtrl2Device, Device::meta, ::FCSL::FM::Control::meta, "dstCtrl2Device");
			::FCSL::FM::Control::meta_dstCtrl2Device_rev = Device::meta_srcCtrl2Device;
			::Uml::SetAssocRole(Device::meta_dstDevice2Surface, Device::meta, ::FCSL::FM::Surface::meta, "srcDevice2Surface");
			::FCSL::FM::Surface::meta_srcDevice2Surface_rev = Device::meta_dstDevice2Surface;
			::Uml::SetAssocRole(DiscrepancyPort::meta_srcDIP2DOP, DiscrepancyPort::meta, ::FCSL::FM::DiscrepancyPort::meta, "dstDIP2DOP");
			::FCSL::FM::DiscrepancyPort::meta_dstDIP2DOP_rev = DiscrepancyPort::meta_srcDIP2DOP;
			::Uml::SetAssocRole(DiscrepancyPort::meta_dstDIP2DOP, DiscrepancyPort::meta, ::FCSL::FM::DiscrepancyPort::meta, "srcDIP2DOP");
			::FCSL::FM::DiscrepancyPort::meta_srcDIP2DOP_rev = DiscrepancyPort::meta_dstDIP2DOP;
			::Uml::SetAssocRole(FailureMode::meta_dstFM2DOP, FailureMode::meta, ::FCSL::FM::DiscrepancyOutPort::meta, "srcFM2DOP");
			::FCSL::FM::DiscrepancyOutPort::meta_srcFM2DOP_rev = FailureMode::meta_dstFM2DOP;
			::Uml::SetAssocRole(FailureMode::meta_dstFM2D, FailureMode::meta, ::FCSL::FM::Discrepancy::meta, "srcFM2D");
			::FCSL::FM::Discrepancy::meta_srcFM2D_rev = FailureMode::meta_dstFM2D;
			::Uml::SetAssocRole(FailureMode::meta_referedbyFailureModeRef, FailureMode::meta, ::FCSL::FM::FailureModeRef::meta, "ref");
			::Uml::SetAssocRole(Discrepancy::meta_srcFM2D, Discrepancy::meta, ::FCSL::FM::FailureMode::meta, "dstFM2D");
			::FCSL::FM::FailureMode::meta_dstFM2D_rev = Discrepancy::meta_srcFM2D;
			::Uml::SetAssocRole(Discrepancy::meta_dstD2Test, Discrepancy::meta, ::FCSL::FM::TestInstance::meta, "srcD2Test");
			::FCSL::FM::TestInstance::meta_srcD2Test_rev = Discrepancy::meta_dstD2Test;
			::Uml::SetAssocRole(Discrepancy::meta_dstD2DOP, Discrepancy::meta, ::FCSL::FM::DiscrepancyOutPort::meta, "srcD2DOP");
			::FCSL::FM::DiscrepancyOutPort::meta_srcD2DOP_rev = Discrepancy::meta_dstD2DOP;
			::Uml::SetAssocRole(Discrepancy::meta_dstFailureProp, Discrepancy::meta, ::FCSL::FM::Discrepancy::meta, "srcFailureProp");
			::FCSL::FM::Discrepancy::meta_srcFailureProp_rev = Discrepancy::meta_dstFailureProp;
			::Uml::SetAssocRole(Discrepancy::meta_srcFailureProp, Discrepancy::meta, ::FCSL::FM::Discrepancy::meta, "dstFailureProp");
			::FCSL::FM::Discrepancy::meta_dstFailureProp_rev = Discrepancy::meta_srcFailureProp;
			::Uml::SetAssocRole(Discrepancy::meta_srcDOP2D, Discrepancy::meta, ::FCSL::FM::DiscrepancyOutPort::meta, "dstDOP2D");
			::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2D_rev = Discrepancy::meta_srcDOP2D;
			::Uml::SetAssocRole(Discrepancy::meta_srcDIP2D, Discrepancy::meta, ::FCSL::FM::DiscrepancyInPort::meta, "dstDIP2D");
			::FCSL::FM::DiscrepancyInPort::meta_dstDIP2D_rev = Discrepancy::meta_srcDIP2D;
			::Uml::SetAssocRole(DiscrepancyOutPort::meta_srcFM2DOP, DiscrepancyOutPort::meta, ::FCSL::FM::FailureMode::meta, "dstFM2DOP");
			::FCSL::FM::FailureMode::meta_dstFM2DOP_rev = DiscrepancyOutPort::meta_srcFM2DOP;
			::Uml::SetAssocRole(DiscrepancyOutPort::meta_srcD2DOP, DiscrepancyOutPort::meta, ::FCSL::FM::Discrepancy::meta, "dstD2DOP");
			::FCSL::FM::Discrepancy::meta_dstD2DOP_rev = DiscrepancyOutPort::meta_srcD2DOP;
			::Uml::SetAssocRole(DiscrepancyOutPort::meta_dstDOP2D, DiscrepancyOutPort::meta, ::FCSL::FM::Discrepancy::meta, "srcDOP2D");
			::FCSL::FM::Discrepancy::meta_srcDOP2D_rev = DiscrepancyOutPort::meta_dstDOP2D;
			::Uml::SetAssocRole(DiscrepancyOutPort::meta_dstDOP2T, DiscrepancyOutPort::meta, ::FCSL::FM::TestInstance::meta, "srcDOP2T");
			::FCSL::FM::TestInstance::meta_srcDOP2T_rev = DiscrepancyOutPort::meta_dstDOP2T;
			::Uml::SetAssocRole(Surface::meta_srcDevice2Surface, Surface::meta, ::FCSL::FM::Device::meta, "dstDevice2Surface");
			::FCSL::FM::Device::meta_dstDevice2Surface_rev = Surface::meta_srcDevice2Surface;
			::Uml::SetAssocRole(Test::meta_referedbyBitTestRef, Test::meta, ::FCSL::BitTestRef::meta, "ref");
			::Uml::SetAssocRole(Test::meta_referedbyTestRef, Test::meta, ::FCSL::FM::TestRef::meta, "ref");
			::Uml::SetAssocRole(Test::meta_referedbyTestInstance, Test::meta, ::FCSL::FM::TestInstance::meta, "ref");
			::Uml::SetAssocRole(Control::meta_dstCtrl2Device, Control::meta, ::FCSL::FM::Device::meta, "srcCtrl2Device");
			::FCSL::FM::Device::meta_srcCtrl2Device_rev = Control::meta_dstCtrl2Device;
			::Uml::SetAssocRole(FailureModeRef::meta_ref, FailureModeRef::meta, ::FCSL::FM::FailureMode::meta, "referedbyFailureModeRef");
			::Uml::SetAssocRole(DiscrepancyInPort::meta_dstDIP2D, DiscrepancyInPort::meta, ::FCSL::FM::Discrepancy::meta, "srcDIP2D");
			::FCSL::FM::Discrepancy::meta_srcDIP2D_rev = DiscrepancyInPort::meta_dstDIP2D;
			::Uml::SetAssocRole(DataPort::meta_srcSignalflowConn, DataPort::meta, ::FCSL::FM::DataPort::meta, "dstSignalflowConn");
			::FCSL::FM::DataPort::meta_dstSignalflowConn_rev = DataPort::meta_srcSignalflowConn;
			::Uml::SetAssocRole(DataPort::meta_dstSignalflowConn, DataPort::meta, ::FCSL::FM::DataPort::meta, "srcSignalflowConn");
			::FCSL::FM::DataPort::meta_srcSignalflowConn_rev = DataPort::meta_dstSignalflowConn;
			::Uml::SetAssocRole(DataPort::meta_srcSig2Dataport, DataPort::meta, ::FCSL::FM::Signal::meta, "dstSig2Dataport");
			::FCSL::FM::Signal::meta_dstSig2Dataport_rev = DataPort::meta_srcSig2Dataport;
			::Uml::SetAssocRole(TestInstance::meta_srcD2Test, TestInstance::meta, ::FCSL::FM::Discrepancy::meta, "dstD2Test");
			::FCSL::FM::Discrepancy::meta_dstD2Test_rev = TestInstance::meta_srcD2Test;
			::Uml::SetAssocRole(TestInstance::meta_srcDOP2T, TestInstance::meta, ::FCSL::FM::DiscrepancyOutPort::meta, "dstDOP2T");
			::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2T_rev = TestInstance::meta_srcDOP2T;
			::Uml::SetAssocRole(TestInstance::meta_ref, TestInstance::meta, ::FCSL::FM::Test::meta, "referedbyTestInstance");
			::Uml::SetAssocRole(Signal::meta_dstSig2Dataport, Signal::meta, ::FCSL::FM::DataPort::meta, "srcSig2Dataport");
			::FCSL::FM::DataPort::meta_srcSig2Dataport_rev = Signal::meta_dstSig2Dataport;
			::Uml::SetAssocRole(TestRef::meta_ref, TestRef::meta, ::FCSL::FM::Test::meta, "referedbyTestRef");
			FM2DOP::meta_srcFM2DOP_end_ = ::FCSL::FM::DiscrepancyOutPort::meta_srcFM2DOP;
			FM2DOP::meta_dstFM2DOP_end_ = ::FCSL::FM::FailureMode::meta_dstFM2DOP;
			Sig2Dataport::meta_dstSig2Dataport_end_ = ::FCSL::FM::Signal::meta_dstSig2Dataport;
			Sig2Dataport::meta_srcSig2Dataport_end_ = ::FCSL::FM::DataPort::meta_srcSig2Dataport;
			Device2Surface::meta_srcDevice2Surface_end_ = ::FCSL::FM::Surface::meta_srcDevice2Surface;
			Device2Surface::meta_dstDevice2Surface_end_ = ::FCSL::FM::Device::meta_dstDevice2Surface;
			DIP2D::meta_dstDIP2D_end_ = ::FCSL::FM::DiscrepancyInPort::meta_dstDIP2D;
			DIP2D::meta_srcDIP2D_end_ = ::FCSL::FM::Discrepancy::meta_srcDIP2D;
			FM2D::meta_srcFM2D_end_ = ::FCSL::FM::Discrepancy::meta_srcFM2D;
			FM2D::meta_dstFM2D_end_ = ::FCSL::FM::FailureMode::meta_dstFM2D;
			SignalflowConn::meta_dstSignalflowConn_end_ = ::FCSL::FM::DataPort::meta_dstSignalflowConn;
			SignalflowConn::meta_srcSignalflowConn_end_ = ::FCSL::FM::DataPort::meta_srcSignalflowConn;
			DOP2T::meta_srcDOP2T_end_ = ::FCSL::FM::TestInstance::meta_srcDOP2T;
			DOP2T::meta_dstDOP2T_end_ = ::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2T;
			Ctrl2Device::meta_dstCtrl2Device_end_ = ::FCSL::FM::Control::meta_dstCtrl2Device;
			Ctrl2Device::meta_srcCtrl2Device_end_ = ::FCSL::FM::Device::meta_srcCtrl2Device;
			D2Test::meta_srcD2Test_end_ = ::FCSL::FM::TestInstance::meta_srcD2Test;
			D2Test::meta_dstD2Test_end_ = ::FCSL::FM::Discrepancy::meta_dstD2Test;
			DOP2D::meta_dstDOP2D_end_ = ::FCSL::FM::DiscrepancyOutPort::meta_dstDOP2D;
			DOP2D::meta_srcDOP2D_end_ = ::FCSL::FM::Discrepancy::meta_srcDOP2D;
			D2DOP::meta_srcD2DOP_end_ = ::FCSL::FM::DiscrepancyOutPort::meta_srcD2DOP;
			D2DOP::meta_dstD2DOP_end_ = ::FCSL::FM::Discrepancy::meta_dstD2DOP;
			FailureProp::meta_srcFailureProp_end_ = ::FCSL::FM::Discrepancy::meta_srcFailureProp;
			FailureProp::meta_dstFailureProp_end_ = ::FCSL::FM::Discrepancy::meta_dstFailureProp;
			DIP2DOP::meta_dstDIP2DOP_end_ = ::FCSL::FM::DiscrepancyPort::meta_dstDIP2DOP;
			DIP2DOP::meta_srcDIP2DOP_end_ = ::FCSL::FM::DiscrepancyPort::meta_srcDIP2DOP;

			// namespaces
			
		}
	}

	namespace SLSF {
		::Uml::Namespace meta;
		::Uml::Class Dataflow::meta;
		::Uml::Class Types::meta;
		::Uml::Class Stateflow::meta;
		::Uml::Class Block::meta;
		::Uml::Class EnablePort::meta;
		::Uml::Class OutPort::meta;
		::Uml::Class Annotation::meta;
		::Uml::Class OutputPort::meta;
		::Uml::Class Parameter::meta;
		::Uml::Class InputPort::meta;
		::Uml::Class Line::meta;
		::Uml::Class InPort::meta;
		::Uml::Class Primitive::meta;
		::Uml::Class StatePort::meta;
		::Uml::Class TriggerPort::meta;
		::Uml::Class Port::meta;
		::Uml::Class System::meta;
		::Uml::Class Reference::meta;
		::Uml::Class TypeBase::meta;
		::Uml::Class Matrix::meta;
		::Uml::Class TypeBaseRef::meta;
		::Uml::Class TypeStruct::meta;
		::Uml::Class Data::meta;
		::Uml::Class ConnectorRef::meta;
		::Uml::Class State::meta;
		::Uml::Class Event::meta;
		::Uml::Class Transition::meta;
		::Uml::Class TransStart::meta;
		::Uml::Class Junction::meta;
		::Uml::Class TransConnector::meta;
		::Uml::Class History::meta;
		::Uml::Attribute Dataflow::meta_name;
		::Uml::Attribute Types::meta_name;
		::Uml::Attribute Stateflow::meta_name;
		::Uml::Attribute Block::meta_Priority;
		::Uml::Attribute Block::meta_SampleTime;
		::Uml::Attribute Block::meta_Description;
		::Uml::Attribute Block::meta_Name;
		::Uml::Attribute Block::meta_Tag;
		::Uml::Attribute Block::meta_BlockType;
		::Uml::Attribute EnablePort::meta_StatesWhenEnabling;
		::Uml::Attribute Annotation::meta_Text;
		::Uml::Attribute OutputPort::meta_Number;
		::Uml::Attribute Parameter::meta_Value;
		::Uml::Attribute InputPort::meta_Number;
		::Uml::Attribute Line::meta_Name;
		::Uml::Attribute Primitive::meta_Deadline;
		::Uml::Attribute Primitive::meta_Period;
		::Uml::Attribute Primitive::meta_ExecutionTime;
		::Uml::Attribute TriggerPort::meta_TriggerType;
		::Uml::Attribute Reference::meta_SourceType;
		::Uml::Attribute Reference::meta_SourceBlock;
		::Uml::Attribute Matrix::meta_rows;
		::Uml::Attribute Matrix::meta_columns;
		::Uml::Attribute Matrix::meta_Type;
		::Uml::Attribute TypeBaseRef::meta_MemberIndex;
		::Uml::Attribute TypeStruct::meta_MemberCount;
		::Uml::Attribute Data::meta_Description;
		::Uml::Attribute Data::meta_Port;
		::Uml::Attribute Data::meta_Scope;
		::Uml::Attribute Data::meta_Name;
		::Uml::Attribute Data::meta_DataType;
		::Uml::Attribute Data::meta_Units;
		::Uml::Attribute Data::meta_Max;
		::Uml::Attribute Data::meta_Min;
		::Uml::Attribute Data::meta_InitialValue;
		::Uml::Attribute Data::meta_ArrayFirstIndex;
		::Uml::Attribute Data::meta_ArraySize;
		::Uml::Attribute State::meta_ExitAction;
		::Uml::Attribute State::meta_Order;
		::Uml::Attribute State::meta_DuringAction;
		::Uml::Attribute State::meta_EnterAction;
		::Uml::Attribute State::meta_Name;
		::Uml::Attribute State::meta_Decomposition;
		::Uml::Attribute Event::meta_Description;
		::Uml::Attribute Event::meta_Port;
		::Uml::Attribute Event::meta_Scope;
		::Uml::Attribute Event::meta_Name;
		::Uml::Attribute Event::meta_Trigger;
		::Uml::Attribute Transition::meta_ConditionAction;
		::Uml::Attribute Transition::meta_Order;
		::Uml::Attribute Transition::meta_Action;
		::Uml::Attribute Transition::meta_Guard;
		::Uml::Attribute Transition::meta_Trigger;
		::Uml::AssociationRole Line::meta_dstLine_end_;
		::Uml::AssociationRole Line::meta_srcLine_end_;
		::Uml::AssociationRole Port::meta_srcLine, Port::meta_srcLine_rev;
		::Uml::AssociationRole Port::meta_dstLine, Port::meta_dstLine_rev;
		::Uml::AssociationRole System::meta_referedbySystemRef;
		::Uml::AssociationRole TypeBase::meta_referedbyTypeStructRef;
		::Uml::AssociationRole TypeBaseRef::meta_ref;
		::Uml::AssociationRole ConnectorRef::meta_ref;
		::Uml::AssociationRole Transition::meta_srcTransition_end_;
		::Uml::AssociationRole Transition::meta_dstTransition_end_;
		::Uml::AssociationRole TransConnector::meta_referedbyConnectorRef;
		::Uml::AssociationRole TransConnector::meta_dstTransition, TransConnector::meta_dstTransition_rev;
		::Uml::AssociationRole TransConnector::meta_srcTransition, TransConnector::meta_srcTransition_rev;
		::Uml::CompositionParentRole Dataflow::meta_RootFolder_parent;
		::Uml::CompositionParentRole Types::meta_RootFolder_parent;
		::Uml::CompositionParentRole Stateflow::meta_RootFolder_parent;
		::Uml::CompositionParentRole Block::meta_System_parent;
		::Uml::CompositionParentRole Annotation::meta_Block_parent;
		::Uml::CompositionParentRole Parameter::meta_Parameter_Block_parent;
		::Uml::CompositionParentRole Line::meta_Line_Block_parent;
		::Uml::CompositionParentRole Port::meta_Block_parent;
		::Uml::CompositionParentRole System::meta_Dataflow_parent;
		::Uml::CompositionParentRole TypeBase::meta_Types_parent;
		::Uml::CompositionParentRole TypeBaseRef::meta_Port_parent;
		::Uml::CompositionParentRole TypeBaseRef::meta_TypeStruct_parent;
		::Uml::CompositionParentRole Data::meta_State_parent;
		::Uml::CompositionParentRole ConnectorRef::meta_Block_parent;
		::Uml::CompositionParentRole State::meta_Stateflow_parent;
		::Uml::CompositionParentRole Event::meta_State_parent;
		::Uml::CompositionParentRole Transition::meta_Transition_State_parent;
		::Uml::CompositionParentRole TransConnector::meta_State_parent;
		::Uml::CompositionChildRole Dataflow::meta_System_children;
		::Uml::CompositionChildRole Types::meta_TypeBase_children;
		::Uml::CompositionChildRole Stateflow::meta_State_children;
		::Uml::CompositionChildRole Block::meta_Annotation_children;
		::Uml::CompositionChildRole Block::meta_Parameter;
		::Uml::CompositionChildRole Block::meta_Line;
		::Uml::CompositionChildRole Block::meta_Port_children;
		::Uml::CompositionChildRole Block::meta_ConnectorRef_children;
		::Uml::CompositionChildRole Port::meta_TypeBaseRef_child;
		::Uml::CompositionChildRole System::meta_Block_children;
		::Uml::CompositionChildRole TypeStruct::meta_TypeBaseRef_children;
		::Uml::CompositionChildRole State::meta_Event_children;
		::Uml::CompositionChildRole State::meta_TransConnector_children;
		::Uml::CompositionChildRole State::meta_Transition;
		::Uml::CompositionChildRole State::meta_Data_children;
		::Uml::Constraint Block::meta_UniqueConnectorNames;
		::Uml::Constraint EnablePort::meta_EPParentIsSubsystemOrSystem;
		::Uml::Constraint EnablePort::meta_EPInSubsystemOnlyConnectToEPInSystem;
		::Uml::Constraint EnablePort::meta_EPConnectedByPortInParentParent;
		::Uml::Constraint EnablePort::meta_EPtoNestedIPTPEPBPOnly;
		::Uml::Constraint EnablePort::meta_EPConnectedAsDstAtLeastOnce;
		::Uml::Constraint EnablePort::meta_OnlyOneEP;
		::Uml::Constraint EnablePort::meta_EnableParentInSubsystemMustConnectDownToSystem;
		::Uml::Constraint OutputPort::meta_NestedOPtoOPorNestedOPtoIP;
		::Uml::Constraint InputPort::meta_IPtoNestedIPTPEPBPOnly;
		::Uml::Constraint InputPort::meta_IPInSubsystemOnlyConnectToIPInSystem;
		::Uml::Constraint TriggerPort::meta_TPParentIsSubsystemOrSystem;
		::Uml::Constraint TriggerPort::meta_OnlyOneTP;
		::Uml::Constraint TriggerPort::meta_TPConnectedByPortInParentParent;
		::Uml::Constraint TriggerPort::meta_TPtoNestedIPTPEPBPOnly;
		::Uml::Constraint TriggerPort::meta_TPConnectedAsDstAtLeastOnce;
		::Uml::Constraint TriggerPort::meta_TPInSubsystemOnlyConnectToTPInSystem;
		::Uml::Constraint TriggerPort::meta_TriggerParentInSubsystemMustConnectDownToSystem;
		::Uml::Constraint System::meta_UniqueConnectorNames1;
		::Uml::Constraint State::meta_SingleHistory;
		::Uml::Constraint TransStart::meta_TransStartRestrict;
		::Uml::Constraint Junction::meta_JunctNotToSelf;
		void Creates()
		{
			Dataflow::meta = ::Uml::Class::Create(meta);
			Types::meta = ::Uml::Class::Create(meta);
			Stateflow::meta = ::Uml::Class::Create(meta);
			Block::meta = ::Uml::Class::Create(meta);
			EnablePort::meta = ::Uml::Class::Create(meta);
			OutPort::meta = ::Uml::Class::Create(meta);
			Annotation::meta = ::Uml::Class::Create(meta);
			OutputPort::meta = ::Uml::Class::Create(meta);
			Parameter::meta = ::Uml::Class::Create(meta);
			InputPort::meta = ::Uml::Class::Create(meta);
			Line::meta = ::Uml::Class::Create(meta);
			InPort::meta = ::Uml::Class::Create(meta);
			Primitive::meta = ::Uml::Class::Create(meta);
			StatePort::meta = ::Uml::Class::Create(meta);
			TriggerPort::meta = ::Uml::Class::Create(meta);
			Port::meta = ::Uml::Class::Create(meta);
			System::meta = ::Uml::Class::Create(meta);
			Reference::meta = ::Uml::Class::Create(meta);
			TypeBase::meta = ::Uml::Class::Create(meta);
			Matrix::meta = ::Uml::Class::Create(meta);
			TypeBaseRef::meta = ::Uml::Class::Create(meta);
			TypeStruct::meta = ::Uml::Class::Create(meta);
			Data::meta = ::Uml::Class::Create(meta);
			ConnectorRef::meta = ::Uml::Class::Create(meta);
			State::meta = ::Uml::Class::Create(meta);
			Event::meta = ::Uml::Class::Create(meta);
			Transition::meta = ::Uml::Class::Create(meta);
			TransStart::meta = ::Uml::Class::Create(meta);
			Junction::meta = ::Uml::Class::Create(meta);
			TransConnector::meta = ::Uml::Class::Create(meta);
			History::meta = ::Uml::Class::Create(meta);
			Dataflow::meta_name = ::Uml::Attribute::Create(Dataflow::meta);
			Types::meta_name = ::Uml::Attribute::Create(Types::meta);
			Stateflow::meta_name = ::Uml::Attribute::Create(Stateflow::meta);
			Block::meta_Priority = ::Uml::Attribute::Create(Block::meta);
			Block::meta_SampleTime = ::Uml::Attribute::Create(Block::meta);
			Block::meta_Description = ::Uml::Attribute::Create(Block::meta);
			Block::meta_Name = ::Uml::Attribute::Create(Block::meta);
			Block::meta_Tag = ::Uml::Attribute::Create(Block::meta);
			Block::meta_BlockType = ::Uml::Attribute::Create(Block::meta);
			Block::meta_UniqueConnectorNames = ::Uml::Constraint::Create(Block::meta);
			EnablePort::meta_StatesWhenEnabling = ::Uml::Attribute::Create(EnablePort::meta);
			EnablePort::meta_EPParentIsSubsystemOrSystem = ::Uml::Constraint::Create(EnablePort::meta);
			EnablePort::meta_EPInSubsystemOnlyConnectToEPInSystem = ::Uml::Constraint::Create(EnablePort::meta);
			EnablePort::meta_EPConnectedByPortInParentParent = ::Uml::Constraint::Create(EnablePort::meta);
			EnablePort::meta_EPtoNestedIPTPEPBPOnly = ::Uml::Constraint::Create(EnablePort::meta);
			EnablePort::meta_EPConnectedAsDstAtLeastOnce = ::Uml::Constraint::Create(EnablePort::meta);
			EnablePort::meta_OnlyOneEP = ::Uml::Constraint::Create(EnablePort::meta);
			EnablePort::meta_EnableParentInSubsystemMustConnectDownToSystem = ::Uml::Constraint::Create(EnablePort::meta);
			Annotation::meta_Text = ::Uml::Attribute::Create(Annotation::meta);
			OutputPort::meta_Number = ::Uml::Attribute::Create(OutputPort::meta);
			OutputPort::meta_NestedOPtoOPorNestedOPtoIP = ::Uml::Constraint::Create(OutputPort::meta);
			Parameter::meta_Value = ::Uml::Attribute::Create(Parameter::meta);
			InputPort::meta_Number = ::Uml::Attribute::Create(InputPort::meta);
			InputPort::meta_IPtoNestedIPTPEPBPOnly = ::Uml::Constraint::Create(InputPort::meta);
			InputPort::meta_IPInSubsystemOnlyConnectToIPInSystem = ::Uml::Constraint::Create(InputPort::meta);
			Line::meta_Name = ::Uml::Attribute::Create(Line::meta);
			Primitive::meta_Deadline = ::Uml::Attribute::Create(Primitive::meta);
			Primitive::meta_Period = ::Uml::Attribute::Create(Primitive::meta);
			Primitive::meta_ExecutionTime = ::Uml::Attribute::Create(Primitive::meta);
			TriggerPort::meta_TriggerType = ::Uml::Attribute::Create(TriggerPort::meta);
			TriggerPort::meta_TPParentIsSubsystemOrSystem = ::Uml::Constraint::Create(TriggerPort::meta);
			TriggerPort::meta_OnlyOneTP = ::Uml::Constraint::Create(TriggerPort::meta);
			TriggerPort::meta_TPConnectedByPortInParentParent = ::Uml::Constraint::Create(TriggerPort::meta);
			TriggerPort::meta_TPtoNestedIPTPEPBPOnly = ::Uml::Constraint::Create(TriggerPort::meta);
			TriggerPort::meta_TPConnectedAsDstAtLeastOnce = ::Uml::Constraint::Create(TriggerPort::meta);
			TriggerPort::meta_TPInSubsystemOnlyConnectToTPInSystem = ::Uml::Constraint::Create(TriggerPort::meta);
			TriggerPort::meta_TriggerParentInSubsystemMustConnectDownToSystem = ::Uml::Constraint::Create(TriggerPort::meta);
			System::meta_UniqueConnectorNames1 = ::Uml::Constraint::Create(System::meta);
			Reference::meta_SourceType = ::Uml::Attribute::Create(Reference::meta);
			Reference::meta_SourceBlock = ::Uml::Attribute::Create(Reference::meta);
			Matrix::meta_rows = ::Uml::Attribute::Create(Matrix::meta);
			Matrix::meta_columns = ::Uml::Attribute::Create(Matrix::meta);
			Matrix::meta_Type = ::Uml::Attribute::Create(Matrix::meta);
			TypeBaseRef::meta_MemberIndex = ::Uml::Attribute::Create(TypeBaseRef::meta);
			TypeStruct::meta_MemberCount = ::Uml::Attribute::Create(TypeStruct::meta);
			Data::meta_Description = ::Uml::Attribute::Create(Data::meta);
			Data::meta_Port = ::Uml::Attribute::Create(Data::meta);
			Data::meta_Scope = ::Uml::Attribute::Create(Data::meta);
			Data::meta_Name = ::Uml::Attribute::Create(Data::meta);
			Data::meta_DataType = ::Uml::Attribute::Create(Data::meta);
			Data::meta_Units = ::Uml::Attribute::Create(Data::meta);
			Data::meta_Max = ::Uml::Attribute::Create(Data::meta);
			Data::meta_Min = ::Uml::Attribute::Create(Data::meta);
			Data::meta_InitialValue = ::Uml::Attribute::Create(Data::meta);
			Data::meta_ArrayFirstIndex = ::Uml::Attribute::Create(Data::meta);
			Data::meta_ArraySize = ::Uml::Attribute::Create(Data::meta);
			State::meta_ExitAction = ::Uml::Attribute::Create(State::meta);
			State::meta_Order = ::Uml::Attribute::Create(State::meta);
			State::meta_DuringAction = ::Uml::Attribute::Create(State::meta);
			State::meta_EnterAction = ::Uml::Attribute::Create(State::meta);
			State::meta_Name = ::Uml::Attribute::Create(State::meta);
			State::meta_Decomposition = ::Uml::Attribute::Create(State::meta);
			State::meta_SingleHistory = ::Uml::Constraint::Create(State::meta);
			Event::meta_Description = ::Uml::Attribute::Create(Event::meta);
			Event::meta_Port = ::Uml::Attribute::Create(Event::meta);
			Event::meta_Scope = ::Uml::Attribute::Create(Event::meta);
			Event::meta_Name = ::Uml::Attribute::Create(Event::meta);
			Event::meta_Trigger = ::Uml::Attribute::Create(Event::meta);
			Transition::meta_ConditionAction = ::Uml::Attribute::Create(Transition::meta);
			Transition::meta_Order = ::Uml::Attribute::Create(Transition::meta);
			Transition::meta_Action = ::Uml::Attribute::Create(Transition::meta);
			Transition::meta_Guard = ::Uml::Attribute::Create(Transition::meta);
			Transition::meta_Trigger = ::Uml::Attribute::Create(Transition::meta);
			TransStart::meta_TransStartRestrict = ::Uml::Constraint::Create(TransStart::meta);
			Junction::meta_JunctNotToSelf = ::Uml::Constraint::Create(Junction::meta);
		}
		void InitClassesAttributes()
		{
			Dataflow::meta.name() = "Dataflow";
			Dataflow::meta.isAbstract() = false;
			Dataflow::meta.stereotype() = "Folder";
			Types::meta.name() = "Types";
			Types::meta.isAbstract() = false;
			Types::meta.stereotype() = "Folder";
			Stateflow::meta.name() = "Stateflow";
			Stateflow::meta.isAbstract() = false;
			Stateflow::meta.stereotype() = "Folder";
			Block::meta.name() = "Block";
			Block::meta.isAbstract() = true;
			Block::meta.stereotype() = "Model";
			EnablePort::meta.name() = "EnablePort";
			EnablePort::meta.isAbstract() = false;
			EnablePort::meta.stereotype() = "Model";
			OutPort::meta.name() = "OutPort";
			OutPort::meta.isAbstract() = true;
			OutPort::meta.stereotype() = "Model";
			Annotation::meta.name() = "Annotation";
			Annotation::meta.isAbstract() = false;
			Annotation::meta.stereotype() = "Atom";
			OutputPort::meta.name() = "OutputPort";
			OutputPort::meta.isAbstract() = false;
			OutputPort::meta.stereotype() = "Model";
			Parameter::meta.name() = "Parameter";
			Parameter::meta.isAbstract() = false;
			Parameter::meta.stereotype() = "Atom";
			InputPort::meta.name() = "InputPort";
			InputPort::meta.isAbstract() = false;
			InputPort::meta.stereotype() = "Model";
			Line::meta.name() = "Line";
			Line::meta.isAbstract() = false;
			Line::meta.stereotype() = "Connection";
			InPort::meta.name() = "InPort";
			InPort::meta.isAbstract() = true;
			InPort::meta.stereotype() = "Model";
			Primitive::meta.name() = "Primitive";
			Primitive::meta.isAbstract() = false;
			Primitive::meta.stereotype() = "Model";
			StatePort::meta.name() = "StatePort";
			StatePort::meta.isAbstract() = false;
			StatePort::meta.stereotype() = "Model";
			TriggerPort::meta.name() = "TriggerPort";
			TriggerPort::meta.isAbstract() = false;
			TriggerPort::meta.stereotype() = "Model";
			Port::meta.name() = "Port";
			Port::meta.isAbstract() = true;
			Port::meta.stereotype() = "Model";
			System::meta.name() = "System";
			System::meta.isAbstract() = false;
			System::meta.stereotype() = "Model";
			Reference::meta.name() = "Reference";
			Reference::meta.isAbstract() = false;
			Reference::meta.stereotype() = "Model";
			TypeBase::meta.name() = "TypeBase";
			TypeBase::meta.isAbstract() = true;
			TypeBase::meta.stereotype() = "FCO";
			Matrix::meta.name() = "Matrix";
			Matrix::meta.isAbstract() = false;
			Matrix::meta.stereotype() = "Atom";
			TypeBaseRef::meta.name() = "TypeBaseRef";
			TypeBaseRef::meta.isAbstract() = false;
			TypeBaseRef::meta.stereotype() = "Reference";
			TypeStruct::meta.name() = "TypeStruct";
			TypeStruct::meta.isAbstract() = false;
			TypeStruct::meta.stereotype() = "Model";
			Data::meta.name() = "Data";
			Data::meta.isAbstract() = false;
			Data::meta.stereotype() = "Atom";
			ConnectorRef::meta.name() = "ConnectorRef";
			ConnectorRef::meta.isAbstract() = false;
			ConnectorRef::meta.stereotype() = "Reference";
			State::meta.name() = "State";
			State::meta.isAbstract() = false;
			State::meta.stereotype() = "Model";
			Event::meta.name() = "Event";
			Event::meta.isAbstract() = false;
			Event::meta.stereotype() = "Atom";
			Transition::meta.name() = "Transition";
			Transition::meta.isAbstract() = false;
			Transition::meta.stereotype() = "Connection";
			TransStart::meta.name() = "TransStart";
			TransStart::meta.isAbstract() = false;
			TransStart::meta.stereotype() = "Atom";
			Junction::meta.name() = "Junction";
			Junction::meta.isAbstract() = false;
			Junction::meta.stereotype() = "Atom";
			TransConnector::meta.name() = "TransConnector";
			TransConnector::meta.isAbstract() = true;
			TransConnector::meta.stereotype() = "FCO";
			History::meta.name() = "History";
			History::meta.isAbstract() = false;
			History::meta.stereotype() = "Atom";
			
			Dataflow::meta_name.name() = "name";
			Dataflow::meta_name.type() = "String";
			Dataflow::meta_name.min() = 0;
			Dataflow::meta_name.max() = 1;
			Dataflow::meta_name.nonpersistent() = false;
			Dataflow::meta_name.registry() = false;
			Dataflow::meta_name.ordered() = false;
			Dataflow::meta_name.visibility() = "public";
			Dataflow::meta_name.defvalue() = vector<string>();
			Types::meta_name.name() = "name";
			Types::meta_name.type() = "String";
			Types::meta_name.min() = 0;
			Types::meta_name.max() = 1;
			Types::meta_name.nonpersistent() = false;
			Types::meta_name.registry() = false;
			Types::meta_name.ordered() = false;
			Types::meta_name.visibility() = "public";
			Types::meta_name.defvalue() = vector<string>();
			Stateflow::meta_name.name() = "name";
			Stateflow::meta_name.type() = "String";
			Stateflow::meta_name.min() = 0;
			Stateflow::meta_name.max() = 1;
			Stateflow::meta_name.nonpersistent() = false;
			Stateflow::meta_name.registry() = false;
			Stateflow::meta_name.ordered() = false;
			Stateflow::meta_name.visibility() = "public";
			Stateflow::meta_name.defvalue() = vector<string>();
			Block::meta_Priority.name() = "Priority";
			Block::meta_Priority.type() = "Integer";
			Block::meta_Priority.min() = 1;
			Block::meta_Priority.max() = 1;
			Block::meta_Priority.nonpersistent() = false;
			Block::meta_Priority.registry() = false;
			Block::meta_Priority.ordered() = false;
			Block::meta_Priority.visibility() = "public";
			Block::meta_Priority.defvalue() = vector<string>();
			Block::meta_SampleTime.name() = "SampleTime";
			Block::meta_SampleTime.type() = "Real";
			Block::meta_SampleTime.min() = 1;
			Block::meta_SampleTime.max() = 1;
			Block::meta_SampleTime.nonpersistent() = false;
			Block::meta_SampleTime.registry() = false;
			Block::meta_SampleTime.ordered() = false;
			Block::meta_SampleTime.visibility() = "public";
			Block::meta_SampleTime.defvalue() = vector<string>();
			Block::meta_Description.name() = "Description";
			Block::meta_Description.type() = "String";
			Block::meta_Description.min() = 1;
			Block::meta_Description.max() = 1;
			Block::meta_Description.nonpersistent() = false;
			Block::meta_Description.registry() = false;
			Block::meta_Description.ordered() = false;
			Block::meta_Description.visibility() = "public";
			Block::meta_Description.defvalue() = vector<string>();
			Block::meta_Name.name() = "Name";
			Block::meta_Name.type() = "String";
			Block::meta_Name.min() = 1;
			Block::meta_Name.max() = 1;
			Block::meta_Name.nonpersistent() = false;
			Block::meta_Name.registry() = false;
			Block::meta_Name.ordered() = false;
			Block::meta_Name.visibility() = "public";
			Block::meta_Name.defvalue() = vector<string>();
			Block::meta_Tag.name() = "Tag";
			Block::meta_Tag.type() = "String";
			Block::meta_Tag.min() = 1;
			Block::meta_Tag.max() = 1;
			Block::meta_Tag.nonpersistent() = false;
			Block::meta_Tag.registry() = false;
			Block::meta_Tag.ordered() = false;
			Block::meta_Tag.visibility() = "public";
			Block::meta_Tag.defvalue() = vector<string>();
			Block::meta_BlockType.name() = "BlockType";
			Block::meta_BlockType.type() = "String";
			Block::meta_BlockType.min() = 1;
			Block::meta_BlockType.max() = 1;
			Block::meta_BlockType.nonpersistent() = false;
			Block::meta_BlockType.registry() = false;
			Block::meta_BlockType.ordered() = false;
			Block::meta_BlockType.visibility() = "public";
			Block::meta_BlockType.defvalue() = vector<string>();
			Block::meta_UniqueConnectorNames.name() = "UniqueConnectorNames";
			Block::meta_UniqueConnectorNames.description() = "This Block's Port objects must be uniquely named.";
			Block::meta_UniqueConnectorNames.expression() = "let ports = self.modelParts( InputPort ) + self.modelParts( OutputPort ) + self.modelParts( TriggerPort ) + self.modelParts( EnablePort ) in\nports->isUnique( p | p.name )\n";
			vector<string> EnablePort_StatesWhenEnabling_dva;
			EnablePort_StatesWhenEnabling_dva.push_back("held");
			EnablePort::meta_StatesWhenEnabling.name() = "StatesWhenEnabling";
			EnablePort::meta_StatesWhenEnabling.type() = "String";
			EnablePort::meta_StatesWhenEnabling.min() = 1;
			EnablePort::meta_StatesWhenEnabling.max() = 1;
			EnablePort::meta_StatesWhenEnabling.nonpersistent() = false;
			EnablePort::meta_StatesWhenEnabling.registry() = false;
			EnablePort::meta_StatesWhenEnabling.ordered() = false;
			EnablePort::meta_StatesWhenEnabling.visibility() = "public";
			EnablePort::meta_StatesWhenEnabling.defvalue() = EnablePort_StatesWhenEnabling_dva;
			EnablePort::meta_EPParentIsSubsystemOrSystem.name() = "EPParentIsSubsystemOrSystem";
			EnablePort::meta_EPParentIsSubsystemOrSystem.description() = "This EnablePort can not be inside a Primitive.";
			EnablePort::meta_EPParentIsSubsystemOrSystem.expression() = "let p = self.parent() in\np.oclIsKindOf( System ) or p.oclIsKindOf( Reference )";
			EnablePort::meta_EPInSubsystemOnlyConnectToEPInSystem.name() = "EPInSubsystemOnlyConnectToEPInSystem";
			EnablePort::meta_EPInSubsystemOnlyConnectToEPInSystem.description() = "An EnablePort in a Subsystem can only connect to an EnablePort in the nested System.";
			EnablePort::meta_EPInSubsystemOnlyConnectToEPInSystem.expression() = "let parent = self.parent() in\nparent.oclIsKindOf( System )\nimplies\nself.reverseConnectedFCOs( \"src\" ) -> forAll( p | p.oclIsKindOf( EnablePort ) and p.parent().parent() = parent )\n";
			EnablePort::meta_EPConnectedByPortInParentParent.name() = "EPConnectedByPortInParentParent";
			EnablePort::meta_EPConnectedByPortInParentParent.description() = "This EnablePort may only be connected by a Connector in the parent's parent.";
			EnablePort::meta_EPConnectedByPortInParentParent.expression() = "let parent2 = self.parent().parent() in\nself.reverseConnectedFCOs( \"dst\" ) -> forAll(  p | p.parent() = parent2 or p.oclIsKindOf( OutputPort )  )";
			EnablePort::meta_EPtoNestedIPTPEPBPOnly.name() = "EPtoNestedIPTPEPBPOnly";
			EnablePort::meta_EPtoNestedIPTPEPBPOnly.description() = "This EnablePort may only connect to an InputPort/TriggerPort/EnablePort of a nested Subsystem, Reference or Primitive.";
			EnablePort::meta_EPtoNestedIPTPEPBPOnly.expression() = "let parent = self.parent() in\nself.reverseConnectedFCOs( \"src\" ) -> \n   forAll( p |\n      p.parent().parent() = parent and (  p.oclIsKindOf( InputPort ) or p.oclIsKindOf( TriggerPort ) or p.oclIsKindOf( EnablePort )  )\n   )";
			EnablePort::meta_EPConnectedAsDstAtLeastOnce.name() = "EPConnectedAsDstAtLeastOnce";
			EnablePort::meta_EPConnectedAsDstAtLeastOnce.description() = "This EnablePort must be connected as a destination object.";
			EnablePort::meta_EPConnectedAsDstAtLeastOnce.expression() = "self.reverseConnectedFCOs( \"dst\" )->size > 0\n";
			EnablePort::meta_OnlyOneEP.name() = "OnlyOneEP";
			EnablePort::meta_OnlyOneEP.description() = "There can only be, at most, one EnablePort created in here.";
			EnablePort::meta_OnlyOneEP.expression() = "self.parent().oclAsType( gme::Model ).modelParts( EnablePort ) -> size < 2";
			EnablePort::meta_EnableParentInSubsystemMustConnectDownToSystem.name() = "EnableParentInSubsystemMustConnectDownToSystem";
			EnablePort::meta_EnableParentInSubsystemMustConnectDownToSystem.description() = "This EnablePort must connect to an EnablePort inside a nested System.";
			EnablePort::meta_EnableParentInSubsystemMustConnectDownToSystem.expression() = "let parent : gme::Model = self.parent() in\nif ( parent.oclIsKindOf( System ) and parent.modelParts() -> size > 0 ) then\n   let srcs = self.reverseConnectedFCOs( \"src\" ) in\n   srcs->size = 1 and srcs->forAll(  p | p.oclIsKindOf( EnablePort )  )\nelse\n   true\nendif";
			Annotation::meta_Text.name() = "Text";
			Annotation::meta_Text.type() = "String";
			Annotation::meta_Text.min() = 1;
			Annotation::meta_Text.max() = 1;
			Annotation::meta_Text.nonpersistent() = false;
			Annotation::meta_Text.registry() = false;
			Annotation::meta_Text.ordered() = false;
			Annotation::meta_Text.visibility() = "public";
			Annotation::meta_Text.defvalue() = vector<string>();
			OutputPort::meta_Number.name() = "Number";
			OutputPort::meta_Number.type() = "Integer";
			OutputPort::meta_Number.min() = 1;
			OutputPort::meta_Number.max() = 1;
			OutputPort::meta_Number.nonpersistent() = false;
			OutputPort::meta_Number.registry() = false;
			OutputPort::meta_Number.ordered() = false;
			OutputPort::meta_Number.visibility() = "public";
			OutputPort::meta_Number.defvalue() = vector<string>();
			OutputPort::meta_NestedOPtoOPorNestedOPtoIP.name() = "NestedOPtoOPorNestedOPtoIP";
			OutputPort::meta_NestedOPtoOPorNestedOPtoIP.description() = "This OutputPort may only connect to a nested InputPort/TriggerPort/EnablePort or to an OutputPort in the parent System or Subsystem.";
			OutputPort::meta_NestedOPtoOPorNestedOPtoIP.expression() = "if (self.parent().oclAsType( gme::Model ).referencedBy()->size > 0) then \n  true \nelse\n  let parent2 = self.parent().parent() in\n   self.reverseConnectedFCOs( \"src\" ) -> forAll( p |\n     let pParent = p.parent() in\n     pParent = parent2 and p.oclIsKindOf( OutputPort ) \n     or\n     pParent.parent() = parent2 and (  p.oclIsKindOf( InputPort ) or p.oclIsKindOf( TriggerPort ) or p.oclIsKindOf( EnablePort )  )\n)\nendif";
			Parameter::meta_Value.name() = "Value";
			Parameter::meta_Value.type() = "String";
			Parameter::meta_Value.min() = 1;
			Parameter::meta_Value.max() = 1;
			Parameter::meta_Value.nonpersistent() = false;
			Parameter::meta_Value.registry() = false;
			Parameter::meta_Value.ordered() = false;
			Parameter::meta_Value.visibility() = "public";
			Parameter::meta_Value.defvalue() = vector<string>();
			InputPort::meta_Number.name() = "Number";
			InputPort::meta_Number.type() = "Integer";
			InputPort::meta_Number.min() = 1;
			InputPort::meta_Number.max() = 1;
			InputPort::meta_Number.nonpersistent() = false;
			InputPort::meta_Number.registry() = false;
			InputPort::meta_Number.ordered() = false;
			InputPort::meta_Number.visibility() = "public";
			InputPort::meta_Number.defvalue() = vector<string>();
			InputPort::meta_IPtoNestedIPTPEPBPOnly.name() = "IPtoNestedIPTPEPBPOnly";
			InputPort::meta_IPtoNestedIPTPEPBPOnly.description() = "This InputPort may only connect to an InputPort/TriggerPort/EnablePort of a nested Subsystem, Reference or Primitive.  It may also connect  to an OutputPort in the same parent.";
			InputPort::meta_IPtoNestedIPTPEPBPOnly.expression() = "let parent = self.parent() in\nself.reverseConnectedFCOs( \"src\" ) -> forAll( p|\n   let pParent = p.parent() in\n   pParent.parent() = parent and (  p.oclIsKindOf( InputPort ) or p.oclIsKindOf( TriggerPort ) or p.oclIsKindOf( EnablePort )  )\n   or\n   p.oclIsKindOf( OutputPort ) and pParent = parent and parent.oclIsKindOf( System )\n)";
			InputPort::meta_IPInSubsystemOnlyConnectToIPInSystem.name() = "IPInSubsystemOnlyConnectToIPInSystem";
			InputPort::meta_IPInSubsystemOnlyConnectToIPInSystem.description() = "An InputPort in a Subsystem can only connect to an InputPort in the nested System.";
			InputPort::meta_IPInSubsystemOnlyConnectToIPInSystem.expression() = "let parent  = self.parent() in\nparent.oclIsKindOf( System )\nimplies\nself.reverseConnectedFCOs( \"src\" ) -> forAll( p | p.oclIsKindOf( InputPort ) and p.parent().parent() = parent )\n";
			Line::meta_Name.name() = "Name";
			Line::meta_Name.type() = "String";
			Line::meta_Name.min() = 1;
			Line::meta_Name.max() = 1;
			Line::meta_Name.nonpersistent() = false;
			Line::meta_Name.registry() = false;
			Line::meta_Name.ordered() = false;
			Line::meta_Name.visibility() = "public";
			Line::meta_Name.defvalue() = vector<string>();
			Primitive::meta_Deadline.name() = "Deadline";
			Primitive::meta_Deadline.type() = "Integer";
			Primitive::meta_Deadline.min() = 1;
			Primitive::meta_Deadline.max() = 1;
			Primitive::meta_Deadline.nonpersistent() = false;
			Primitive::meta_Deadline.registry() = false;
			Primitive::meta_Deadline.ordered() = false;
			Primitive::meta_Deadline.visibility() = "public";
			Primitive::meta_Deadline.defvalue() = vector<string>();
			Primitive::meta_Period.name() = "Period";
			Primitive::meta_Period.type() = "Integer";
			Primitive::meta_Period.min() = 1;
			Primitive::meta_Period.max() = 1;
			Primitive::meta_Period.nonpersistent() = false;
			Primitive::meta_Period.registry() = false;
			Primitive::meta_Period.ordered() = false;
			Primitive::meta_Period.visibility() = "public";
			Primitive::meta_Period.defvalue() = vector<string>();
			Primitive::meta_ExecutionTime.name() = "ExecutionTime";
			Primitive::meta_ExecutionTime.type() = "Integer";
			Primitive::meta_ExecutionTime.min() = 1;
			Primitive::meta_ExecutionTime.max() = 1;
			Primitive::meta_ExecutionTime.nonpersistent() = false;
			Primitive::meta_ExecutionTime.registry() = false;
			Primitive::meta_ExecutionTime.ordered() = false;
			Primitive::meta_ExecutionTime.visibility() = "public";
			Primitive::meta_ExecutionTime.defvalue() = vector<string>();
			vector<string> TriggerPort_TriggerType_dva;
			TriggerPort_TriggerType_dva.push_back("rising");
			TriggerPort::meta_TriggerType.name() = "TriggerType";
			TriggerPort::meta_TriggerType.type() = "String";
			TriggerPort::meta_TriggerType.min() = 1;
			TriggerPort::meta_TriggerType.max() = 1;
			TriggerPort::meta_TriggerType.nonpersistent() = false;
			TriggerPort::meta_TriggerType.registry() = false;
			TriggerPort::meta_TriggerType.ordered() = false;
			TriggerPort::meta_TriggerType.visibility() = "public";
			TriggerPort::meta_TriggerType.defvalue() = TriggerPort_TriggerType_dva;
			TriggerPort::meta_TPParentIsSubsystemOrSystem.name() = "TPParentIsSubsystemOrSystem";
			TriggerPort::meta_TPParentIsSubsystemOrSystem.description() = "This TriggerPort can not be inside a Primitive.";
			TriggerPort::meta_TPParentIsSubsystemOrSystem.expression() = "let p = self.parent() in\np.oclIsKindOf( System ) or p.oclIsKindOf( Reference )";
			TriggerPort::meta_OnlyOneTP.name() = "OnlyOneTP";
			TriggerPort::meta_OnlyOneTP.description() = "There can only be, at most, one TriggerPort created in here.";
			TriggerPort::meta_OnlyOneTP.expression() = "self.parent().oclAsType( gme::Model ).modelParts( TriggerPort ) -> size < 2";
			TriggerPort::meta_TPConnectedByPortInParentParent.name() = "TPConnectedByPortInParentParent";
			TriggerPort::meta_TPConnectedByPortInParentParent.description() = "This TriggerPort may only be connected by a Connector in the parent's parent.";
			TriggerPort::meta_TPConnectedByPortInParentParent.expression() = "let parent2 = self.parent().parent() in\nself.reverseConnectedFCOs( \"dst\" ) -> forAll(  p | p.parent() = parent2 or p.oclIsKindOf( OutputPort )  )";
			TriggerPort::meta_TPtoNestedIPTPEPBPOnly.name() = "TPtoNestedIPTPEPBPOnly";
			TriggerPort::meta_TPtoNestedIPTPEPBPOnly.description() = "This TriggerPort may only connect to an InputPort/TriggerPort/EnablePort of a nested Subsystem, Reference or Primitive.";
			TriggerPort::meta_TPtoNestedIPTPEPBPOnly.expression() = "let parent = self.parent() in\nself.reverseConnectedFCOs( \"src\" ) -> forAll( p |\n   p.parent().parent() = parent and (  p.oclIsKindOf( InputPort ) or p.oclIsKindOf( TriggerPort ) or p.oclIsKindOf( EnablePort )  )\n)";
			TriggerPort::meta_TPConnectedAsDstAtLeastOnce.name() = "TPConnectedAsDstAtLeastOnce";
			TriggerPort::meta_TPConnectedAsDstAtLeastOnce.description() = "This TriggerPort must be connected as a destination object.";
			TriggerPort::meta_TPConnectedAsDstAtLeastOnce.expression() = "self.reverseConnectedFCOs( \"dst\" ) -> size > 0\n";
			TriggerPort::meta_TPInSubsystemOnlyConnectToTPInSystem.name() = "TPInSubsystemOnlyConnectToTPInSystem";
			TriggerPort::meta_TPInSubsystemOnlyConnectToTPInSystem.description() = "A TriggerPort in a Subsystem can only connect to a TriggerPort in the nested System.";
			TriggerPort::meta_TPInSubsystemOnlyConnectToTPInSystem.expression() = "let parent = self.parent() in\nparent.oclIsKindOf( System )\nimplies\nself.reverseConnectedFCOs( \"src\" ) -> forAll( p | p.oclIsKindOf( TriggerPort ) and p.parent().parent() = parent )\n";
			TriggerPort::meta_TriggerParentInSubsystemMustConnectDownToSystem.name() = "TriggerParentInSubsystemMustConnectDownToSystem";
			TriggerPort::meta_TriggerParentInSubsystemMustConnectDownToSystem.description() = "This TriggerPort must connect to an TriggerPort inside a nested System.";
			TriggerPort::meta_TriggerParentInSubsystemMustConnectDownToSystem.expression() = "let parent : gme::Model = self.parent() in\nif ( parent.oclIsKindOf( System ) and parent.modelParts() -> size > 0 ) then\n   let srcs = self.reverseConnectedFCOs( \"src\" ) in\n   srcs -> size = 1 \n   and\n   srcs -> forAll(  p | p.oclIsKindOf( TriggerPort )  )\nelse\n   true\nendif";
			System::meta_UniqueConnectorNames1.name() = "UniqueConnectorNames1";
			System::meta_UniqueConnectorNames1.description() = "This System's Port objects must be uniquely named.";
			System::meta_UniqueConnectorNames1.expression() = "let ports = self.modelParts( InputPort ) + self.modelParts( OutputPort ) + self.modelParts( TriggerPort ) + self.modelParts( EnablePort ) in\nports->isUnique( p | p.name )\n";
			Reference::meta_SourceType.name() = "SourceType";
			Reference::meta_SourceType.type() = "String";
			Reference::meta_SourceType.min() = 1;
			Reference::meta_SourceType.max() = 1;
			Reference::meta_SourceType.nonpersistent() = false;
			Reference::meta_SourceType.registry() = false;
			Reference::meta_SourceType.ordered() = false;
			Reference::meta_SourceType.visibility() = "public";
			Reference::meta_SourceType.defvalue() = vector<string>();
			Reference::meta_SourceBlock.name() = "SourceBlock";
			Reference::meta_SourceBlock.type() = "String";
			Reference::meta_SourceBlock.min() = 1;
			Reference::meta_SourceBlock.max() = 1;
			Reference::meta_SourceBlock.nonpersistent() = false;
			Reference::meta_SourceBlock.registry() = false;
			Reference::meta_SourceBlock.ordered() = false;
			Reference::meta_SourceBlock.visibility() = "public";
			Reference::meta_SourceBlock.defvalue() = vector<string>();
			Matrix::meta_rows.name() = "rows";
			Matrix::meta_rows.type() = "Integer";
			Matrix::meta_rows.min() = 1;
			Matrix::meta_rows.max() = 1;
			Matrix::meta_rows.nonpersistent() = false;
			Matrix::meta_rows.registry() = false;
			Matrix::meta_rows.ordered() = false;
			Matrix::meta_rows.visibility() = "public";
			Matrix::meta_rows.defvalue() = vector<string>();
			Matrix::meta_columns.name() = "columns";
			Matrix::meta_columns.type() = "Integer";
			Matrix::meta_columns.min() = 1;
			Matrix::meta_columns.max() = 1;
			Matrix::meta_columns.nonpersistent() = false;
			Matrix::meta_columns.registry() = false;
			Matrix::meta_columns.ordered() = false;
			Matrix::meta_columns.visibility() = "public";
			Matrix::meta_columns.defvalue() = vector<string>();
			Matrix::meta_Type.name() = "Type";
			Matrix::meta_Type.type() = "String";
			Matrix::meta_Type.min() = 1;
			Matrix::meta_Type.max() = 1;
			Matrix::meta_Type.nonpersistent() = false;
			Matrix::meta_Type.registry() = false;
			Matrix::meta_Type.ordered() = false;
			Matrix::meta_Type.visibility() = "public";
			Matrix::meta_Type.defvalue() = vector<string>();
			TypeBaseRef::meta_MemberIndex.name() = "MemberIndex";
			TypeBaseRef::meta_MemberIndex.type() = "Integer";
			TypeBaseRef::meta_MemberIndex.min() = 1;
			TypeBaseRef::meta_MemberIndex.max() = 1;
			TypeBaseRef::meta_MemberIndex.nonpersistent() = false;
			TypeBaseRef::meta_MemberIndex.registry() = false;
			TypeBaseRef::meta_MemberIndex.ordered() = false;
			TypeBaseRef::meta_MemberIndex.visibility() = "public";
			TypeBaseRef::meta_MemberIndex.defvalue() = vector<string>();
			TypeStruct::meta_MemberCount.name() = "MemberCount";
			TypeStruct::meta_MemberCount.type() = "Integer";
			TypeStruct::meta_MemberCount.min() = 1;
			TypeStruct::meta_MemberCount.max() = 1;
			TypeStruct::meta_MemberCount.nonpersistent() = false;
			TypeStruct::meta_MemberCount.registry() = false;
			TypeStruct::meta_MemberCount.ordered() = false;
			TypeStruct::meta_MemberCount.visibility() = "public";
			TypeStruct::meta_MemberCount.defvalue() = vector<string>();
			Data::meta_Description.name() = "Description";
			Data::meta_Description.type() = "String";
			Data::meta_Description.min() = 1;
			Data::meta_Description.max() = 1;
			Data::meta_Description.nonpersistent() = false;
			Data::meta_Description.registry() = false;
			Data::meta_Description.ordered() = false;
			Data::meta_Description.visibility() = "public";
			Data::meta_Description.defvalue() = vector<string>();
			Data::meta_Port.name() = "Port";
			Data::meta_Port.type() = "Integer";
			Data::meta_Port.min() = 1;
			Data::meta_Port.max() = 1;
			Data::meta_Port.nonpersistent() = false;
			Data::meta_Port.registry() = false;
			Data::meta_Port.ordered() = false;
			Data::meta_Port.visibility() = "public";
			Data::meta_Port.defvalue() = vector<string>();
			vector<string> Data_Scope_dva;
			Data_Scope_dva.push_back("LOCAL_DATA");
			Data::meta_Scope.name() = "Scope";
			Data::meta_Scope.type() = "String";
			Data::meta_Scope.min() = 1;
			Data::meta_Scope.max() = 1;
			Data::meta_Scope.nonpersistent() = false;
			Data::meta_Scope.registry() = false;
			Data::meta_Scope.ordered() = false;
			Data::meta_Scope.visibility() = "public";
			Data::meta_Scope.defvalue() = Data_Scope_dva;
			Data::meta_Name.name() = "Name";
			Data::meta_Name.type() = "String";
			Data::meta_Name.min() = 1;
			Data::meta_Name.max() = 1;
			Data::meta_Name.nonpersistent() = false;
			Data::meta_Name.registry() = false;
			Data::meta_Name.ordered() = false;
			Data::meta_Name.visibility() = "public";
			Data::meta_Name.defvalue() = vector<string>();
			Data::meta_DataType.name() = "DataType";
			Data::meta_DataType.type() = "String";
			Data::meta_DataType.min() = 1;
			Data::meta_DataType.max() = 1;
			Data::meta_DataType.nonpersistent() = false;
			Data::meta_DataType.registry() = false;
			Data::meta_DataType.ordered() = false;
			Data::meta_DataType.visibility() = "public";
			Data::meta_DataType.defvalue() = vector<string>();
			Data::meta_Units.name() = "Units";
			Data::meta_Units.type() = "String";
			Data::meta_Units.min() = 1;
			Data::meta_Units.max() = 1;
			Data::meta_Units.nonpersistent() = false;
			Data::meta_Units.registry() = false;
			Data::meta_Units.ordered() = false;
			Data::meta_Units.visibility() = "public";
			Data::meta_Units.defvalue() = vector<string>();
			Data::meta_Max.name() = "Max";
			Data::meta_Max.type() = "String";
			Data::meta_Max.min() = 1;
			Data::meta_Max.max() = 1;
			Data::meta_Max.nonpersistent() = false;
			Data::meta_Max.registry() = false;
			Data::meta_Max.ordered() = false;
			Data::meta_Max.visibility() = "public";
			Data::meta_Max.defvalue() = vector<string>();
			Data::meta_Min.name() = "Min";
			Data::meta_Min.type() = "String";
			Data::meta_Min.min() = 1;
			Data::meta_Min.max() = 1;
			Data::meta_Min.nonpersistent() = false;
			Data::meta_Min.registry() = false;
			Data::meta_Min.ordered() = false;
			Data::meta_Min.visibility() = "public";
			Data::meta_Min.defvalue() = vector<string>();
			Data::meta_InitialValue.name() = "InitialValue";
			Data::meta_InitialValue.type() = "String";
			Data::meta_InitialValue.min() = 1;
			Data::meta_InitialValue.max() = 1;
			Data::meta_InitialValue.nonpersistent() = false;
			Data::meta_InitialValue.registry() = false;
			Data::meta_InitialValue.ordered() = false;
			Data::meta_InitialValue.visibility() = "public";
			Data::meta_InitialValue.defvalue() = vector<string>();
			Data::meta_ArrayFirstIndex.name() = "ArrayFirstIndex";
			Data::meta_ArrayFirstIndex.type() = "Integer";
			Data::meta_ArrayFirstIndex.min() = 1;
			Data::meta_ArrayFirstIndex.max() = 1;
			Data::meta_ArrayFirstIndex.nonpersistent() = false;
			Data::meta_ArrayFirstIndex.registry() = false;
			Data::meta_ArrayFirstIndex.ordered() = false;
			Data::meta_ArrayFirstIndex.visibility() = "public";
			Data::meta_ArrayFirstIndex.defvalue() = vector<string>();
			Data::meta_ArraySize.name() = "ArraySize";
			Data::meta_ArraySize.type() = "Integer";
			Data::meta_ArraySize.min() = 1;
			Data::meta_ArraySize.max() = 1;
			Data::meta_ArraySize.nonpersistent() = false;
			Data::meta_ArraySize.registry() = false;
			Data::meta_ArraySize.ordered() = false;
			Data::meta_ArraySize.visibility() = "public";
			Data::meta_ArraySize.defvalue() = vector<string>();
			State::meta_ExitAction.name() = "ExitAction";
			State::meta_ExitAction.type() = "String";
			State::meta_ExitAction.min() = 1;
			State::meta_ExitAction.max() = 1;
			State::meta_ExitAction.nonpersistent() = false;
			State::meta_ExitAction.registry() = false;
			State::meta_ExitAction.ordered() = false;
			State::meta_ExitAction.visibility() = "public";
			State::meta_ExitAction.defvalue() = vector<string>();
			State::meta_Order.name() = "Order";
			State::meta_Order.type() = "String";
			State::meta_Order.min() = 1;
			State::meta_Order.max() = 1;
			State::meta_Order.nonpersistent() = false;
			State::meta_Order.registry() = false;
			State::meta_Order.ordered() = false;
			State::meta_Order.visibility() = "public";
			State::meta_Order.defvalue() = vector<string>();
			State::meta_DuringAction.name() = "DuringAction";
			State::meta_DuringAction.type() = "String";
			State::meta_DuringAction.min() = 1;
			State::meta_DuringAction.max() = 1;
			State::meta_DuringAction.nonpersistent() = false;
			State::meta_DuringAction.registry() = false;
			State::meta_DuringAction.ordered() = false;
			State::meta_DuringAction.visibility() = "public";
			State::meta_DuringAction.defvalue() = vector<string>();
			State::meta_EnterAction.name() = "EnterAction";
			State::meta_EnterAction.type() = "String";
			State::meta_EnterAction.min() = 1;
			State::meta_EnterAction.max() = 1;
			State::meta_EnterAction.nonpersistent() = false;
			State::meta_EnterAction.registry() = false;
			State::meta_EnterAction.ordered() = false;
			State::meta_EnterAction.visibility() = "public";
			State::meta_EnterAction.defvalue() = vector<string>();
			State::meta_Name.name() = "Name";
			State::meta_Name.type() = "String";
			State::meta_Name.min() = 1;
			State::meta_Name.max() = 1;
			State::meta_Name.nonpersistent() = false;
			State::meta_Name.registry() = false;
			State::meta_Name.ordered() = false;
			State::meta_Name.visibility() = "public";
			State::meta_Name.defvalue() = vector<string>();
			vector<string> State_Decomposition_dva;
			State_Decomposition_dva.push_back("OR_STATE");
			State::meta_Decomposition.name() = "Decomposition";
			State::meta_Decomposition.type() = "String";
			State::meta_Decomposition.min() = 1;
			State::meta_Decomposition.max() = 1;
			State::meta_Decomposition.nonpersistent() = false;
			State::meta_Decomposition.registry() = false;
			State::meta_Decomposition.ordered() = false;
			State::meta_Decomposition.visibility() = "public";
			State::meta_Decomposition.defvalue() = State_Decomposition_dva;
			State::meta_SingleHistory.name() = "SingleHistory";
			State::meta_SingleHistory.description() = "A state cannot have multiple history connectors.";
			State::meta_SingleHistory.expression() = "self.atomParts( History ) -> size <= 1";
			Event::meta_Description.name() = "Description";
			Event::meta_Description.type() = "String";
			Event::meta_Description.min() = 1;
			Event::meta_Description.max() = 1;
			Event::meta_Description.nonpersistent() = false;
			Event::meta_Description.registry() = false;
			Event::meta_Description.ordered() = false;
			Event::meta_Description.visibility() = "public";
			Event::meta_Description.defvalue() = vector<string>();
			Event::meta_Port.name() = "Port";
			Event::meta_Port.type() = "Integer";
			Event::meta_Port.min() = 1;
			Event::meta_Port.max() = 1;
			Event::meta_Port.nonpersistent() = false;
			Event::meta_Port.registry() = false;
			Event::meta_Port.ordered() = false;
			Event::meta_Port.visibility() = "public";
			Event::meta_Port.defvalue() = vector<string>();
			vector<string> Event_Scope_dva;
			Event_Scope_dva.push_back("LOCAL_EVENT");
			Event::meta_Scope.name() = "Scope";
			Event::meta_Scope.type() = "String";
			Event::meta_Scope.min() = 1;
			Event::meta_Scope.max() = 1;
			Event::meta_Scope.nonpersistent() = false;
			Event::meta_Scope.registry() = false;
			Event::meta_Scope.ordered() = false;
			Event::meta_Scope.visibility() = "public";
			Event::meta_Scope.defvalue() = Event_Scope_dva;
			Event::meta_Name.name() = "Name";
			Event::meta_Name.type() = "String";
			Event::meta_Name.min() = 1;
			Event::meta_Name.max() = 1;
			Event::meta_Name.nonpersistent() = false;
			Event::meta_Name.registry() = false;
			Event::meta_Name.ordered() = false;
			Event::meta_Name.visibility() = "public";
			Event::meta_Name.defvalue() = vector<string>();
			vector<string> Event_Trigger_dva;
			Event_Trigger_dva.push_back("EITHER_EDGE_EVENT");
			Event::meta_Trigger.name() = "Trigger";
			Event::meta_Trigger.type() = "String";
			Event::meta_Trigger.min() = 1;
			Event::meta_Trigger.max() = 1;
			Event::meta_Trigger.nonpersistent() = false;
			Event::meta_Trigger.registry() = false;
			Event::meta_Trigger.ordered() = false;
			Event::meta_Trigger.visibility() = "public";
			Event::meta_Trigger.defvalue() = Event_Trigger_dva;
			Transition::meta_ConditionAction.name() = "ConditionAction";
			Transition::meta_ConditionAction.type() = "String";
			Transition::meta_ConditionAction.min() = 1;
			Transition::meta_ConditionAction.max() = 1;
			Transition::meta_ConditionAction.nonpersistent() = false;
			Transition::meta_ConditionAction.registry() = false;
			Transition::meta_ConditionAction.ordered() = false;
			Transition::meta_ConditionAction.visibility() = "public";
			Transition::meta_ConditionAction.defvalue() = vector<string>();
			Transition::meta_Order.name() = "Order";
			Transition::meta_Order.type() = "String";
			Transition::meta_Order.min() = 1;
			Transition::meta_Order.max() = 1;
			Transition::meta_Order.nonpersistent() = false;
			Transition::meta_Order.registry() = false;
			Transition::meta_Order.ordered() = false;
			Transition::meta_Order.visibility() = "public";
			Transition::meta_Order.defvalue() = vector<string>();
			Transition::meta_Action.name() = "Action";
			Transition::meta_Action.type() = "String";
			Transition::meta_Action.min() = 1;
			Transition::meta_Action.max() = 1;
			Transition::meta_Action.nonpersistent() = false;
			Transition::meta_Action.registry() = false;
			Transition::meta_Action.ordered() = false;
			Transition::meta_Action.visibility() = "public";
			Transition::meta_Action.defvalue() = vector<string>();
			Transition::meta_Guard.name() = "Guard";
			Transition::meta_Guard.type() = "String";
			Transition::meta_Guard.min() = 1;
			Transition::meta_Guard.max() = 1;
			Transition::meta_Guard.nonpersistent() = false;
			Transition::meta_Guard.registry() = false;
			Transition::meta_Guard.ordered() = false;
			Transition::meta_Guard.visibility() = "public";
			Transition::meta_Guard.defvalue() = vector<string>();
			Transition::meta_Trigger.name() = "Trigger";
			Transition::meta_Trigger.type() = "String";
			Transition::meta_Trigger.min() = 1;
			Transition::meta_Trigger.max() = 1;
			Transition::meta_Trigger.nonpersistent() = false;
			Transition::meta_Trigger.registry() = false;
			Transition::meta_Trigger.ordered() = false;
			Transition::meta_Trigger.visibility() = "public";
			Transition::meta_Trigger.defvalue() = vector<string>();
			TransStart::meta_TransStartRestrict.name() = "TransStartRestrict";
			TransStart::meta_TransStartRestrict.description() = "A TransStart cannot be a transition destination.";
			TransStart::meta_TransStartRestrict.expression() = "self.reverseConnectedFCOs( \"dst\" ) -> size = 0";
			Junction::meta_JunctNotToSelf.name() = "JunctNotToSelf";
			Junction::meta_JunctNotToSelf.description() = "Junction may not connect to itself.";
			Junction::meta_JunctNotToSelf.expression() = "self.connectedFCOs() -> forAll( c | c <> self )";
			
		}
		void CreatesNamespaces()
		{
		}
		void InitNamespaces()
		{
		}
		void InitAssociation0()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			ass.name() = "Line";
			ass.assocClass() = ::FCSL::SLSF::Line::meta;
			::FCSL::SLSF::Port::meta_srcLine = ::Uml::AssociationRole::Create(ass);
			::FCSL::SLSF::Port::meta_srcLine.name() = "srcLine";
			::FCSL::SLSF::Port::meta_srcLine.min() = 0;
			::FCSL::SLSF::Port::meta_srcLine.max() = -1;
			::FCSL::SLSF::Port::meta_srcLine.isNavigable() = true;
			::FCSL::SLSF::Port::meta_srcLine.isPrimary() = false;
			::FCSL::SLSF::Port::meta_srcLine.target() = ::FCSL::SLSF::Port::meta;
			::FCSL::SLSF::Line::meta_srcLine_end_ = ::FCSL::SLSF::Port::meta_dstLine_rev = ::FCSL::SLSF::Port::meta_srcLine;
			::FCSL::SLSF::Port::meta_dstLine = ::Uml::AssociationRole::Create(ass);
			::FCSL::SLSF::Port::meta_dstLine.name() = "dstLine";
			::FCSL::SLSF::Port::meta_dstLine.min() = 0;
			::FCSL::SLSF::Port::meta_dstLine.max() = -1;
			::FCSL::SLSF::Port::meta_dstLine.isNavigable() = true;
			::FCSL::SLSF::Port::meta_dstLine.isPrimary() = false;
			::FCSL::SLSF::Port::meta_dstLine.target() = ::FCSL::SLSF::Port::meta;
			::FCSL::SLSF::Line::meta_dstLine_end_ = ::FCSL::SLSF::Port::meta_srcLine_rev = ::FCSL::SLSF::Port::meta_dstLine;
		};
		void InitAssociation1()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			::FCSL::SLSF::TypeBase::meta_referedbyTypeStructRef = ::Uml::AssociationRole::Create(ass);
			::FCSL::SLSF::TypeBase::meta_referedbyTypeStructRef.name() = "referedbyTypeStructRef";
			::FCSL::SLSF::TypeBase::meta_referedbyTypeStructRef.min() = 0;
			::FCSL::SLSF::TypeBase::meta_referedbyTypeStructRef.max() = -1;
			::FCSL::SLSF::TypeBase::meta_referedbyTypeStructRef.isNavigable() = true;
			::FCSL::SLSF::TypeBase::meta_referedbyTypeStructRef.isPrimary() = false;
			::FCSL::SLSF::TypeBase::meta_referedbyTypeStructRef.target() = ::FCSL::SLSF::TypeBaseRef::meta;
			::FCSL::SLSF::TypeBaseRef::meta_ref = ::Uml::AssociationRole::Create(ass);
			::FCSL::SLSF::TypeBaseRef::meta_ref.name() = "ref";
			::FCSL::SLSF::TypeBaseRef::meta_ref.min() = 0;
			::FCSL::SLSF::TypeBaseRef::meta_ref.max() = 1;
			::FCSL::SLSF::TypeBaseRef::meta_ref.isNavigable() = true;
			::FCSL::SLSF::TypeBaseRef::meta_ref.isPrimary() = false;
			::FCSL::SLSF::TypeBaseRef::meta_ref.target() = ::FCSL::SLSF::TypeBase::meta;
		};
		void InitAssociation2()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			::FCSL::SLSF::TransConnector::meta_referedbyConnectorRef = ::Uml::AssociationRole::Create(ass);
			::FCSL::SLSF::TransConnector::meta_referedbyConnectorRef.name() = "referedbyConnectorRef";
			::FCSL::SLSF::TransConnector::meta_referedbyConnectorRef.min() = 0;
			::FCSL::SLSF::TransConnector::meta_referedbyConnectorRef.max() = -1;
			::FCSL::SLSF::TransConnector::meta_referedbyConnectorRef.isNavigable() = true;
			::FCSL::SLSF::TransConnector::meta_referedbyConnectorRef.isPrimary() = false;
			::FCSL::SLSF::TransConnector::meta_referedbyConnectorRef.target() = ::FCSL::SLSF::ConnectorRef::meta;
			::FCSL::SLSF::ConnectorRef::meta_ref = ::Uml::AssociationRole::Create(ass);
			::FCSL::SLSF::ConnectorRef::meta_ref.name() = "ref";
			::FCSL::SLSF::ConnectorRef::meta_ref.min() = 0;
			::FCSL::SLSF::ConnectorRef::meta_ref.max() = 1;
			::FCSL::SLSF::ConnectorRef::meta_ref.isNavigable() = true;
			::FCSL::SLSF::ConnectorRef::meta_ref.isPrimary() = false;
			::FCSL::SLSF::ConnectorRef::meta_ref.target() = ::FCSL::SLSF::TransConnector::meta;
		};
		void InitAssociation3()
		{
			::Uml::Association ass = ::Uml::Association::Create(meta);
			ass.name() = "Transition";
			ass.assocClass() = ::FCSL::SLSF::Transition::meta;
			::FCSL::SLSF::TransConnector::meta_dstTransition = ::Uml::AssociationRole::Create(ass);
			::FCSL::SLSF::TransConnector::meta_dstTransition.name() = "dstTransition";
			::FCSL::SLSF::TransConnector::meta_dstTransition.min() = 0;
			::FCSL::SLSF::TransConnector::meta_dstTransition.max() = -1;
			::FCSL::SLSF::TransConnector::meta_dstTransition.isNavigable() = true;
			::FCSL::SLSF::TransConnector::meta_dstTransition.isPrimary() = false;
			::FCSL::SLSF::TransConnector::meta_dstTransition.target() = ::FCSL::SLSF::TransConnector::meta;
			::FCSL::SLSF::Transition::meta_dstTransition_end_ = ::FCSL::SLSF::TransConnector::meta_srcTransition_rev = ::FCSL::SLSF::TransConnector::meta_dstTransition;
			::FCSL::SLSF::TransConnector::meta_srcTransition = ::Uml::AssociationRole::Create(ass);
			::FCSL::SLSF::TransConnector::meta_srcTransition.name() = "srcTransition";
			::FCSL::SLSF::TransConnector::meta_srcTransition.min() = 0;
			::FCSL::SLSF::TransConnector::meta_srcTransition.max() = -1;
			::FCSL::SLSF::TransConnector::meta_srcTransition.isNavigable() = true;
			::FCSL::SLSF::TransConnector::meta_srcTransition.isPrimary() = false;
			::FCSL::SLSF::TransConnector::meta_srcTransition.target() = ::FCSL::SLSF::TransConnector::meta;
			::FCSL::SLSF::Transition::meta_srcTransition_end_ = ::FCSL::SLSF::TransConnector::meta_dstTransition_rev = ::FCSL::SLSF::TransConnector::meta_srcTransition;
		};
		void InitCrossNSAssociations()
		{
		}
		void InitComposition0()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::SLSF::System::meta_Dataflow_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SLSF::System::meta_Dataflow_parent.name() = "Dataflow_parent";
			::FCSL::SLSF::System::meta_Dataflow_parent.isNavigable() = true;
			::FCSL::SLSF::System::meta_Dataflow_parent.target() = ::FCSL::SLSF::Dataflow::meta;
			::FCSL::SLSF::Dataflow::meta_System_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::SLSF::Dataflow::meta_System_children.name() = "System";
			::FCSL::SLSF::Dataflow::meta_System_children.min() = 0;
			::FCSL::SLSF::Dataflow::meta_System_children.max() = -1;
			::FCSL::SLSF::Dataflow::meta_System_children.isNavigable() = true;
			::FCSL::SLSF::Dataflow::meta_System_children.target() = ::FCSL::SLSF::System::meta;
		}
		void InitComposition1()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::SLSF::TypeBase::meta_Types_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SLSF::TypeBase::meta_Types_parent.name() = "Types_parent";
			::FCSL::SLSF::TypeBase::meta_Types_parent.isNavigable() = true;
			::FCSL::SLSF::TypeBase::meta_Types_parent.target() = ::FCSL::SLSF::Types::meta;
			::FCSL::SLSF::Types::meta_TypeBase_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::SLSF::Types::meta_TypeBase_children.name() = "TypeBase";
			::FCSL::SLSF::Types::meta_TypeBase_children.min() = 0;
			::FCSL::SLSF::Types::meta_TypeBase_children.max() = -1;
			::FCSL::SLSF::Types::meta_TypeBase_children.isNavigable() = true;
			::FCSL::SLSF::Types::meta_TypeBase_children.target() = ::FCSL::SLSF::TypeBase::meta;
		}
		void InitComposition2()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::SLSF::State::meta_Stateflow_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SLSF::State::meta_Stateflow_parent.name() = "Stateflow_parent";
			::FCSL::SLSF::State::meta_Stateflow_parent.isNavigable() = true;
			::FCSL::SLSF::State::meta_Stateflow_parent.target() = ::FCSL::SLSF::Stateflow::meta;
			::FCSL::SLSF::Stateflow::meta_State_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::SLSF::Stateflow::meta_State_children.name() = "State";
			::FCSL::SLSF::Stateflow::meta_State_children.min() = 0;
			::FCSL::SLSF::Stateflow::meta_State_children.max() = -1;
			::FCSL::SLSF::Stateflow::meta_State_children.isNavigable() = true;
			::FCSL::SLSF::Stateflow::meta_State_children.target() = ::FCSL::SLSF::State::meta;
		}
		void InitComposition3()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::SLSF::Annotation::meta_Block_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SLSF::Annotation::meta_Block_parent.name() = "Block_parent";
			::FCSL::SLSF::Annotation::meta_Block_parent.isNavigable() = true;
			::FCSL::SLSF::Annotation::meta_Block_parent.target() = ::FCSL::SLSF::Block::meta;
			::FCSL::SLSF::Block::meta_Annotation_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::SLSF::Block::meta_Annotation_children.name() = "Annotation";
			::FCSL::SLSF::Block::meta_Annotation_children.min() = 0;
			::FCSL::SLSF::Block::meta_Annotation_children.max() = -1;
			::FCSL::SLSF::Block::meta_Annotation_children.isNavigable() = true;
			::FCSL::SLSF::Block::meta_Annotation_children.target() = ::FCSL::SLSF::Annotation::meta;
		}
		void InitComposition4()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::SLSF::Parameter::meta_Parameter_Block_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SLSF::Parameter::meta_Parameter_Block_parent.name() = "Parameter_Block_parent";
			::FCSL::SLSF::Parameter::meta_Parameter_Block_parent.isNavigable() = true;
			::FCSL::SLSF::Parameter::meta_Parameter_Block_parent.target() = ::FCSL::SLSF::Block::meta;
			::FCSL::SLSF::Block::meta_Parameter = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::SLSF::Block::meta_Parameter.name() = "Parameter";
			::FCSL::SLSF::Block::meta_Parameter.min() = 0;
			::FCSL::SLSF::Block::meta_Parameter.max() = -1;
			::FCSL::SLSF::Block::meta_Parameter.isNavigable() = true;
			::FCSL::SLSF::Block::meta_Parameter.target() = ::FCSL::SLSF::Parameter::meta;
		}
		void InitComposition5()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::SLSF::Line::meta_Line_Block_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SLSF::Line::meta_Line_Block_parent.name() = "Line_Block_parent";
			::FCSL::SLSF::Line::meta_Line_Block_parent.isNavigable() = true;
			::FCSL::SLSF::Line::meta_Line_Block_parent.target() = ::FCSL::SLSF::Block::meta;
			::FCSL::SLSF::Block::meta_Line = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::SLSF::Block::meta_Line.name() = "Line";
			::FCSL::SLSF::Block::meta_Line.min() = 0;
			::FCSL::SLSF::Block::meta_Line.max() = -1;
			::FCSL::SLSF::Block::meta_Line.isNavigable() = true;
			::FCSL::SLSF::Block::meta_Line.target() = ::FCSL::SLSF::Line::meta;
		}
		void InitComposition6()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::SLSF::Port::meta_Block_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SLSF::Port::meta_Block_parent.name() = "Block_parent";
			::FCSL::SLSF::Port::meta_Block_parent.isNavigable() = true;
			::FCSL::SLSF::Port::meta_Block_parent.target() = ::FCSL::SLSF::Block::meta;
			::FCSL::SLSF::Block::meta_Port_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::SLSF::Block::meta_Port_children.name() = "Port";
			::FCSL::SLSF::Block::meta_Port_children.min() = 0;
			::FCSL::SLSF::Block::meta_Port_children.max() = -1;
			::FCSL::SLSF::Block::meta_Port_children.isNavigable() = true;
			::FCSL::SLSF::Block::meta_Port_children.target() = ::FCSL::SLSF::Port::meta;
		}
		void InitComposition7()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::SLSF::ConnectorRef::meta_Block_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SLSF::ConnectorRef::meta_Block_parent.name() = "Block_parent";
			::FCSL::SLSF::ConnectorRef::meta_Block_parent.isNavigable() = true;
			::FCSL::SLSF::ConnectorRef::meta_Block_parent.target() = ::FCSL::SLSF::Block::meta;
			::FCSL::SLSF::Block::meta_ConnectorRef_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::SLSF::Block::meta_ConnectorRef_children.name() = "ConnectorRef";
			::FCSL::SLSF::Block::meta_ConnectorRef_children.min() = 0;
			::FCSL::SLSF::Block::meta_ConnectorRef_children.max() = -1;
			::FCSL::SLSF::Block::meta_ConnectorRef_children.isNavigable() = true;
			::FCSL::SLSF::Block::meta_ConnectorRef_children.target() = ::FCSL::SLSF::ConnectorRef::meta;
		}
		void InitComposition8()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::SLSF::TypeBaseRef::meta_Port_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SLSF::TypeBaseRef::meta_Port_parent.name() = "Port_parent";
			::FCSL::SLSF::TypeBaseRef::meta_Port_parent.isNavigable() = true;
			::FCSL::SLSF::TypeBaseRef::meta_Port_parent.target() = ::FCSL::SLSF::Port::meta;
			::FCSL::SLSF::Port::meta_TypeBaseRef_child = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::SLSF::Port::meta_TypeBaseRef_child.name() = "TypeBaseRef";
			::FCSL::SLSF::Port::meta_TypeBaseRef_child.min() = 0;
			::FCSL::SLSF::Port::meta_TypeBaseRef_child.max() = 1;
			::FCSL::SLSF::Port::meta_TypeBaseRef_child.isNavigable() = true;
			::FCSL::SLSF::Port::meta_TypeBaseRef_child.target() = ::FCSL::SLSF::TypeBaseRef::meta;
		}
		void InitComposition9()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::SLSF::Block::meta_System_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SLSF::Block::meta_System_parent.name() = "System_parent";
			::FCSL::SLSF::Block::meta_System_parent.isNavigable() = true;
			::FCSL::SLSF::Block::meta_System_parent.target() = ::FCSL::SLSF::System::meta;
			::FCSL::SLSF::System::meta_Block_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::SLSF::System::meta_Block_children.name() = "Block";
			::FCSL::SLSF::System::meta_Block_children.min() = 0;
			::FCSL::SLSF::System::meta_Block_children.max() = -1;
			::FCSL::SLSF::System::meta_Block_children.isNavigable() = true;
			::FCSL::SLSF::System::meta_Block_children.target() = ::FCSL::SLSF::Block::meta;
		}
		void InitComposition10()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::SLSF::TypeBaseRef::meta_TypeStruct_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SLSF::TypeBaseRef::meta_TypeStruct_parent.name() = "TypeStruct_parent";
			::FCSL::SLSF::TypeBaseRef::meta_TypeStruct_parent.isNavigable() = true;
			::FCSL::SLSF::TypeBaseRef::meta_TypeStruct_parent.target() = ::FCSL::SLSF::TypeStruct::meta;
			::FCSL::SLSF::TypeStruct::meta_TypeBaseRef_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::SLSF::TypeStruct::meta_TypeBaseRef_children.name() = "TypeBaseRef";
			::FCSL::SLSF::TypeStruct::meta_TypeBaseRef_children.min() = 0;
			::FCSL::SLSF::TypeStruct::meta_TypeBaseRef_children.max() = -1;
			::FCSL::SLSF::TypeStruct::meta_TypeBaseRef_children.isNavigable() = true;
			::FCSL::SLSF::TypeStruct::meta_TypeBaseRef_children.target() = ::FCSL::SLSF::TypeBaseRef::meta;
		}
		void InitComposition11()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::SLSF::Event::meta_State_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SLSF::Event::meta_State_parent.name() = "State_parent";
			::FCSL::SLSF::Event::meta_State_parent.isNavigable() = true;
			::FCSL::SLSF::Event::meta_State_parent.target() = ::FCSL::SLSF::State::meta;
			::FCSL::SLSF::State::meta_Event_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::SLSF::State::meta_Event_children.name() = "Event";
			::FCSL::SLSF::State::meta_Event_children.min() = 0;
			::FCSL::SLSF::State::meta_Event_children.max() = -1;
			::FCSL::SLSF::State::meta_Event_children.isNavigable() = true;
			::FCSL::SLSF::State::meta_Event_children.target() = ::FCSL::SLSF::Event::meta;
		}
		void InitComposition12()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::SLSF::TransConnector::meta_State_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SLSF::TransConnector::meta_State_parent.name() = "State_parent";
			::FCSL::SLSF::TransConnector::meta_State_parent.isNavigable() = true;
			::FCSL::SLSF::TransConnector::meta_State_parent.target() = ::FCSL::SLSF::State::meta;
			::FCSL::SLSF::State::meta_TransConnector_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::SLSF::State::meta_TransConnector_children.name() = "TransConnector";
			::FCSL::SLSF::State::meta_TransConnector_children.min() = 0;
			::FCSL::SLSF::State::meta_TransConnector_children.max() = -1;
			::FCSL::SLSF::State::meta_TransConnector_children.isNavigable() = true;
			::FCSL::SLSF::State::meta_TransConnector_children.target() = ::FCSL::SLSF::TransConnector::meta;
		}
		void InitComposition13()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::SLSF::Transition::meta_Transition_State_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SLSF::Transition::meta_Transition_State_parent.name() = "Transition_State_parent";
			::FCSL::SLSF::Transition::meta_Transition_State_parent.isNavigable() = true;
			::FCSL::SLSF::Transition::meta_Transition_State_parent.target() = ::FCSL::SLSF::State::meta;
			::FCSL::SLSF::State::meta_Transition = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::SLSF::State::meta_Transition.name() = "Transition";
			::FCSL::SLSF::State::meta_Transition.min() = 0;
			::FCSL::SLSF::State::meta_Transition.max() = -1;
			::FCSL::SLSF::State::meta_Transition.isNavigable() = true;
			::FCSL::SLSF::State::meta_Transition.target() = ::FCSL::SLSF::Transition::meta;
		}
		void InitComposition14()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(meta);
			comp.nonpersistent() =false;
			::FCSL::SLSF::Data::meta_State_parent = ::Uml::CompositionParentRole::Create(comp);
			::FCSL::SLSF::Data::meta_State_parent.name() = "State_parent";
			::FCSL::SLSF::Data::meta_State_parent.isNavigable() = true;
			::FCSL::SLSF::Data::meta_State_parent.target() = ::FCSL::SLSF::State::meta;
			::FCSL::SLSF::State::meta_Data_children = ::Uml::CompositionChildRole::Create(comp);
			::FCSL::SLSF::State::meta_Data_children.name() = "Data";
			::FCSL::SLSF::State::meta_Data_children.min() = 0;
			::FCSL::SLSF::State::meta_Data_children.max() = -1;
			::FCSL::SLSF::State::meta_Data_children.isNavigable() = true;
			::FCSL::SLSF::State::meta_Data_children.target() = ::FCSL::SLSF::Data::meta;
		}
		void InitCrossNSCompositions()
		{
		}
		void InitInheritence()
		{
			Block::meta.subTypes() +=  ::FCSL::SLSF::Primitive::meta;
			Block::meta.subTypes() +=  ::FCSL::SLSF::System::meta;
			Block::meta.subTypes() +=  ::FCSL::SLSF::Reference::meta;
			OutPort::meta.subTypes() +=  ::FCSL::SLSF::OutputPort::meta;
			OutPort::meta.subTypes() +=  ::FCSL::SLSF::StatePort::meta;
			InPort::meta.subTypes() +=  ::FCSL::SLSF::EnablePort::meta;
			InPort::meta.subTypes() +=  ::FCSL::SLSF::InputPort::meta;
			InPort::meta.subTypes() +=  ::FCSL::SLSF::TriggerPort::meta;
			Port::meta.subTypes() +=  ::FCSL::SLSF::OutPort::meta;
			Port::meta.subTypes() +=  ::FCSL::SLSF::InPort::meta;
			TypeBase::meta.subTypes() +=  ::FCSL::SLSF::Matrix::meta;
			TypeBase::meta.subTypes() +=  ::FCSL::SLSF::TypeStruct::meta;
			TransConnector::meta.subTypes() +=  ::FCSL::SLSF::ConnectorRef::meta;
			TransConnector::meta.subTypes() +=  ::FCSL::SLSF::State::meta;
			TransConnector::meta.subTypes() +=  ::FCSL::SLSF::TransStart::meta;
			TransConnector::meta.subTypes() +=  ::FCSL::SLSF::Junction::meta;
			TransConnector::meta.subTypes() +=  ::FCSL::SLSF::History::meta;
		}
		void InitCrossNSInheritence()
		{
		}
		void InitializeNS()
		{
			Creates();
			InitClassesAttributes();
			CreatesNamespaces();
			InitNamespaces();
			InitAssociation0();
			InitAssociation1();
			InitAssociation2();
			InitAssociation3();
			InitComposition0();
			InitComposition1();
			InitComposition2();
			InitComposition3();
			InitComposition4();
			InitComposition5();
			InitComposition6();
			InitComposition7();
			InitComposition8();
			InitComposition9();
			InitComposition10();
			InitComposition11();
			InitComposition12();
			InitComposition13();
			InitComposition14();
			InitInheritence();
			
		}

		// initialize from another namespace
		void Creates2(const ::Uml::Namespace &ns)
		{
			::Uml::SetClass(Dataflow::meta, ns, "Dataflow");
			::Uml::SetAttribute(Dataflow::meta_name, Dataflow::meta, "name");
			::Uml::SetClass(Types::meta, ns, "Types");
			::Uml::SetAttribute(Types::meta_name, Types::meta, "name");
			::Uml::SetClass(Stateflow::meta, ns, "Stateflow");
			::Uml::SetAttribute(Stateflow::meta_name, Stateflow::meta, "name");
			::Uml::SetClass(Block::meta, ns, "Block");
			::Uml::SetAttribute(Block::meta_Priority, Block::meta, "Priority");
			::Uml::SetAttribute(Block::meta_SampleTime, Block::meta, "SampleTime");
			::Uml::SetAttribute(Block::meta_Description, Block::meta, "Description");
			::Uml::SetAttribute(Block::meta_Name, Block::meta, "Name");
			::Uml::SetAttribute(Block::meta_Tag, Block::meta, "Tag");
			::Uml::SetAttribute(Block::meta_BlockType, Block::meta, "BlockType");
			::Uml::SetClass(EnablePort::meta, ns, "EnablePort");
			::Uml::SetAttribute(EnablePort::meta_StatesWhenEnabling, EnablePort::meta, "StatesWhenEnabling");
			::Uml::SetClass(OutPort::meta, ns, "OutPort");
			::Uml::SetClass(Annotation::meta, ns, "Annotation");
			::Uml::SetAttribute(Annotation::meta_Text, Annotation::meta, "Text");
			::Uml::SetClass(OutputPort::meta, ns, "OutputPort");
			::Uml::SetAttribute(OutputPort::meta_Number, OutputPort::meta, "Number");
			::Uml::SetClass(Parameter::meta, ns, "Parameter");
			::Uml::SetAttribute(Parameter::meta_Value, Parameter::meta, "Value");
			::Uml::SetClass(InputPort::meta, ns, "InputPort");
			::Uml::SetAttribute(InputPort::meta_Number, InputPort::meta, "Number");
			::Uml::SetClass(Line::meta, ns, "Line");
			::Uml::SetAttribute(Line::meta_Name, Line::meta, "Name");
			::Uml::SetClass(InPort::meta, ns, "InPort");
			::Uml::SetClass(Primitive::meta, ns, "Primitive");
			::Uml::SetAttribute(Primitive::meta_Deadline, Primitive::meta, "Deadline");
			::Uml::SetAttribute(Primitive::meta_Period, Primitive::meta, "Period");
			::Uml::SetAttribute(Primitive::meta_ExecutionTime, Primitive::meta, "ExecutionTime");
			::Uml::SetClass(StatePort::meta, ns, "StatePort");
			::Uml::SetClass(TriggerPort::meta, ns, "TriggerPort");
			::Uml::SetAttribute(TriggerPort::meta_TriggerType, TriggerPort::meta, "TriggerType");
			::Uml::SetClass(Port::meta, ns, "Port");
			::Uml::SetClass(System::meta, ns, "System");
			::Uml::SetClass(Reference::meta, ns, "Reference");
			::Uml::SetAttribute(Reference::meta_SourceType, Reference::meta, "SourceType");
			::Uml::SetAttribute(Reference::meta_SourceBlock, Reference::meta, "SourceBlock");
			::Uml::SetClass(TypeBase::meta, ns, "TypeBase");
			::Uml::SetClass(Matrix::meta, ns, "Matrix");
			::Uml::SetAttribute(Matrix::meta_rows, Matrix::meta, "rows");
			::Uml::SetAttribute(Matrix::meta_columns, Matrix::meta, "columns");
			::Uml::SetAttribute(Matrix::meta_Type, Matrix::meta, "Type");
			::Uml::SetClass(TypeBaseRef::meta, ns, "TypeBaseRef");
			::Uml::SetAttribute(TypeBaseRef::meta_MemberIndex, TypeBaseRef::meta, "MemberIndex");
			::Uml::SetClass(TypeStruct::meta, ns, "TypeStruct");
			::Uml::SetAttribute(TypeStruct::meta_MemberCount, TypeStruct::meta, "MemberCount");
			::Uml::SetClass(Data::meta, ns, "Data");
			::Uml::SetAttribute(Data::meta_Description, Data::meta, "Description");
			::Uml::SetAttribute(Data::meta_Port, Data::meta, "Port");
			::Uml::SetAttribute(Data::meta_Scope, Data::meta, "Scope");
			::Uml::SetAttribute(Data::meta_Name, Data::meta, "Name");
			::Uml::SetAttribute(Data::meta_DataType, Data::meta, "DataType");
			::Uml::SetAttribute(Data::meta_Units, Data::meta, "Units");
			::Uml::SetAttribute(Data::meta_Max, Data::meta, "Max");
			::Uml::SetAttribute(Data::meta_Min, Data::meta, "Min");
			::Uml::SetAttribute(Data::meta_InitialValue, Data::meta, "InitialValue");
			::Uml::SetAttribute(Data::meta_ArrayFirstIndex, Data::meta, "ArrayFirstIndex");
			::Uml::SetAttribute(Data::meta_ArraySize, Data::meta, "ArraySize");
			::Uml::SetClass(ConnectorRef::meta, ns, "ConnectorRef");
			::Uml::SetClass(State::meta, ns, "State");
			::Uml::SetAttribute(State::meta_ExitAction, State::meta, "ExitAction");
			::Uml::SetAttribute(State::meta_Order, State::meta, "Order");
			::Uml::SetAttribute(State::meta_DuringAction, State::meta, "DuringAction");
			::Uml::SetAttribute(State::meta_EnterAction, State::meta, "EnterAction");
			::Uml::SetAttribute(State::meta_Name, State::meta, "Name");
			::Uml::SetAttribute(State::meta_Decomposition, State::meta, "Decomposition");
			::Uml::SetClass(Event::meta, ns, "Event");
			::Uml::SetAttribute(Event::meta_Description, Event::meta, "Description");
			::Uml::SetAttribute(Event::meta_Port, Event::meta, "Port");
			::Uml::SetAttribute(Event::meta_Scope, Event::meta, "Scope");
			::Uml::SetAttribute(Event::meta_Name, Event::meta, "Name");
			::Uml::SetAttribute(Event::meta_Trigger, Event::meta, "Trigger");
			::Uml::SetClass(Transition::meta, ns, "Transition");
			::Uml::SetAttribute(Transition::meta_ConditionAction, Transition::meta, "ConditionAction");
			::Uml::SetAttribute(Transition::meta_Order, Transition::meta, "Order");
			::Uml::SetAttribute(Transition::meta_Action, Transition::meta, "Action");
			::Uml::SetAttribute(Transition::meta_Guard, Transition::meta, "Guard");
			::Uml::SetAttribute(Transition::meta_Trigger, Transition::meta, "Trigger");
			::Uml::SetClass(TransStart::meta, ns, "TransStart");
			::Uml::SetClass(Junction::meta, ns, "Junction");
			::Uml::SetClass(TransConnector::meta, ns, "TransConnector");
			::Uml::SetClass(History::meta, ns, "History");
		}
		void CreatesNamespaces2(const ::Uml::Namespace &ns)
		{
		}
		void InitializeNSSetupMeta(const ::Uml::Namespace & ns)
		{
			Creates2(ns);
			CreatesNamespaces2(ns);
		}
		void InitializeNS2()
		{
			//composition child roles 
			::Uml::SetParentRole(Dataflow::meta_RootFolder_parent, Dataflow::meta, ::FCSL::RootFolder::meta, "", "");
			::Uml::SetParentRole(Types::meta_RootFolder_parent, Types::meta, ::FCSL::RootFolder::meta, "", "");
			::Uml::SetParentRole(Stateflow::meta_RootFolder_parent, Stateflow::meta, ::FCSL::RootFolder::meta, "", "");
			::Uml::SetParentRole(Block::meta_System_parent, Block::meta, ::FCSL::SLSF::System::meta, "", "");
			::Uml::SetParentRole(Annotation::meta_Block_parent, Annotation::meta, ::FCSL::SLSF::Block::meta, "", "");
			::Uml::SetParentRole(Parameter::meta_Parameter_Block_parent, Parameter::meta, ::FCSL::SLSF::Block::meta, "Parameter", "");
			::Uml::SetParentRole(Line::meta_Line_Block_parent, Line::meta, ::FCSL::SLSF::Block::meta, "Line", "");
			::Uml::SetParentRole(Port::meta_Block_parent, Port::meta, ::FCSL::SLSF::Block::meta, "", "");
			::Uml::SetParentRole(System::meta_Dataflow_parent, System::meta, ::FCSL::SLSF::Dataflow::meta, "", "");
			::Uml::SetParentRole(TypeBase::meta_Types_parent, TypeBase::meta, ::FCSL::SLSF::Types::meta, "", "");
			::Uml::SetParentRole(TypeBaseRef::meta_Port_parent, TypeBaseRef::meta, ::FCSL::SLSF::Port::meta, "", "");
			::Uml::SetParentRole(TypeBaseRef::meta_TypeStruct_parent, TypeBaseRef::meta, ::FCSL::SLSF::TypeStruct::meta, "", "");
			::Uml::SetParentRole(Data::meta_State_parent, Data::meta, ::FCSL::SLSF::State::meta, "", "");
			::Uml::SetParentRole(ConnectorRef::meta_Block_parent, ConnectorRef::meta, ::FCSL::SLSF::Block::meta, "", "");
			::Uml::SetParentRole(State::meta_Stateflow_parent, State::meta, ::FCSL::SLSF::Stateflow::meta, "", "");
			::Uml::SetParentRole(Event::meta_State_parent, Event::meta, ::FCSL::SLSF::State::meta, "", "");
			::Uml::SetParentRole(Transition::meta_Transition_State_parent, Transition::meta, ::FCSL::SLSF::State::meta, "Transition", "");
			::Uml::SetParentRole(TransConnector::meta_State_parent, TransConnector::meta, ::FCSL::SLSF::State::meta, "", "");

			// composition parentroles 
			::Uml::SetChildRole(Dataflow::meta_System_children, Dataflow::meta, ::FCSL::SLSF::System::meta, "", "");
			::Uml::SetChildRole(Types::meta_TypeBase_children, Types::meta, ::FCSL::SLSF::TypeBase::meta, "", "");
			::Uml::SetChildRole(Stateflow::meta_State_children, Stateflow::meta, ::FCSL::SLSF::State::meta, "", "");
			::Uml::SetChildRole(Block::meta_Annotation_children, Block::meta, ::FCSL::SLSF::Annotation::meta, "", "");
			::Uml::SetChildRole(Block::meta_Parameter, Block::meta, ::FCSL::SLSF::Parameter::meta, "", "Parameter");
			::Uml::SetChildRole(Block::meta_Line, Block::meta, ::FCSL::SLSF::Line::meta, "", "Line");
			::Uml::SetChildRole(Block::meta_Port_children, Block::meta, ::FCSL::SLSF::Port::meta, "", "");
			::Uml::SetChildRole(Block::meta_ConnectorRef_children, Block::meta, ::FCSL::SLSF::ConnectorRef::meta, "", "");
			::Uml::SetChildRole(Port::meta_TypeBaseRef_child, Port::meta, ::FCSL::SLSF::TypeBaseRef::meta, "", "");
			::Uml::SetChildRole(System::meta_Block_children, System::meta, ::FCSL::SLSF::Block::meta, "", "");
			::Uml::SetChildRole(TypeStruct::meta_TypeBaseRef_children, TypeStruct::meta, ::FCSL::SLSF::TypeBaseRef::meta, "", "");
			::Uml::SetChildRole(State::meta_Event_children, State::meta, ::FCSL::SLSF::Event::meta, "", "");
			::Uml::SetChildRole(State::meta_TransConnector_children, State::meta, ::FCSL::SLSF::TransConnector::meta, "", "");
			::Uml::SetChildRole(State::meta_Transition, State::meta, ::FCSL::SLSF::Transition::meta, "", "Transition");
			::Uml::SetChildRole(State::meta_Data_children, State::meta, ::FCSL::SLSF::Data::meta, "", "");

			// Association roles 
			::Uml::SetAssocRole(Port::meta_srcLine, Port::meta, ::FCSL::SLSF::Port::meta, "dstLine");
			::FCSL::SLSF::Port::meta_dstLine_rev = Port::meta_srcLine;
			::Uml::SetAssocRole(Port::meta_dstLine, Port::meta, ::FCSL::SLSF::Port::meta, "srcLine");
			::FCSL::SLSF::Port::meta_srcLine_rev = Port::meta_dstLine;
			::Uml::SetAssocRole(System::meta_referedbySystemRef, System::meta, ::FCSL::SystemRef::meta, "ref");
			::Uml::SetAssocRole(TypeBase::meta_referedbyTypeStructRef, TypeBase::meta, ::FCSL::SLSF::TypeBaseRef::meta, "ref");
			::Uml::SetAssocRole(TypeBaseRef::meta_ref, TypeBaseRef::meta, ::FCSL::SLSF::TypeBase::meta, "referedbyTypeStructRef");
			::Uml::SetAssocRole(ConnectorRef::meta_ref, ConnectorRef::meta, ::FCSL::SLSF::TransConnector::meta, "referedbyConnectorRef");
			::Uml::SetAssocRole(TransConnector::meta_referedbyConnectorRef, TransConnector::meta, ::FCSL::SLSF::ConnectorRef::meta, "ref");
			::Uml::SetAssocRole(TransConnector::meta_dstTransition, TransConnector::meta, ::FCSL::SLSF::TransConnector::meta, "srcTransition");
			::FCSL::SLSF::TransConnector::meta_srcTransition_rev = TransConnector::meta_dstTransition;
			::Uml::SetAssocRole(TransConnector::meta_srcTransition, TransConnector::meta, ::FCSL::SLSF::TransConnector::meta, "dstTransition");
			::FCSL::SLSF::TransConnector::meta_dstTransition_rev = TransConnector::meta_srcTransition;
			Line::meta_dstLine_end_ = ::FCSL::SLSF::Port::meta_dstLine;
			Line::meta_srcLine_end_ = ::FCSL::SLSF::Port::meta_srcLine;
			Transition::meta_srcTransition_end_ = ::FCSL::SLSF::TransConnector::meta_srcTransition;
			Transition::meta_dstTransition_end_ = ::FCSL::SLSF::TransConnector::meta_dstTransition;

			// namespaces
			
		}
	}

	 void Initialize()
	{
		static bool first = true;
		if(!first) return;
		first = false;
		::Uml::Initialize();

		ASSERT( umldiagram == Udm::null );
		UdmStatic::StaticDataNetwork * meta_dn = new UdmStatic::StaticDataNetwork(::Uml::diagram);
		meta_dn->CreateNew("FCSL.mem", "", ::Uml::Diagram::meta, Udm::CHANGES_LOST_DEFAULT);
		umldiagram = ::Uml::Diagram::Cast(meta_dn->GetRootObject());
		umldiagram.name() ="FCSL";
		umldiagram.version() ="1.00";
		InitializeDgr();

		UdmDom::str_xsd_storage::StoreXsd("FCSL_FM.xsd", FCSL_FM_xsd::getString());
		UdmDom::str_xsd_storage::StoreXsd("FCSL_SLSF.xsd", FCSL_SLSF_xsd::getString());
		UdmDom::str_xsd_storage::StoreXsd("FCSL.xsd", FCSL_xsd::getString());

		InitCrossNSInheritence();
		InitCrossNSCompositions();
		InitCrossNSAssociations();
		FM::InitCrossNSInheritence();
		FM::InitCrossNSCompositions();
		FM::InitCrossNSAssociations();
		SLSF::InitCrossNSInheritence();
		SLSF::InitCrossNSCompositions();
		SLSF::InitCrossNSAssociations();

	};

	 void Initialize(const ::Uml::Diagram &dgr)
	{
		umldiagram = dgr;
		InitializeDgrSetupMeta(dgr);
		InitializeDgr2();

	};

	 Udm::UdmDiagram diagram = { &umldiagram, Initialize };
	static struct _regClass
	{
		_regClass()
		{
			Udm::MetaDepository::StoreDiagram("FCSL", diagram);
		};
		~_regClass()
		{
			Udm::MetaDepository::RemoveDiagram("FCSL");
		};
	} __regUnUsed;

}
// END FCSL.cpp
