// cpp(meta datanetwork format) source file SCAML.cpp generated from diagram SCAML
// generated on Mon Oct 29 12:27:21 2007

#include "SCAML.h"
#include "UmlExt.h"

#include "UdmStatic.h"

#include "UdmDom.h"
#include "SCAML_xsd.h"

namespace SCAML {

		::Uml::Diagram umldiagram;

		::Uml::Class connectdestBase::meta;
		::Uml::Class componentplacement_Members_Base::meta;
		::Uml::Class usestodestConn::meta;
		::Uml::Class externaltodestConn::meta;
		::Uml::Class externalport::meta;
		::Uml::Class externaltodestBase::meta;
		::Uml::Class componentsupportedinterface::meta;
		::Uml::Class freestandingtoprovidedConn::meta;
		::Uml::Class usestofreestandingConn::meta;
		::Uml::Class thisPort::meta;
		::Uml::Class log::meta;
		::Uml::Class filemanager::meta;
		::Uml::Class namingservice::meta;
		::Uml::Class FreestandingPort::meta;
		::Uml::Class deviceusedbythiscomponentref::meta;
		::Uml::Class service::meta;
		::Uml::Class eventchannel::meta;
		::Uml::Class devicethatloadedthiscomponentref::meta;
		::Uml::Class Event::meta;
		::Uml::Class ControlFlow::meta;
		::Uml::Class CFSrc::meta;
		::Uml::Class ArgRef::meta;
		::Uml::Class Arg::meta;
		::Uml::Class SimulinkEntrypoint::meta;
		::Uml::Class Branch::meta;
		::Uml::Class CFDst::meta;
		::Uml::Class ThenFlow::meta;
		::Uml::Class ElseFlow::meta;
		::Uml::Class controllertocompinst::meta;
		::Uml::Class assemblycontroller::meta;
		::Uml::Class componentresourcefactorytopropertiesConn::meta;
		::Uml::Class findcomponentConn::meta;
		::Uml::Class componentresourcefactoryref::meta;
		::Uml::Class propertyProxy::meta;
		::Uml::Class componentpropertiesConn::meta;
		::Uml::Class componentproperties::meta;
		::Uml::Class componentplacementConn::meta;
		::Uml::Class hostcollocation::meta;
		::Uml::Class InterfaceFolder::meta;
		::Uml::Class usesPort::meta;
		::Uml::Class providesPort::meta;
		::Uml::Class supports::meta;
		::Uml::Class inheritsfrom::meta;
		::Uml::Class Interface::meta;
		::Uml::Class interfaces::meta;
		::Uml::Class port::meta;
		::Uml::Class componentfeatures::meta;
		::Uml::Class devicepkgref::meta;
		::Uml::Class hwdeviceregistration::meta;
		::Uml::Class childhwdevice::meta;
		::Uml::Class structBase::meta;
		::Uml::Class simpleBase::meta;
		::Uml::Class structvalue::meta;
		::Uml::Class simpleref::meta;
		::Uml::Class structref::meta;
		::Uml::Class structsequencePropertyDescriptor::meta;
		::Uml::Class structPropertyDescriptor::meta;
		::Uml::Class testPropertyDescriptor::meta;
		::Uml::Class kind::meta;
		::Uml::Class simplesequencePropertyDescriptor::meta;
		::Uml::Class property::meta;
		::Uml::Class simplePropertyDescriptor::meta;
		::Uml::Class enumeration::meta;
		::Uml::Class devicepkgfile::meta;
		::Uml::Class filesystemname::meta;
		::Uml::Class componentfile::meta;
		::Uml::Class compositepartofdevice::meta;
		::Uml::Class deployondevice::meta;
		::Uml::Class componentplacement::meta;
		::Uml::Class devconfigcomponentfile::meta;
		::Uml::Class devicemanagersoftpkg::meta;
		::Uml::Class usesImpl::meta;
		::Uml::Class dependency::meta;
		::Uml::Class usesdeviceref::meta;
		::Uml::Class usesdevice::meta;
		::Uml::Class propertyref::meta;
		::Uml::Class implref::meta;
		::Uml::Class simplepropertyref::meta;
		::Uml::Class softpkgref::meta;
		::Uml::Class runtime::meta;
		::Uml::Class processor::meta;
		::Uml::Class os::meta;
		::Uml::Class humanlanguage::meta;
		::Uml::Class compiler::meta;
		::Uml::Class programminglanguage::meta;
		::Uml::Class code::meta;
		::Uml::Class author::meta;
		::Uml::Class implementation::meta;
		::Uml::Class SimulinkSystem::meta;
		::Uml::Class DataInport::meta;
		::Uml::Class DataOutport::meta;
		::Uml::Class DataFlow::meta;
		::Uml::Class DFFCO::meta;
		::Uml::Class Var::meta;
		::Uml::Class Const::meta;
		::Uml::Class Function::meta;
		::Uml::Class SimulinkImplementation::meta;
		::Uml::Class DataPort::meta;
		::Uml::Class DataMapping::meta;
		::Uml::Class WrapperPart::meta;
		::Uml::Class SimulinkVars::meta;
		::Uml::Class propertyfile::meta;
		::Uml::Class SoftPkgRef::meta;
		::Uml::Class SoftPkgFolder::meta;
		::Uml::Class SoftwareComponentRef::meta;
		::Uml::Class SoftwareComponentFolder::meta;
		::Uml::Class DevicePkgRef::meta;
		::Uml::Class DevicePackageFolder::meta;
		::Uml::Class DeviceConfigurationFolder::meta;
		::Uml::Class PropertiesFolder::meta;
		::Uml::Class SoftwarePackageRef::meta;
		::Uml::Class SoftwareComponent::meta;
		::Uml::Class Properties::meta;
		::Uml::Class SoftPkg::meta;
		::Uml::Class DevicePkg::meta;
		::Uml::Class DomainProfile::meta;
		::Uml::Class DomainManagerConfiguration::meta;
		::Uml::Class SoftwareAssembly::meta;
		::Uml::Class DeviceConfiguration::meta;
		::Uml::Class RootFolder::meta;
		::Uml::Class MgaObject::meta;
		::Uml::Attribute filemanager::meta_usagename;
		::Uml::Attribute deviceusedbythiscomponentref::meta_usesrefid;
		::Uml::Attribute componentproperties::meta_value_s;
		::Uml::Attribute InterfaceFolder::meta_name;
		::Uml::Attribute usesPort::meta_usesname;
		::Uml::Attribute providesPort::meta_providesname;
		::Uml::Attribute supports::meta_supportsname;
		::Uml::Attribute Interface::meta_repid;
		::Uml::Attribute port::meta_isControl;
		::Uml::Attribute port::meta_isData;
		::Uml::Attribute port::meta_isResponses;
		::Uml::Attribute port::meta_isTest;
		::Uml::Attribute hwdeviceregistration::meta_modelnumber;
		::Uml::Attribute hwdeviceregistration::meta_id;
		::Uml::Attribute hwdeviceregistration::meta_version;
		::Uml::Attribute hwdeviceregistration::meta_description;
		::Uml::Attribute hwdeviceregistration::meta_deviceclass;
		::Uml::Attribute hwdeviceregistration::meta_manufacturer;
		::Uml::Attribute structBase::meta_mode;
		::Uml::Attribute structBase::meta_configurationkind;
		::Uml::Attribute simpleBase::meta_range_min;
		::Uml::Attribute simpleBase::meta_units;
		::Uml::Attribute simpleBase::meta_range_max;
		::Uml::Attribute simpleBase::meta_action;
		::Uml::Attribute simpleBase::meta_mode;
		::Uml::Attribute simpleBase::meta_type;
		::Uml::Attribute simpleref::meta_value;
		::Uml::Attribute kind::meta_kindtype;
		::Uml::Attribute simplesequencePropertyDescriptor::meta_values;
		::Uml::Attribute property::meta_id;
		::Uml::Attribute property::meta_description;
		::Uml::Attribute simplePropertyDescriptor::meta_value;
		::Uml::Attribute enumeration::meta_value;
		::Uml::Attribute enumeration::meta_label;
		::Uml::Attribute devicepkgfile::meta_type;
		::Uml::Attribute filesystemname::meta_deviceid;
		::Uml::Attribute filesystemname::meta_mountname;
		::Uml::Attribute dependency::meta_type;
		::Uml::Attribute usesdevice::meta_type;
		::Uml::Attribute simplepropertyref::meta_value;
		::Uml::Attribute runtime::meta_version;
		::Uml::Attribute os::meta_version;
		::Uml::Attribute compiler::meta_version;
		::Uml::Attribute programminglanguage::meta_version;
		::Uml::Attribute code::meta_entrypoint;
		::Uml::Attribute code::meta_localfile;
		::Uml::Attribute code::meta_stacksize;
		::Uml::Attribute code::meta_priority;
		::Uml::Attribute code::meta_type;
		::Uml::Attribute author::meta_company;
		::Uml::Attribute author::meta_names;
		::Uml::Attribute author::meta_webpage;
		::Uml::Attribute implementation::meta_aepcompliance;
		::Uml::Attribute implementation::meta_description;
		::Uml::Attribute implementation::meta_id;
		::Uml::Attribute propertyfile::meta_type;
		::Uml::Attribute SoftPkgFolder::meta_name;
		::Uml::Attribute SoftwareComponentFolder::meta_name;
		::Uml::Attribute DevicePackageFolder::meta_name;
		::Uml::Attribute DeviceConfigurationFolder::meta_name;
		::Uml::Attribute PropertiesFolder::meta_name;
		::Uml::Attribute SoftwareComponent::meta_componentrepid;
		::Uml::Attribute SoftwareComponent::meta_corbaversion;
		::Uml::Attribute SoftwareComponent::meta_componenttype;
		::Uml::Attribute SoftwareComponent::meta_usagename;
		::Uml::Attribute SoftPkg::meta_description;
		::Uml::Attribute SoftPkg::meta_title;
		::Uml::Attribute SoftPkg::meta_type;
		::Uml::Attribute SoftPkg::meta_version;
		::Uml::Attribute SoftPkg::meta_id;
		::Uml::Attribute DevicePkg::meta_version;
		::Uml::Attribute DevicePkg::meta_id;
		::Uml::Attribute DevicePkg::meta_title;
		::Uml::Attribute DevicePkg::meta_description;
		::Uml::Attribute DomainProfile::meta_name;
		::Uml::Attribute DomainManagerConfiguration::meta_description;
		::Uml::Attribute SoftwareAssembly::meta_description;
		::Uml::Attribute SoftwareAssembly::meta_version;
		::Uml::Attribute DeviceConfiguration::meta_id;
		::Uml::Attribute DeviceConfiguration::meta_description;
		::Uml::Attribute DeviceConfiguration::meta_domainmanager;
		::Uml::Attribute RootFolder::meta_name;
		::Uml::Attribute MgaObject::meta_position;
		::Uml::Attribute MgaObject::meta_name;
		::Uml::AssociationRole connectdestBase::meta_srcusestodestConn, connectdestBase::meta_srcusestodestConn_rev;
		::Uml::AssociationRole componentplacement_Members_Base::meta_setcomponentplacement;
		::Uml::AssociationRole usestodestConn::meta_dstusestodestConn_end_;
		::Uml::AssociationRole usestodestConn::meta_srcusestodestConn_end_;
		::Uml::AssociationRole externaltodestConn::meta_dstexternaltodestConn_end_;
		::Uml::AssociationRole externaltodestConn::meta_srcexternaltodestConn_end_;
		::Uml::AssociationRole externalport::meta_dstexternaltodestConn, externalport::meta_dstexternaltodestConn_rev;
		::Uml::AssociationRole externaltodestBase::meta_srcexternaltodestConn, externaltodestBase::meta_srcexternaltodestConn_rev;
		::Uml::AssociationRole componentsupportedinterface::meta_ref;
		::Uml::AssociationRole freestandingtoprovidedConn::meta_srcfreestandingtoprovidedConn_end_;
		::Uml::AssociationRole freestandingtoprovidedConn::meta_dstfreestandingtoprovidedConn_end_;
		::Uml::AssociationRole usestofreestandingConn::meta_dstusestofreestandingConn_end_;
		::Uml::AssociationRole usestofreestandingConn::meta_srcusestofreestandingConn_end_;
		::Uml::AssociationRole FreestandingPort::meta_srcusestofreestandingConn, FreestandingPort::meta_srcusestofreestandingConn_rev;
		::Uml::AssociationRole FreestandingPort::meta_dstfreestandingtoprovidedConn, FreestandingPort::meta_dstfreestandingtoprovidedConn_rev;
		::Uml::AssociationRole ControlFlow::meta_dstControlFlow_end_;
		::Uml::AssociationRole ControlFlow::meta_srcControlFlow_end_;
		::Uml::AssociationRole CFSrc::meta_dstControlFlow, CFSrc::meta_dstControlFlow_rev;
		::Uml::AssociationRole ArgRef::meta_referedbyArg;
		::Uml::AssociationRole Arg::meta_ref;
		::Uml::AssociationRole Branch::meta_dstElseFlow, Branch::meta_dstElseFlow_rev;
		::Uml::AssociationRole Branch::meta_dstThenFlow, Branch::meta_dstThenFlow_rev;
		::Uml::AssociationRole CFDst::meta_srcControlFlow, CFDst::meta_srcControlFlow_rev;
		::Uml::AssociationRole CFDst::meta_srcElseFlow, CFDst::meta_srcElseFlow_rev;
		::Uml::AssociationRole CFDst::meta_srcThenFlow, CFDst::meta_srcThenFlow_rev;
		::Uml::AssociationRole ThenFlow::meta_srcThenFlow_end_;
		::Uml::AssociationRole ThenFlow::meta_dstThenFlow_end_;
		::Uml::AssociationRole ElseFlow::meta_srcElseFlow_end_;
		::Uml::AssociationRole ElseFlow::meta_dstElseFlow_end_;
		::Uml::AssociationRole controllertocompinst::meta_dstcontrollertocompinst_end_;
		::Uml::AssociationRole controllertocompinst::meta_srccontrollertocompinst_end_;
		::Uml::AssociationRole assemblycontroller::meta_dstcontrollertocompinst, assemblycontroller::meta_dstcontrollertocompinst_rev;
		::Uml::AssociationRole componentresourcefactorytopropertiesConn::meta_srccomponentresourcefactorytopropertiesConn_end_;
		::Uml::AssociationRole componentresourcefactorytopropertiesConn::meta_dstcomponentresourcefactorytopropertiesConn_end_;
		::Uml::AssociationRole findcomponentConn::meta_srcfindcomponentConn_end_;
		::Uml::AssociationRole findcomponentConn::meta_dstfindcomponentConn_end_;
		::Uml::AssociationRole componentresourcefactoryref::meta_dstfindcomponentConn, componentresourcefactoryref::meta_dstfindcomponentConn_rev;
		::Uml::AssociationRole componentresourcefactoryref::meta_dstcomponentresourcefactorytopropertiesConn, componentresourcefactoryref::meta_dstcomponentresourcefactorytopropertiesConn_rev;
		::Uml::AssociationRole componentresourcefactoryref::meta_ref;
		::Uml::AssociationRole propertyProxy::meta_referedbycomponentproperties;
		::Uml::AssociationRole componentpropertiesConn::meta_dstcomponentpropertiesConn_end_;
		::Uml::AssociationRole componentpropertiesConn::meta_srccomponentpropertiesConn_end_;
		::Uml::AssociationRole componentproperties::meta_srccomponentresourcefactorytopropertiesConn, componentproperties::meta_srccomponentresourcefactorytopropertiesConn_rev;
		::Uml::AssociationRole componentproperties::meta_ref;
		::Uml::AssociationRole componentproperties::meta_srccomponentpropertiesConn, componentproperties::meta_srccomponentpropertiesConn_rev;
		::Uml::AssociationRole componentplacementConn::meta_srccomponentplacementConn_end_;
		::Uml::AssociationRole componentplacementConn::meta_dstcomponentplacementConn_end_;
		::Uml::AssociationRole hostcollocation::meta_members;
		::Uml::AssociationRole usesPort::meta_dstusestodestConn, usesPort::meta_dstusestodestConn_rev;
		::Uml::AssociationRole usesPort::meta_dstusestofreestandingConn, usesPort::meta_dstusestofreestandingConn_rev;
		::Uml::AssociationRole usesPort::meta_ref;
		::Uml::AssociationRole providesPort::meta_srcfreestandingtoprovidedConn, providesPort::meta_srcfreestandingtoprovidedConn_rev;
		::Uml::AssociationRole providesPort::meta_ref;
		::Uml::AssociationRole supports::meta_referedbycomponentsupportedinterface;
		::Uml::AssociationRole supports::meta_ref;
		::Uml::AssociationRole inheritsfrom::meta_srcinheritsfrom_end_;
		::Uml::AssociationRole inheritsfrom::meta_dstinheritsfrom_end_;
		::Uml::AssociationRole Interface::meta_referedbyusesPort;
		::Uml::AssociationRole Interface::meta_referedbyprovidesPort;
		::Uml::AssociationRole Interface::meta_referedbysupports;
		::Uml::AssociationRole Interface::meta_dstinheritsfrom, Interface::meta_dstinheritsfrom_rev;
		::Uml::AssociationRole Interface::meta_srcinheritsfrom, Interface::meta_srcinheritsfrom_rev;
		::Uml::AssociationRole devicepkgref::meta_ref;
		::Uml::AssociationRole simpleref::meta_ref;
		::Uml::AssociationRole structref::meta_ref;
		::Uml::AssociationRole structPropertyDescriptor::meta_referedbystructref;
		::Uml::AssociationRole simplePropertyDescriptor::meta_referedbystructvalue;
		::Uml::AssociationRole simplePropertyDescriptor::meta_referedbysimplepropertyref;
		::Uml::AssociationRole devicepkgfile::meta_ref;
		::Uml::AssociationRole componentfile::meta_dstcomponentplacementConn, componentfile::meta_dstcomponentplacementConn_rev;
		::Uml::AssociationRole componentfile::meta_ref;
		::Uml::AssociationRole compositepartofdevice::meta_ref;
		::Uml::AssociationRole deployondevice::meta_ref;
		::Uml::AssociationRole componentplacement::meta_members;
		::Uml::AssociationRole devconfigcomponentfile::meta_ref;
		::Uml::AssociationRole devicemanagersoftpkg::meta_ref;
		::Uml::AssociationRole usesImpl::meta_dstusesImpl_end_;
		::Uml::AssociationRole usesImpl::meta_srcusesImpl_end_;
		::Uml::AssociationRole usesdeviceref::meta_ref;
		::Uml::AssociationRole propertyref::meta_ref;
		::Uml::AssociationRole implref::meta_srcusesImpl, implref::meta_srcusesImpl_rev;
		::Uml::AssociationRole implref::meta_ref;
		::Uml::AssociationRole simplepropertyref::meta_ref;
		::Uml::AssociationRole softpkgref::meta_dstusesImpl, softpkgref::meta_dstusesImpl_rev;
		::Uml::AssociationRole softpkgref::meta_ref;
		::Uml::AssociationRole implementation::meta_referedbyimplref;
		::Uml::AssociationRole DataFlow::meta_dstDataFlow_end_;
		::Uml::AssociationRole DataFlow::meta_srcDataFlow_end_;
		::Uml::AssociationRole DFFCO::meta_srcDataFlow, DFFCO::meta_srcDataFlow_rev;
		::Uml::AssociationRole DFFCO::meta_dstDataFlow, DFFCO::meta_dstDataFlow_rev;
		::Uml::AssociationRole propertyfile::meta_ref;
		::Uml::AssociationRole SoftPkgRef::meta_ref;
		::Uml::AssociationRole SoftwareComponentRef::meta_ref;
		::Uml::AssociationRole DevicePkgRef::meta_ref;
		::Uml::AssociationRole SoftwarePackageRef::meta_ref;
		::Uml::AssociationRole SoftwareComponent::meta_srccontrollertocompinst, SoftwareComponent::meta_srccontrollertocompinst_rev;
		::Uml::AssociationRole SoftwareComponent::meta_srcfindcomponentConn, SoftwareComponent::meta_srcfindcomponentConn_rev;
		::Uml::AssociationRole SoftwareComponent::meta_referedbycomponentresourcefactoryref;
		::Uml::AssociationRole SoftwareComponent::meta_dstcomponentpropertiesConn, SoftwareComponent::meta_dstcomponentpropertiesConn_rev;
		::Uml::AssociationRole SoftwareComponent::meta_sethostcollocation;
		::Uml::AssociationRole SoftwareComponent::meta_srccomponentplacementConn, SoftwareComponent::meta_srccomponentplacementConn_rev;
		::Uml::AssociationRole SoftwareComponent::meta_referedbycompositepartofdevice;
		::Uml::AssociationRole SoftwareComponent::meta_referedbydeployondevice;
		::Uml::AssociationRole SoftwareComponent::meta_referedbySoftwareComponentRef;
		::Uml::AssociationRole Properties::meta_referedbypropertyref;
		::Uml::AssociationRole Properties::meta_referedbypropertyfile;
		::Uml::AssociationRole SoftPkg::meta_referedbycomponentfile;
		::Uml::AssociationRole SoftPkg::meta_referedbydevconfigcomponentfile;
		::Uml::AssociationRole SoftPkg::meta_referedbydevicemanagersoftpkg;
		::Uml::AssociationRole SoftPkg::meta_referedbysoftpkgref;
		::Uml::AssociationRole SoftPkg::meta_referedbySoftPkgRef;
		::Uml::AssociationRole SoftPkg::meta_referedbySoftwarePackageRef;
		::Uml::AssociationRole DevicePkg::meta_referedbydevicepkgref;
		::Uml::AssociationRole DevicePkg::meta_referedbydevicepkgfile;
		::Uml::AssociationRole DevicePkg::meta_referedbyusesdeviceref;
		::Uml::AssociationRole DevicePkg::meta_referedbyDevicePkgRef;
		::Uml::CompositionParentRole usestodestConn::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole usestodestConn::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole externaltodestConn::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole externalport::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole componentsupportedinterface::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole freestandingtoprovidedConn::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole freestandingtoprovidedConn::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole usestofreestandingConn::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole usestofreestandingConn::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole thisPort::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole FreestandingPort::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole service::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole Arg::meta_SimulinkEntrypoint_parent;
		::Uml::CompositionParentRole SimulinkEntrypoint::meta_SimulinkSystem_parent;
		::Uml::CompositionParentRole controllertocompinst::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole assemblycontroller::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole componentresourcefactorytopropertiesConn::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole findcomponentConn::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole componentresourcefactoryref::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole componentpropertiesConn::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole componentpropertiesConn::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole componentproperties::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole componentproperties::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole componentplacementConn::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole hostcollocation::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole InterfaceFolder::meta_RootFolder_parent;
		::Uml::CompositionParentRole usesPort::meta_uses_SoftwareComponent_parent;
		::Uml::CompositionParentRole providesPort::meta_provides_SoftwareComponent_parent;
		::Uml::CompositionParentRole supports::meta_SoftwareComponent_parent;
		::Uml::CompositionParentRole inheritsfrom::meta_interfaces_parent;
		::Uml::CompositionParentRole Interface::meta_interfaces_parent;
		::Uml::CompositionParentRole interfaces::meta_InterfaceFolder_parent;
		::Uml::CompositionParentRole devicepkgref::meta_hwdeviceregistration_parent;
		::Uml::CompositionParentRole hwdeviceregistration::meta_DevicePkg_parent;
		::Uml::CompositionParentRole childhwdevice::meta_hwdeviceregistration_parent;
		::Uml::CompositionParentRole structvalue::meta_structsequencePropertyDescriptor_parent;
		::Uml::CompositionParentRole simpleref::meta_structvalue_parent;
		::Uml::CompositionParentRole structref::meta_structref_structsequencePropertyDescriptor_parent;
		::Uml::CompositionParentRole kind::meta_simpleBase_parent;
		::Uml::CompositionParentRole property::meta_properties_Properties_parent;
		::Uml::CompositionParentRole simplePropertyDescriptor::meta_resultvalue_testPropertyDescriptor_parent;
		::Uml::CompositionParentRole simplePropertyDescriptor::meta_simple_structPropertyDescriptor_parent;
		::Uml::CompositionParentRole simplePropertyDescriptor::meta_inputvalue_testPropertyDescriptor_parent;
		::Uml::CompositionParentRole enumeration::meta_enumerations_simplePropertyDescriptor_parent;
		::Uml::CompositionParentRole devicepkgfile::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole filesystemname::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole componentfile::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole componentfile::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole compositepartofdevice::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole deployondevice::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole componentplacement::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole devconfigcomponentfile::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole devicemanagersoftpkg::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole usesImpl::meta_implementation_parent;
		::Uml::CompositionParentRole dependency::meta_implementation_parent;
		::Uml::CompositionParentRole usesdeviceref::meta_usesdevice_parent;
		::Uml::CompositionParentRole usesdevice::meta_SoftPkg_parent;
		::Uml::CompositionParentRole usesdevice::meta_implementation_parent;
		::Uml::CompositionParentRole propertyref::meta_usesdevice_parent;
		::Uml::CompositionParentRole implref::meta_implementation_parent;
		::Uml::CompositionParentRole runtime::meta_implementation_parent;
		::Uml::CompositionParentRole processor::meta_implementation_parent;
		::Uml::CompositionParentRole os::meta_implementation_parent;
		::Uml::CompositionParentRole humanlanguage::meta_implementation_parent;
		::Uml::CompositionParentRole compiler::meta_implementation_parent;
		::Uml::CompositionParentRole programminglanguage::meta_implementation_parent;
		::Uml::CompositionParentRole code::meta_implementation_parent;
		::Uml::CompositionParentRole author::meta_DevicePkg_parent;
		::Uml::CompositionParentRole author::meta_SoftPkg_parent;
		::Uml::CompositionParentRole implementation::meta_SoftPkg_parent;
		::Uml::CompositionParentRole SimulinkSystem::meta_SimulinkImplementation_parent;
		::Uml::CompositionParentRole DataPort::meta_SimulinkSystem_parent;
		::Uml::CompositionParentRole WrapperPart::meta_SimulinkImplementation_parent;
		::Uml::CompositionParentRole SimulinkVars::meta_SimulinkSystem_parent;
		::Uml::CompositionParentRole propertyfile::meta_hwdeviceregistration_parent;
		::Uml::CompositionParentRole propertyfile::meta_implementation_parent;
		::Uml::CompositionParentRole propertyfile::meta_SoftwareComponent_parent;
		::Uml::CompositionParentRole propertyfile::meta_SoftPkg_parent;
		::Uml::CompositionParentRole SoftPkgRef::meta_DomainManagerConfiguration_parent;
		::Uml::CompositionParentRole SoftPkgFolder::meta_RootFolder_parent;
		::Uml::CompositionParentRole SoftPkgFolder::meta_DomainProfile_parent;
		::Uml::CompositionParentRole SoftwareComponentRef::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole SoftwareComponentRef::meta_descriptor_SoftPkg_parent;
		::Uml::CompositionParentRole SoftwareComponentFolder::meta_RootFolder_parent;
		::Uml::CompositionParentRole SoftwareComponentFolder::meta_DomainProfile_parent;
		::Uml::CompositionParentRole DevicePkgRef::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole DevicePackageFolder::meta_RootFolder_parent;
		::Uml::CompositionParentRole DevicePackageFolder::meta_DomainProfile_parent;
		::Uml::CompositionParentRole DeviceConfigurationFolder::meta_RootFolder_parent;
		::Uml::CompositionParentRole DeviceConfigurationFolder::meta_DomainProfile_parent;
		::Uml::CompositionParentRole PropertiesFolder::meta_RootFolder_parent;
		::Uml::CompositionParentRole PropertiesFolder::meta_DomainProfile_parent;
		::Uml::CompositionParentRole SoftwarePackageRef::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole SoftwarePackageRef::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole SoftwareComponent::meta_SoftwareComponentFolder_parent;
		::Uml::CompositionParentRole SoftwareComponent::meta_SoftwareAssembly_parent;
		::Uml::CompositionParentRole SoftwareComponent::meta_DeviceConfiguration_parent;
		::Uml::CompositionParentRole Properties::meta_PropertiesFolder_parent;
		::Uml::CompositionParentRole SoftPkg::meta_SoftPkgFolder_parent;
		::Uml::CompositionParentRole DevicePkg::meta_DevicePackageFolder_parent;
		::Uml::CompositionParentRole DomainProfile::meta_RootFolder_parent;
		::Uml::CompositionParentRole DomainManagerConfiguration::meta_DomainProfile_parent;
		::Uml::CompositionParentRole SoftwareAssembly::meta_DomainProfile_parent;
		::Uml::CompositionParentRole DeviceConfiguration::meta_DeviceConfigurationFolder_parent;
		::Uml::CompositionParentRole RootFolder::meta_RootFolder_parent;
		::Uml::CompositionChildRole SimulinkEntrypoint::meta_Arg_children;
		::Uml::CompositionChildRole InterfaceFolder::meta_interfaces_children;
		::Uml::CompositionChildRole interfaces::meta_Interface_children;
		::Uml::CompositionChildRole interfaces::meta_inheritsfrom_children;
		::Uml::CompositionChildRole hwdeviceregistration::meta_devicepkgref_children;
		::Uml::CompositionChildRole hwdeviceregistration::meta_propertyfile_children;
		::Uml::CompositionChildRole hwdeviceregistration::meta_childhwdevice_children;
		::Uml::CompositionChildRole simpleBase::meta_kind_children;
		::Uml::CompositionChildRole structvalue::meta_simpleref_children;
		::Uml::CompositionChildRole structsequencePropertyDescriptor::meta_structref;
		::Uml::CompositionChildRole structsequencePropertyDescriptor::meta_structvalue_children;
		::Uml::CompositionChildRole structPropertyDescriptor::meta_simple;
		::Uml::CompositionChildRole testPropertyDescriptor::meta_inputvalue;
		::Uml::CompositionChildRole testPropertyDescriptor::meta_resultvalue;
		::Uml::CompositionChildRole simplePropertyDescriptor::meta_enumerations;
		::Uml::CompositionChildRole usesdevice::meta_propertyref_children;
		::Uml::CompositionChildRole usesdevice::meta_usesdeviceref_children;
		::Uml::CompositionChildRole implementation::meta_implref_children;
		::Uml::CompositionChildRole implementation::meta_usesImpl_children;
		::Uml::CompositionChildRole implementation::meta_dependency_children;
		::Uml::CompositionChildRole implementation::meta_code_child;
		::Uml::CompositionChildRole implementation::meta_humanlanguage_child;
		::Uml::CompositionChildRole implementation::meta_runtime_child;
		::Uml::CompositionChildRole implementation::meta_compiler_child;
		::Uml::CompositionChildRole implementation::meta_processor_children;
		::Uml::CompositionChildRole implementation::meta_os_children;
		::Uml::CompositionChildRole implementation::meta_propertyfile_children;
		::Uml::CompositionChildRole implementation::meta_usesdevice_children;
		::Uml::CompositionChildRole implementation::meta_programminglanguage_child;
		::Uml::CompositionChildRole SimulinkSystem::meta_DataPort_children;
		::Uml::CompositionChildRole SimulinkSystem::meta_SimulinkVars_children;
		::Uml::CompositionChildRole SimulinkSystem::meta_SimulinkEntrypoint_children;
		::Uml::CompositionChildRole SimulinkImplementation::meta_WrapperPart_children;
		::Uml::CompositionChildRole SimulinkImplementation::meta_SimulinkSystem_children;
		::Uml::CompositionChildRole SoftPkgFolder::meta_SoftPkg_children;
		::Uml::CompositionChildRole SoftwareComponentFolder::meta_SoftwareComponent_children;
		::Uml::CompositionChildRole DevicePackageFolder::meta_DevicePkg_children;
		::Uml::CompositionChildRole DeviceConfigurationFolder::meta_DeviceConfiguration_children;
		::Uml::CompositionChildRole PropertiesFolder::meta_Properties_children;
		::Uml::CompositionChildRole SoftwareComponent::meta_supports_children;
		::Uml::CompositionChildRole SoftwareComponent::meta_propertyfile_child;
		::Uml::CompositionChildRole SoftwareComponent::meta_uses;
		::Uml::CompositionChildRole SoftwareComponent::meta_provides;
		::Uml::CompositionChildRole Properties::meta_properties;
		::Uml::CompositionChildRole SoftPkg::meta_propertyfile_child;
		::Uml::CompositionChildRole SoftPkg::meta_descriptor;
		::Uml::CompositionChildRole SoftPkg::meta_author_children;
		::Uml::CompositionChildRole SoftPkg::meta_usesdevice_children;
		::Uml::CompositionChildRole SoftPkg::meta_implementation_children;
		::Uml::CompositionChildRole DevicePkg::meta_author_children;
		::Uml::CompositionChildRole DevicePkg::meta_hwdeviceregistration_children;
		::Uml::CompositionChildRole DomainProfile::meta_SoftwareComponentFolder_children;
		::Uml::CompositionChildRole DomainProfile::meta_SoftPkgFolder_children;
		::Uml::CompositionChildRole DomainProfile::meta_DevicePackageFolder_children;
		::Uml::CompositionChildRole DomainProfile::meta_DeviceConfigurationFolder_children;
		::Uml::CompositionChildRole DomainProfile::meta_PropertiesFolder_children;
		::Uml::CompositionChildRole DomainProfile::meta_SoftwareAssembly_children;
		::Uml::CompositionChildRole DomainProfile::meta_DomainManagerConfiguration_children;
		::Uml::CompositionChildRole DomainManagerConfiguration::meta_SoftPkgRef_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_componentsupportedinterface_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_SoftwarePackageRef_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_usestodestConn_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_usestofreestandingConn_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_freestandingtoprovidedConn_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_externaltodestConn_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_externalport_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_FreestandingPort_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_controllertocompinst_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_assemblycontroller_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_SoftwareComponent_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_componentfile_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_componentresourcefactoryref_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_componentproperties_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_findcomponentConn_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_componentresourcefactorytopropertiesConn_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_componentpropertiesConn_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_componentplacementConn_children;
		::Uml::CompositionChildRole SoftwareAssembly::meta_hostcollocation_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_SoftwarePackageRef_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_DevicePkgRef_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_devicepkgfile_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_thisPort_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_SoftwareComponent_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_filesystemname_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_componentpropertiesConn_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_componentproperties_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_componentfile_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_service_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_freestandingtoprovidedConn_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_usestofreestandingConn_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_usestodestConn_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_SoftwareComponentRef_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_compositepartofdevice_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_deployondevice_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_componentplacement_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_devconfigcomponentfile_children;
		::Uml::CompositionChildRole DeviceConfiguration::meta_devicemanagersoftpkg_children;
		::Uml::CompositionChildRole RootFolder::meta_SoftPkgFolder_children;
		::Uml::CompositionChildRole RootFolder::meta_InterfaceFolder_children;
		::Uml::CompositionChildRole RootFolder::meta_SoftwareComponentFolder_children;
		::Uml::CompositionChildRole RootFolder::meta_DevicePackageFolder_children;
		::Uml::CompositionChildRole RootFolder::meta_DeviceConfigurationFolder_children;
		::Uml::CompositionChildRole RootFolder::meta_PropertiesFolder_children;
		::Uml::CompositionChildRole RootFolder::meta_DomainProfile_children;
		::Uml::CompositionChildRole RootFolder::meta_RootFolder_children;
		::Uml::Constraint SoftPkg::meta_OnlyOneSCD;
		::Uml::Constraint DomainProfile::meta_OnlyOneSAD;
		void Creates()
		{
			connectdestBase::meta = ::Uml::Class::Create(umldiagram);
			componentplacement_Members_Base::meta = ::Uml::Class::Create(umldiagram);
			usestodestConn::meta = ::Uml::Class::Create(umldiagram);
			externaltodestConn::meta = ::Uml::Class::Create(umldiagram);
			externalport::meta = ::Uml::Class::Create(umldiagram);
			externaltodestBase::meta = ::Uml::Class::Create(umldiagram);
			componentsupportedinterface::meta = ::Uml::Class::Create(umldiagram);
			freestandingtoprovidedConn::meta = ::Uml::Class::Create(umldiagram);
			usestofreestandingConn::meta = ::Uml::Class::Create(umldiagram);
			thisPort::meta = ::Uml::Class::Create(umldiagram);
			log::meta = ::Uml::Class::Create(umldiagram);
			filemanager::meta = ::Uml::Class::Create(umldiagram);
			namingservice::meta = ::Uml::Class::Create(umldiagram);
			FreestandingPort::meta = ::Uml::Class::Create(umldiagram);
			deviceusedbythiscomponentref::meta = ::Uml::Class::Create(umldiagram);
			service::meta = ::Uml::Class::Create(umldiagram);
			eventchannel::meta = ::Uml::Class::Create(umldiagram);
			devicethatloadedthiscomponentref::meta = ::Uml::Class::Create(umldiagram);
			Event::meta = ::Uml::Class::Create(umldiagram);
			ControlFlow::meta = ::Uml::Class::Create(umldiagram);
			CFSrc::meta = ::Uml::Class::Create(umldiagram);
			ArgRef::meta = ::Uml::Class::Create(umldiagram);
			Arg::meta = ::Uml::Class::Create(umldiagram);
			SimulinkEntrypoint::meta = ::Uml::Class::Create(umldiagram);
			Branch::meta = ::Uml::Class::Create(umldiagram);
			CFDst::meta = ::Uml::Class::Create(umldiagram);
			ThenFlow::meta = ::Uml::Class::Create(umldiagram);
			ElseFlow::meta = ::Uml::Class::Create(umldiagram);
			controllertocompinst::meta = ::Uml::Class::Create(umldiagram);
			assemblycontroller::meta = ::Uml::Class::Create(umldiagram);
			componentresourcefactorytopropertiesConn::meta = ::Uml::Class::Create(umldiagram);
			findcomponentConn::meta = ::Uml::Class::Create(umldiagram);
			componentresourcefactoryref::meta = ::Uml::Class::Create(umldiagram);
			propertyProxy::meta = ::Uml::Class::Create(umldiagram);
			componentpropertiesConn::meta = ::Uml::Class::Create(umldiagram);
			componentproperties::meta = ::Uml::Class::Create(umldiagram);
			componentplacementConn::meta = ::Uml::Class::Create(umldiagram);
			hostcollocation::meta = ::Uml::Class::Create(umldiagram);
			InterfaceFolder::meta = ::Uml::Class::Create(umldiagram);
			usesPort::meta = ::Uml::Class::Create(umldiagram);
			providesPort::meta = ::Uml::Class::Create(umldiagram);
			supports::meta = ::Uml::Class::Create(umldiagram);
			inheritsfrom::meta = ::Uml::Class::Create(umldiagram);
			Interface::meta = ::Uml::Class::Create(umldiagram);
			interfaces::meta = ::Uml::Class::Create(umldiagram);
			port::meta = ::Uml::Class::Create(umldiagram);
			componentfeatures::meta = ::Uml::Class::Create(umldiagram);
			devicepkgref::meta = ::Uml::Class::Create(umldiagram);
			hwdeviceregistration::meta = ::Uml::Class::Create(umldiagram);
			childhwdevice::meta = ::Uml::Class::Create(umldiagram);
			structBase::meta = ::Uml::Class::Create(umldiagram);
			simpleBase::meta = ::Uml::Class::Create(umldiagram);
			structvalue::meta = ::Uml::Class::Create(umldiagram);
			simpleref::meta = ::Uml::Class::Create(umldiagram);
			structref::meta = ::Uml::Class::Create(umldiagram);
			structsequencePropertyDescriptor::meta = ::Uml::Class::Create(umldiagram);
			structPropertyDescriptor::meta = ::Uml::Class::Create(umldiagram);
			testPropertyDescriptor::meta = ::Uml::Class::Create(umldiagram);
			kind::meta = ::Uml::Class::Create(umldiagram);
			simplesequencePropertyDescriptor::meta = ::Uml::Class::Create(umldiagram);
			property::meta = ::Uml::Class::Create(umldiagram);
			simplePropertyDescriptor::meta = ::Uml::Class::Create(umldiagram);
			enumeration::meta = ::Uml::Class::Create(umldiagram);
			devicepkgfile::meta = ::Uml::Class::Create(umldiagram);
			filesystemname::meta = ::Uml::Class::Create(umldiagram);
			componentfile::meta = ::Uml::Class::Create(umldiagram);
			compositepartofdevice::meta = ::Uml::Class::Create(umldiagram);
			deployondevice::meta = ::Uml::Class::Create(umldiagram);
			componentplacement::meta = ::Uml::Class::Create(umldiagram);
			devconfigcomponentfile::meta = ::Uml::Class::Create(umldiagram);
			devicemanagersoftpkg::meta = ::Uml::Class::Create(umldiagram);
			usesImpl::meta = ::Uml::Class::Create(umldiagram);
			dependency::meta = ::Uml::Class::Create(umldiagram);
			usesdeviceref::meta = ::Uml::Class::Create(umldiagram);
			usesdevice::meta = ::Uml::Class::Create(umldiagram);
			propertyref::meta = ::Uml::Class::Create(umldiagram);
			implref::meta = ::Uml::Class::Create(umldiagram);
			simplepropertyref::meta = ::Uml::Class::Create(umldiagram);
			softpkgref::meta = ::Uml::Class::Create(umldiagram);
			runtime::meta = ::Uml::Class::Create(umldiagram);
			processor::meta = ::Uml::Class::Create(umldiagram);
			os::meta = ::Uml::Class::Create(umldiagram);
			humanlanguage::meta = ::Uml::Class::Create(umldiagram);
			compiler::meta = ::Uml::Class::Create(umldiagram);
			programminglanguage::meta = ::Uml::Class::Create(umldiagram);
			code::meta = ::Uml::Class::Create(umldiagram);
			author::meta = ::Uml::Class::Create(umldiagram);
			implementation::meta = ::Uml::Class::Create(umldiagram);
			SimulinkSystem::meta = ::Uml::Class::Create(umldiagram);
			DataInport::meta = ::Uml::Class::Create(umldiagram);
			DataOutport::meta = ::Uml::Class::Create(umldiagram);
			DataFlow::meta = ::Uml::Class::Create(umldiagram);
			DFFCO::meta = ::Uml::Class::Create(umldiagram);
			Var::meta = ::Uml::Class::Create(umldiagram);
			Const::meta = ::Uml::Class::Create(umldiagram);
			Function::meta = ::Uml::Class::Create(umldiagram);
			SimulinkImplementation::meta = ::Uml::Class::Create(umldiagram);
			DataPort::meta = ::Uml::Class::Create(umldiagram);
			DataMapping::meta = ::Uml::Class::Create(umldiagram);
			WrapperPart::meta = ::Uml::Class::Create(umldiagram);
			SimulinkVars::meta = ::Uml::Class::Create(umldiagram);
			propertyfile::meta = ::Uml::Class::Create(umldiagram);
			SoftPkgRef::meta = ::Uml::Class::Create(umldiagram);
			SoftPkgFolder::meta = ::Uml::Class::Create(umldiagram);
			SoftwareComponentRef::meta = ::Uml::Class::Create(umldiagram);
			SoftwareComponentFolder::meta = ::Uml::Class::Create(umldiagram);
			DevicePkgRef::meta = ::Uml::Class::Create(umldiagram);
			DevicePackageFolder::meta = ::Uml::Class::Create(umldiagram);
			DeviceConfigurationFolder::meta = ::Uml::Class::Create(umldiagram);
			PropertiesFolder::meta = ::Uml::Class::Create(umldiagram);
			SoftwarePackageRef::meta = ::Uml::Class::Create(umldiagram);
			SoftwareComponent::meta = ::Uml::Class::Create(umldiagram);
			Properties::meta = ::Uml::Class::Create(umldiagram);
			SoftPkg::meta = ::Uml::Class::Create(umldiagram);
			DevicePkg::meta = ::Uml::Class::Create(umldiagram);
			DomainProfile::meta = ::Uml::Class::Create(umldiagram);
			DomainManagerConfiguration::meta = ::Uml::Class::Create(umldiagram);
			SoftwareAssembly::meta = ::Uml::Class::Create(umldiagram);
			DeviceConfiguration::meta = ::Uml::Class::Create(umldiagram);
			RootFolder::meta = ::Uml::Class::Create(umldiagram);
			MgaObject::meta = ::Uml::Class::Create(umldiagram);
			filemanager::meta_usagename = ::Uml::Attribute::Create(filemanager::meta);
			deviceusedbythiscomponentref::meta_usesrefid = ::Uml::Attribute::Create(deviceusedbythiscomponentref::meta);
			componentproperties::meta_value_s = ::Uml::Attribute::Create(componentproperties::meta);
			InterfaceFolder::meta_name = ::Uml::Attribute::Create(InterfaceFolder::meta);
			usesPort::meta_usesname = ::Uml::Attribute::Create(usesPort::meta);
			providesPort::meta_providesname = ::Uml::Attribute::Create(providesPort::meta);
			supports::meta_supportsname = ::Uml::Attribute::Create(supports::meta);
			Interface::meta_repid = ::Uml::Attribute::Create(Interface::meta);
			port::meta_isControl = ::Uml::Attribute::Create(port::meta);
			port::meta_isData = ::Uml::Attribute::Create(port::meta);
			port::meta_isResponses = ::Uml::Attribute::Create(port::meta);
			port::meta_isTest = ::Uml::Attribute::Create(port::meta);
			hwdeviceregistration::meta_modelnumber = ::Uml::Attribute::Create(hwdeviceregistration::meta);
			hwdeviceregistration::meta_id = ::Uml::Attribute::Create(hwdeviceregistration::meta);
			hwdeviceregistration::meta_version = ::Uml::Attribute::Create(hwdeviceregistration::meta);
			hwdeviceregistration::meta_description = ::Uml::Attribute::Create(hwdeviceregistration::meta);
			hwdeviceregistration::meta_deviceclass = ::Uml::Attribute::Create(hwdeviceregistration::meta);
			hwdeviceregistration::meta_manufacturer = ::Uml::Attribute::Create(hwdeviceregistration::meta);
			structBase::meta_mode = ::Uml::Attribute::Create(structBase::meta);
			structBase::meta_configurationkind = ::Uml::Attribute::Create(structBase::meta);
			simpleBase::meta_range_min = ::Uml::Attribute::Create(simpleBase::meta);
			simpleBase::meta_units = ::Uml::Attribute::Create(simpleBase::meta);
			simpleBase::meta_range_max = ::Uml::Attribute::Create(simpleBase::meta);
			simpleBase::meta_action = ::Uml::Attribute::Create(simpleBase::meta);
			simpleBase::meta_mode = ::Uml::Attribute::Create(simpleBase::meta);
			simpleBase::meta_type = ::Uml::Attribute::Create(simpleBase::meta);
			simpleref::meta_value = ::Uml::Attribute::Create(simpleref::meta);
			kind::meta_kindtype = ::Uml::Attribute::Create(kind::meta);
			simplesequencePropertyDescriptor::meta_values = ::Uml::Attribute::Create(simplesequencePropertyDescriptor::meta);
			property::meta_id = ::Uml::Attribute::Create(property::meta);
			property::meta_description = ::Uml::Attribute::Create(property::meta);
			simplePropertyDescriptor::meta_value = ::Uml::Attribute::Create(simplePropertyDescriptor::meta);
			enumeration::meta_value = ::Uml::Attribute::Create(enumeration::meta);
			enumeration::meta_label = ::Uml::Attribute::Create(enumeration::meta);
			devicepkgfile::meta_type = ::Uml::Attribute::Create(devicepkgfile::meta);
			filesystemname::meta_deviceid = ::Uml::Attribute::Create(filesystemname::meta);
			filesystemname::meta_mountname = ::Uml::Attribute::Create(filesystemname::meta);
			dependency::meta_type = ::Uml::Attribute::Create(dependency::meta);
			usesdevice::meta_type = ::Uml::Attribute::Create(usesdevice::meta);
			simplepropertyref::meta_value = ::Uml::Attribute::Create(simplepropertyref::meta);
			runtime::meta_version = ::Uml::Attribute::Create(runtime::meta);
			os::meta_version = ::Uml::Attribute::Create(os::meta);
			compiler::meta_version = ::Uml::Attribute::Create(compiler::meta);
			programminglanguage::meta_version = ::Uml::Attribute::Create(programminglanguage::meta);
			code::meta_entrypoint = ::Uml::Attribute::Create(code::meta);
			code::meta_localfile = ::Uml::Attribute::Create(code::meta);
			code::meta_stacksize = ::Uml::Attribute::Create(code::meta);
			code::meta_priority = ::Uml::Attribute::Create(code::meta);
			code::meta_type = ::Uml::Attribute::Create(code::meta);
			author::meta_company = ::Uml::Attribute::Create(author::meta);
			author::meta_names = ::Uml::Attribute::Create(author::meta);
			author::meta_webpage = ::Uml::Attribute::Create(author::meta);
			implementation::meta_aepcompliance = ::Uml::Attribute::Create(implementation::meta);
			implementation::meta_description = ::Uml::Attribute::Create(implementation::meta);
			implementation::meta_id = ::Uml::Attribute::Create(implementation::meta);
			propertyfile::meta_type = ::Uml::Attribute::Create(propertyfile::meta);
			SoftPkgFolder::meta_name = ::Uml::Attribute::Create(SoftPkgFolder::meta);
			SoftwareComponentFolder::meta_name = ::Uml::Attribute::Create(SoftwareComponentFolder::meta);
			DevicePackageFolder::meta_name = ::Uml::Attribute::Create(DevicePackageFolder::meta);
			DeviceConfigurationFolder::meta_name = ::Uml::Attribute::Create(DeviceConfigurationFolder::meta);
			PropertiesFolder::meta_name = ::Uml::Attribute::Create(PropertiesFolder::meta);
			SoftwareComponent::meta_componentrepid = ::Uml::Attribute::Create(SoftwareComponent::meta);
			SoftwareComponent::meta_corbaversion = ::Uml::Attribute::Create(SoftwareComponent::meta);
			SoftwareComponent::meta_componenttype = ::Uml::Attribute::Create(SoftwareComponent::meta);
			SoftwareComponent::meta_usagename = ::Uml::Attribute::Create(SoftwareComponent::meta);
			SoftPkg::meta_description = ::Uml::Attribute::Create(SoftPkg::meta);
			SoftPkg::meta_title = ::Uml::Attribute::Create(SoftPkg::meta);
			SoftPkg::meta_type = ::Uml::Attribute::Create(SoftPkg::meta);
			SoftPkg::meta_version = ::Uml::Attribute::Create(SoftPkg::meta);
			SoftPkg::meta_id = ::Uml::Attribute::Create(SoftPkg::meta);
			SoftPkg::meta_OnlyOneSCD = ::Uml::Constraint::Create(SoftPkg::meta);
			DevicePkg::meta_version = ::Uml::Attribute::Create(DevicePkg::meta);
			DevicePkg::meta_id = ::Uml::Attribute::Create(DevicePkg::meta);
			DevicePkg::meta_title = ::Uml::Attribute::Create(DevicePkg::meta);
			DevicePkg::meta_description = ::Uml::Attribute::Create(DevicePkg::meta);
			DomainProfile::meta_name = ::Uml::Attribute::Create(DomainProfile::meta);
			DomainProfile::meta_OnlyOneSAD = ::Uml::Constraint::Create(DomainProfile::meta);
			DomainManagerConfiguration::meta_description = ::Uml::Attribute::Create(DomainManagerConfiguration::meta);
			SoftwareAssembly::meta_description = ::Uml::Attribute::Create(SoftwareAssembly::meta);
			SoftwareAssembly::meta_version = ::Uml::Attribute::Create(SoftwareAssembly::meta);
			DeviceConfiguration::meta_id = ::Uml::Attribute::Create(DeviceConfiguration::meta);
			DeviceConfiguration::meta_description = ::Uml::Attribute::Create(DeviceConfiguration::meta);
			DeviceConfiguration::meta_domainmanager = ::Uml::Attribute::Create(DeviceConfiguration::meta);
			RootFolder::meta_name = ::Uml::Attribute::Create(RootFolder::meta);
			MgaObject::meta_position = ::Uml::Attribute::Create(MgaObject::meta);
			MgaObject::meta_name = ::Uml::Attribute::Create(MgaObject::meta);
		}
		void InitClassesAttributes()
		{
			connectdestBase::meta.name() = "connectdestBase";
			connectdestBase::meta.isAbstract() = true;
			connectdestBase::meta.stereotype() = "FCO";
			componentplacement_Members_Base::meta.name() = "componentplacement_Members_Base";
			componentplacement_Members_Base::meta.isAbstract() = true;
			componentplacement_Members_Base::meta.stereotype() = "FCO";
			usestodestConn::meta.name() = "usestodestConn";
			usestodestConn::meta.isAbstract() = false;
			usestodestConn::meta.stereotype() = "Connection";
			externaltodestConn::meta.name() = "externaltodestConn";
			externaltodestConn::meta.isAbstract() = false;
			externaltodestConn::meta.stereotype() = "Connection";
			externalport::meta.name() = "externalport";
			externalport::meta.isAbstract() = false;
			externalport::meta.stereotype() = "Atom";
			externaltodestBase::meta.name() = "externaltodestBase";
			externaltodestBase::meta.isAbstract() = true;
			externaltodestBase::meta.stereotype() = "FCO";
			componentsupportedinterface::meta.name() = "componentsupportedinterface";
			componentsupportedinterface::meta.isAbstract() = false;
			componentsupportedinterface::meta.stereotype() = "Reference";
			freestandingtoprovidedConn::meta.name() = "freestandingtoprovidedConn";
			freestandingtoprovidedConn::meta.isAbstract() = false;
			freestandingtoprovidedConn::meta.stereotype() = "Connection";
			usestofreestandingConn::meta.name() = "usestofreestandingConn";
			usestofreestandingConn::meta.isAbstract() = false;
			usestofreestandingConn::meta.stereotype() = "Connection";
			thisPort::meta.name() = "thisPort";
			thisPort::meta.isAbstract() = false;
			thisPort::meta.stereotype() = "Atom";
			log::meta.name() = "log";
			log::meta.isAbstract() = false;
			log::meta.stereotype() = "Atom";
			filemanager::meta.name() = "filemanager";
			filemanager::meta.isAbstract() = false;
			filemanager::meta.stereotype() = "Atom";
			namingservice::meta.name() = "namingservice";
			namingservice::meta.isAbstract() = false;
			namingservice::meta.stereotype() = "Atom";
			FreestandingPort::meta.name() = "FreestandingPort";
			FreestandingPort::meta.isAbstract() = true;
			FreestandingPort::meta.stereotype() = "FCO";
			deviceusedbythiscomponentref::meta.name() = "deviceusedbythiscomponentref";
			deviceusedbythiscomponentref::meta.isAbstract() = false;
			deviceusedbythiscomponentref::meta.stereotype() = "Atom";
			service::meta.name() = "service";
			service::meta.isAbstract() = true;
			service::meta.stereotype() = "Atom";
			eventchannel::meta.name() = "eventchannel";
			eventchannel::meta.isAbstract() = false;
			eventchannel::meta.stereotype() = "Atom";
			devicethatloadedthiscomponentref::meta.name() = "devicethatloadedthiscomponentref";
			devicethatloadedthiscomponentref::meta.isAbstract() = false;
			devicethatloadedthiscomponentref::meta.stereotype() = "Atom";
			Event::meta.name() = "Event";
			Event::meta.isAbstract() = false;
			Event::meta.stereotype() = "Atom";
			ControlFlow::meta.name() = "ControlFlow";
			ControlFlow::meta.isAbstract() = false;
			ControlFlow::meta.stereotype() = "Connection";
			CFSrc::meta.name() = "CFSrc";
			CFSrc::meta.isAbstract() = true;
			CFSrc::meta.stereotype() = "FCO";
			ArgRef::meta.name() = "ArgRef";
			ArgRef::meta.isAbstract() = true;
			ArgRef::meta.stereotype() = "FCO";
			Arg::meta.name() = "Arg";
			Arg::meta.isAbstract() = false;
			Arg::meta.stereotype() = "Reference";
			SimulinkEntrypoint::meta.name() = "SimulinkEntrypoint";
			SimulinkEntrypoint::meta.isAbstract() = false;
			SimulinkEntrypoint::meta.stereotype() = "Model";
			Branch::meta.name() = "Branch";
			Branch::meta.isAbstract() = false;
			Branch::meta.stereotype() = "Atom";
			CFDst::meta.name() = "CFDst";
			CFDst::meta.isAbstract() = true;
			CFDst::meta.stereotype() = "FCO";
			ThenFlow::meta.name() = "ThenFlow";
			ThenFlow::meta.isAbstract() = false;
			ThenFlow::meta.stereotype() = "Connection";
			ElseFlow::meta.name() = "ElseFlow";
			ElseFlow::meta.isAbstract() = false;
			ElseFlow::meta.stereotype() = "Connection";
			controllertocompinst::meta.name() = "controllertocompinst";
			controllertocompinst::meta.isAbstract() = false;
			controllertocompinst::meta.stereotype() = "Connection";
			assemblycontroller::meta.name() = "assemblycontroller";
			assemblycontroller::meta.isAbstract() = false;
			assemblycontroller::meta.stereotype() = "Atom";
			componentresourcefactorytopropertiesConn::meta.name() = "componentresourcefactorytopropertiesConn";
			componentresourcefactorytopropertiesConn::meta.isAbstract() = false;
			componentresourcefactorytopropertiesConn::meta.stereotype() = "Connection";
			findcomponentConn::meta.name() = "findcomponentConn";
			findcomponentConn::meta.isAbstract() = false;
			findcomponentConn::meta.stereotype() = "Connection";
			componentresourcefactoryref::meta.name() = "componentresourcefactoryref";
			componentresourcefactoryref::meta.isAbstract() = false;
			componentresourcefactoryref::meta.stereotype() = "Reference";
			propertyProxy::meta.name() = "propertyProxy";
			propertyProxy::meta.isAbstract() = true;
			propertyProxy::meta.stereotype() = "FCO";
			componentpropertiesConn::meta.name() = "componentpropertiesConn";
			componentpropertiesConn::meta.isAbstract() = false;
			componentpropertiesConn::meta.stereotype() = "Connection";
			componentproperties::meta.name() = "componentproperties";
			componentproperties::meta.isAbstract() = false;
			componentproperties::meta.stereotype() = "Reference";
			componentplacementConn::meta.name() = "componentplacementConn";
			componentplacementConn::meta.isAbstract() = false;
			componentplacementConn::meta.stereotype() = "Connection";
			hostcollocation::meta.name() = "hostcollocation";
			hostcollocation::meta.isAbstract() = false;
			hostcollocation::meta.stereotype() = "Set";
			InterfaceFolder::meta.name() = "InterfaceFolder";
			InterfaceFolder::meta.isAbstract() = false;
			InterfaceFolder::meta.stereotype() = "Folder";
			usesPort::meta.name() = "usesPort";
			usesPort::meta.isAbstract() = false;
			usesPort::meta.stereotype() = "Reference";
			providesPort::meta.name() = "providesPort";
			providesPort::meta.isAbstract() = false;
			providesPort::meta.stereotype() = "Reference";
			supports::meta.name() = "supports";
			supports::meta.isAbstract() = false;
			supports::meta.stereotype() = "Reference";
			inheritsfrom::meta.name() = "inheritsfrom";
			inheritsfrom::meta.isAbstract() = false;
			inheritsfrom::meta.stereotype() = "Connection";
			Interface::meta.name() = "Interface";
			Interface::meta.isAbstract() = false;
			Interface::meta.stereotype() = "Atom";
			interfaces::meta.name() = "interfaces";
			interfaces::meta.isAbstract() = false;
			interfaces::meta.stereotype() = "Model";
			port::meta.name() = "port";
			port::meta.isAbstract() = true;
			port::meta.stereotype() = "FCO";
			componentfeatures::meta.name() = "componentfeatures";
			componentfeatures::meta.isAbstract() = true;
			componentfeatures::meta.stereotype() = "FCO";
			devicepkgref::meta.name() = "devicepkgref";
			devicepkgref::meta.isAbstract() = false;
			devicepkgref::meta.stereotype() = "Reference";
			hwdeviceregistration::meta.name() = "hwdeviceregistration";
			hwdeviceregistration::meta.isAbstract() = false;
			hwdeviceregistration::meta.stereotype() = "Model";
			childhwdevice::meta.name() = "childhwdevice";
			childhwdevice::meta.isAbstract() = true;
			childhwdevice::meta.stereotype() = "FCO";
			structBase::meta.name() = "structBase";
			structBase::meta.isAbstract() = true;
			structBase::meta.stereotype() = "Model";
			simpleBase::meta.name() = "simpleBase";
			simpleBase::meta.isAbstract() = true;
			simpleBase::meta.stereotype() = "Model";
			structvalue::meta.name() = "structvalue";
			structvalue::meta.isAbstract() = false;
			structvalue::meta.stereotype() = "Model";
			simpleref::meta.name() = "simpleref";
			simpleref::meta.isAbstract() = false;
			simpleref::meta.stereotype() = "Reference";
			structref::meta.name() = "structref";
			structref::meta.isAbstract() = false;
			structref::meta.stereotype() = "Reference";
			structsequencePropertyDescriptor::meta.name() = "structsequencePropertyDescriptor";
			structsequencePropertyDescriptor::meta.isAbstract() = false;
			structsequencePropertyDescriptor::meta.stereotype() = "Model";
			structPropertyDescriptor::meta.name() = "structPropertyDescriptor";
			structPropertyDescriptor::meta.isAbstract() = false;
			structPropertyDescriptor::meta.stereotype() = "Model";
			testPropertyDescriptor::meta.name() = "testPropertyDescriptor";
			testPropertyDescriptor::meta.isAbstract() = false;
			testPropertyDescriptor::meta.stereotype() = "Model";
			kind::meta.name() = "kind";
			kind::meta.isAbstract() = false;
			kind::meta.stereotype() = "Atom";
			simplesequencePropertyDescriptor::meta.name() = "simplesequencePropertyDescriptor";
			simplesequencePropertyDescriptor::meta.isAbstract() = false;
			simplesequencePropertyDescriptor::meta.stereotype() = "Model";
			property::meta.name() = "property";
			property::meta.isAbstract() = true;
			property::meta.stereotype() = "FCO";
			simplePropertyDescriptor::meta.name() = "simplePropertyDescriptor";
			simplePropertyDescriptor::meta.isAbstract() = false;
			simplePropertyDescriptor::meta.stereotype() = "Model";
			enumeration::meta.name() = "enumeration";
			enumeration::meta.isAbstract() = false;
			enumeration::meta.stereotype() = "Atom";
			devicepkgfile::meta.name() = "devicepkgfile";
			devicepkgfile::meta.isAbstract() = false;
			devicepkgfile::meta.stereotype() = "Reference";
			filesystemname::meta.name() = "filesystemname";
			filesystemname::meta.isAbstract() = false;
			filesystemname::meta.stereotype() = "Atom";
			componentfile::meta.name() = "componentfile";
			componentfile::meta.isAbstract() = false;
			componentfile::meta.stereotype() = "Reference";
			compositepartofdevice::meta.name() = "compositepartofdevice";
			compositepartofdevice::meta.isAbstract() = false;
			compositepartofdevice::meta.stereotype() = "Reference";
			deployondevice::meta.name() = "deployondevice";
			deployondevice::meta.isAbstract() = false;
			deployondevice::meta.stereotype() = "Reference";
			componentplacement::meta.name() = "componentplacement";
			componentplacement::meta.isAbstract() = false;
			componentplacement::meta.stereotype() = "Set";
			devconfigcomponentfile::meta.name() = "devconfigcomponentfile";
			devconfigcomponentfile::meta.isAbstract() = false;
			devconfigcomponentfile::meta.stereotype() = "Reference";
			devicemanagersoftpkg::meta.name() = "devicemanagersoftpkg";
			devicemanagersoftpkg::meta.isAbstract() = false;
			devicemanagersoftpkg::meta.stereotype() = "Reference";
			usesImpl::meta.name() = "usesImpl";
			usesImpl::meta.isAbstract() = false;
			usesImpl::meta.stereotype() = "Connection";
			dependency::meta.name() = "dependency";
			dependency::meta.isAbstract() = true;
			dependency::meta.stereotype() = "FCO";
			usesdeviceref::meta.name() = "usesdeviceref";
			usesdeviceref::meta.isAbstract() = false;
			usesdeviceref::meta.stereotype() = "Reference";
			usesdevice::meta.name() = "usesdevice";
			usesdevice::meta.isAbstract() = false;
			usesdevice::meta.stereotype() = "Model";
			propertyref::meta.name() = "propertyref";
			propertyref::meta.isAbstract() = false;
			propertyref::meta.stereotype() = "Reference";
			implref::meta.name() = "implref";
			implref::meta.isAbstract() = false;
			implref::meta.stereotype() = "Reference";
			simplepropertyref::meta.name() = "simplepropertyref";
			simplepropertyref::meta.isAbstract() = false;
			simplepropertyref::meta.stereotype() = "Reference";
			softpkgref::meta.name() = "softpkgref";
			softpkgref::meta.isAbstract() = false;
			softpkgref::meta.stereotype() = "Reference";
			runtime::meta.name() = "runtime";
			runtime::meta.isAbstract() = false;
			runtime::meta.stereotype() = "Atom";
			processor::meta.name() = "processor";
			processor::meta.isAbstract() = false;
			processor::meta.stereotype() = "Atom";
			os::meta.name() = "os";
			os::meta.isAbstract() = false;
			os::meta.stereotype() = "Atom";
			humanlanguage::meta.name() = "humanlanguage";
			humanlanguage::meta.isAbstract() = false;
			humanlanguage::meta.stereotype() = "Atom";
			compiler::meta.name() = "compiler";
			compiler::meta.isAbstract() = false;
			compiler::meta.stereotype() = "Atom";
			programminglanguage::meta.name() = "programminglanguage";
			programminglanguage::meta.isAbstract() = false;
			programminglanguage::meta.stereotype() = "Atom";
			code::meta.name() = "code";
			code::meta.isAbstract() = false;
			code::meta.stereotype() = "Atom";
			author::meta.name() = "author";
			author::meta.isAbstract() = false;
			author::meta.stereotype() = "Atom";
			implementation::meta.name() = "implementation";
			implementation::meta.isAbstract() = false;
			implementation::meta.stereotype() = "Model";
			SimulinkSystem::meta.name() = "SimulinkSystem";
			SimulinkSystem::meta.isAbstract() = false;
			SimulinkSystem::meta.stereotype() = "Model";
			DataInport::meta.name() = "DataInport";
			DataInport::meta.isAbstract() = false;
			DataInport::meta.stereotype() = "Atom";
			DataOutport::meta.name() = "DataOutport";
			DataOutport::meta.isAbstract() = false;
			DataOutport::meta.stereotype() = "Atom";
			DataFlow::meta.name() = "DataFlow";
			DataFlow::meta.isAbstract() = false;
			DataFlow::meta.stereotype() = "Connection";
			DFFCO::meta.name() = "DFFCO";
			DFFCO::meta.isAbstract() = true;
			DFFCO::meta.stereotype() = "FCO";
			Var::meta.name() = "Var";
			Var::meta.isAbstract() = false;
			Var::meta.stereotype() = "Atom";
			Const::meta.name() = "Const";
			Const::meta.isAbstract() = false;
			Const::meta.stereotype() = "Atom";
			Function::meta.name() = "Function";
			Function::meta.isAbstract() = false;
			Function::meta.stereotype() = "Atom";
			SimulinkImplementation::meta.name() = "SimulinkImplementation";
			SimulinkImplementation::meta.isAbstract() = false;
			SimulinkImplementation::meta.stereotype() = "Model";
			DataPort::meta.name() = "DataPort";
			DataPort::meta.isAbstract() = true;
			DataPort::meta.stereotype() = "Atom";
			DataMapping::meta.name() = "DataMapping";
			DataMapping::meta.isAbstract() = false;
			DataMapping::meta.stereotype() = "Atom";
			WrapperPart::meta.name() = "WrapperPart";
			WrapperPart::meta.isAbstract() = true;
			WrapperPart::meta.stereotype() = "FCO";
			SimulinkVars::meta.name() = "SimulinkVars";
			SimulinkVars::meta.isAbstract() = false;
			SimulinkVars::meta.stereotype() = "Atom";
			propertyfile::meta.name() = "propertyfile";
			propertyfile::meta.isAbstract() = false;
			propertyfile::meta.stereotype() = "Reference";
			SoftPkgRef::meta.name() = "SoftPkgRef";
			SoftPkgRef::meta.isAbstract() = false;
			SoftPkgRef::meta.stereotype() = "Reference";
			SoftPkgFolder::meta.name() = "SoftPkgFolder";
			SoftPkgFolder::meta.isAbstract() = false;
			SoftPkgFolder::meta.stereotype() = "Folder";
			SoftwareComponentRef::meta.name() = "SoftwareComponentRef";
			SoftwareComponentRef::meta.isAbstract() = false;
			SoftwareComponentRef::meta.stereotype() = "Reference";
			SoftwareComponentFolder::meta.name() = "SoftwareComponentFolder";
			SoftwareComponentFolder::meta.isAbstract() = false;
			SoftwareComponentFolder::meta.stereotype() = "Folder";
			DevicePkgRef::meta.name() = "DevicePkgRef";
			DevicePkgRef::meta.isAbstract() = false;
			DevicePkgRef::meta.stereotype() = "Reference";
			DevicePackageFolder::meta.name() = "DevicePackageFolder";
			DevicePackageFolder::meta.isAbstract() = false;
			DevicePackageFolder::meta.stereotype() = "Folder";
			DeviceConfigurationFolder::meta.name() = "DeviceConfigurationFolder";
			DeviceConfigurationFolder::meta.isAbstract() = false;
			DeviceConfigurationFolder::meta.stereotype() = "Folder";
			PropertiesFolder::meta.name() = "PropertiesFolder";
			PropertiesFolder::meta.isAbstract() = false;
			PropertiesFolder::meta.stereotype() = "Folder";
			SoftwarePackageRef::meta.name() = "SoftwarePackageRef";
			SoftwarePackageRef::meta.isAbstract() = false;
			SoftwarePackageRef::meta.stereotype() = "Reference";
			SoftwareComponent::meta.name() = "SoftwareComponent";
			SoftwareComponent::meta.isAbstract() = false;
			SoftwareComponent::meta.stereotype() = "Model";
			Properties::meta.name() = "Properties";
			Properties::meta.isAbstract() = false;
			Properties::meta.stereotype() = "Model";
			SoftPkg::meta.name() = "SoftPkg";
			SoftPkg::meta.isAbstract() = false;
			SoftPkg::meta.stereotype() = "Model";
			DevicePkg::meta.name() = "DevicePkg";
			DevicePkg::meta.isAbstract() = false;
			DevicePkg::meta.stereotype() = "Model";
			DomainProfile::meta.name() = "DomainProfile";
			DomainProfile::meta.isAbstract() = false;
			DomainProfile::meta.stereotype() = "Folder";
			DomainManagerConfiguration::meta.name() = "DomainManagerConfiguration";
			DomainManagerConfiguration::meta.isAbstract() = false;
			DomainManagerConfiguration::meta.stereotype() = "Model";
			SoftwareAssembly::meta.name() = "SoftwareAssembly";
			SoftwareAssembly::meta.isAbstract() = false;
			SoftwareAssembly::meta.stereotype() = "Model";
			DeviceConfiguration::meta.name() = "DeviceConfiguration";
			DeviceConfiguration::meta.isAbstract() = false;
			DeviceConfiguration::meta.stereotype() = "Model";
			RootFolder::meta.name() = "RootFolder";
			RootFolder::meta.isAbstract() = false;
			RootFolder::meta.stereotype() = "Folder";
			MgaObject::meta.name() = "MgaObject";
			MgaObject::meta.isAbstract() = true;
			
			filemanager::meta_usagename.name() = "usagename";
			filemanager::meta_usagename.type() = "String";
			filemanager::meta_usagename.min() = 1;
			filemanager::meta_usagename.max() = 1;
			filemanager::meta_usagename.nonpersistent() = false;
			filemanager::meta_usagename.registry() = false;
			filemanager::meta_usagename.ordered() = false;
			filemanager::meta_usagename.visibility() = "public";
			filemanager::meta_usagename.defvalue() = vector<string>();
			deviceusedbythiscomponentref::meta_usesrefid.name() = "usesrefid";
			deviceusedbythiscomponentref::meta_usesrefid.type() = "String";
			deviceusedbythiscomponentref::meta_usesrefid.min() = 1;
			deviceusedbythiscomponentref::meta_usesrefid.max() = 1;
			deviceusedbythiscomponentref::meta_usesrefid.nonpersistent() = false;
			deviceusedbythiscomponentref::meta_usesrefid.registry() = false;
			deviceusedbythiscomponentref::meta_usesrefid.ordered() = false;
			deviceusedbythiscomponentref::meta_usesrefid.visibility() = "public";
			deviceusedbythiscomponentref::meta_usesrefid.defvalue() = vector<string>();
			componentproperties::meta_value_s.name() = "value_s";
			componentproperties::meta_value_s.type() = "String";
			componentproperties::meta_value_s.min() = 1;
			componentproperties::meta_value_s.max() = 1;
			componentproperties::meta_value_s.nonpersistent() = false;
			componentproperties::meta_value_s.registry() = false;
			componentproperties::meta_value_s.ordered() = false;
			componentproperties::meta_value_s.visibility() = "public";
			componentproperties::meta_value_s.defvalue() = vector<string>();
			InterfaceFolder::meta_name.name() = "name";
			InterfaceFolder::meta_name.type() = "String";
			InterfaceFolder::meta_name.min() = 0;
			InterfaceFolder::meta_name.max() = 1;
			InterfaceFolder::meta_name.nonpersistent() = false;
			InterfaceFolder::meta_name.registry() = false;
			InterfaceFolder::meta_name.ordered() = false;
			InterfaceFolder::meta_name.visibility() = "public";
			InterfaceFolder::meta_name.defvalue() = vector<string>();
			usesPort::meta_usesname.name() = "usesname";
			usesPort::meta_usesname.type() = "String";
			usesPort::meta_usesname.min() = 1;
			usesPort::meta_usesname.max() = 1;
			usesPort::meta_usesname.nonpersistent() = false;
			usesPort::meta_usesname.registry() = false;
			usesPort::meta_usesname.ordered() = false;
			usesPort::meta_usesname.visibility() = "public";
			usesPort::meta_usesname.defvalue() = vector<string>();
			providesPort::meta_providesname.name() = "providesname";
			providesPort::meta_providesname.type() = "String";
			providesPort::meta_providesname.min() = 1;
			providesPort::meta_providesname.max() = 1;
			providesPort::meta_providesname.nonpersistent() = false;
			providesPort::meta_providesname.registry() = false;
			providesPort::meta_providesname.ordered() = false;
			providesPort::meta_providesname.visibility() = "public";
			providesPort::meta_providesname.defvalue() = vector<string>();
			supports::meta_supportsname.name() = "supportsname";
			supports::meta_supportsname.type() = "String";
			supports::meta_supportsname.min() = 1;
			supports::meta_supportsname.max() = 1;
			supports::meta_supportsname.nonpersistent() = false;
			supports::meta_supportsname.registry() = false;
			supports::meta_supportsname.ordered() = false;
			supports::meta_supportsname.visibility() = "public";
			supports::meta_supportsname.defvalue() = vector<string>();
			Interface::meta_repid.name() = "repid";
			Interface::meta_repid.type() = "String";
			Interface::meta_repid.min() = 1;
			Interface::meta_repid.max() = 1;
			Interface::meta_repid.nonpersistent() = false;
			Interface::meta_repid.registry() = false;
			Interface::meta_repid.ordered() = false;
			Interface::meta_repid.visibility() = "public";
			Interface::meta_repid.defvalue() = vector<string>();
			vector<string> port_isControl_dva;
			port_isControl_dva.push_back("false");
			port::meta_isControl.name() = "isControl";
			port::meta_isControl.type() = "Boolean";
			port::meta_isControl.min() = 1;
			port::meta_isControl.max() = 1;
			port::meta_isControl.nonpersistent() = false;
			port::meta_isControl.registry() = false;
			port::meta_isControl.ordered() = false;
			port::meta_isControl.visibility() = "public";
			port::meta_isControl.defvalue() = port_isControl_dva;
			vector<string> port_isData_dva;
			port_isData_dva.push_back("true");
			port::meta_isData.name() = "isData";
			port::meta_isData.type() = "Boolean";
			port::meta_isData.min() = 1;
			port::meta_isData.max() = 1;
			port::meta_isData.nonpersistent() = false;
			port::meta_isData.registry() = false;
			port::meta_isData.ordered() = false;
			port::meta_isData.visibility() = "public";
			port::meta_isData.defvalue() = port_isData_dva;
			vector<string> port_isResponses_dva;
			port_isResponses_dva.push_back("false");
			port::meta_isResponses.name() = "isResponses";
			port::meta_isResponses.type() = "Boolean";
			port::meta_isResponses.min() = 1;
			port::meta_isResponses.max() = 1;
			port::meta_isResponses.nonpersistent() = false;
			port::meta_isResponses.registry() = false;
			port::meta_isResponses.ordered() = false;
			port::meta_isResponses.visibility() = "public";
			port::meta_isResponses.defvalue() = port_isResponses_dva;
			vector<string> port_isTest_dva;
			port_isTest_dva.push_back("false");
			port::meta_isTest.name() = "isTest";
			port::meta_isTest.type() = "Boolean";
			port::meta_isTest.min() = 1;
			port::meta_isTest.max() = 1;
			port::meta_isTest.nonpersistent() = false;
			port::meta_isTest.registry() = false;
			port::meta_isTest.ordered() = false;
			port::meta_isTest.visibility() = "public";
			port::meta_isTest.defvalue() = port_isTest_dva;
			hwdeviceregistration::meta_modelnumber.name() = "modelnumber";
			hwdeviceregistration::meta_modelnumber.type() = "String";
			hwdeviceregistration::meta_modelnumber.min() = 1;
			hwdeviceregistration::meta_modelnumber.max() = 1;
			hwdeviceregistration::meta_modelnumber.nonpersistent() = false;
			hwdeviceregistration::meta_modelnumber.registry() = false;
			hwdeviceregistration::meta_modelnumber.ordered() = false;
			hwdeviceregistration::meta_modelnumber.visibility() = "public";
			hwdeviceregistration::meta_modelnumber.defvalue() = vector<string>();
			hwdeviceregistration::meta_id.name() = "id";
			hwdeviceregistration::meta_id.type() = "String";
			hwdeviceregistration::meta_id.min() = 1;
			hwdeviceregistration::meta_id.max() = 1;
			hwdeviceregistration::meta_id.nonpersistent() = false;
			hwdeviceregistration::meta_id.registry() = false;
			hwdeviceregistration::meta_id.ordered() = false;
			hwdeviceregistration::meta_id.visibility() = "public";
			hwdeviceregistration::meta_id.defvalue() = vector<string>();
			hwdeviceregistration::meta_version.name() = "version";
			hwdeviceregistration::meta_version.type() = "String";
			hwdeviceregistration::meta_version.min() = 1;
			hwdeviceregistration::meta_version.max() = 1;
			hwdeviceregistration::meta_version.nonpersistent() = false;
			hwdeviceregistration::meta_version.registry() = false;
			hwdeviceregistration::meta_version.ordered() = false;
			hwdeviceregistration::meta_version.visibility() = "public";
			hwdeviceregistration::meta_version.defvalue() = vector<string>();
			hwdeviceregistration::meta_description.name() = "description";
			hwdeviceregistration::meta_description.type() = "String";
			hwdeviceregistration::meta_description.min() = 1;
			hwdeviceregistration::meta_description.max() = 1;
			hwdeviceregistration::meta_description.nonpersistent() = false;
			hwdeviceregistration::meta_description.registry() = false;
			hwdeviceregistration::meta_description.ordered() = false;
			hwdeviceregistration::meta_description.visibility() = "public";
			hwdeviceregistration::meta_description.defvalue() = vector<string>();
			hwdeviceregistration::meta_deviceclass.name() = "deviceclass";
			hwdeviceregistration::meta_deviceclass.type() = "String";
			hwdeviceregistration::meta_deviceclass.min() = 1;
			hwdeviceregistration::meta_deviceclass.max() = 1;
			hwdeviceregistration::meta_deviceclass.nonpersistent() = false;
			hwdeviceregistration::meta_deviceclass.registry() = false;
			hwdeviceregistration::meta_deviceclass.ordered() = false;
			hwdeviceregistration::meta_deviceclass.visibility() = "public";
			hwdeviceregistration::meta_deviceclass.defvalue() = vector<string>();
			hwdeviceregistration::meta_manufacturer.name() = "manufacturer";
			hwdeviceregistration::meta_manufacturer.type() = "String";
			hwdeviceregistration::meta_manufacturer.min() = 1;
			hwdeviceregistration::meta_manufacturer.max() = 1;
			hwdeviceregistration::meta_manufacturer.nonpersistent() = false;
			hwdeviceregistration::meta_manufacturer.registry() = false;
			hwdeviceregistration::meta_manufacturer.ordered() = false;
			hwdeviceregistration::meta_manufacturer.visibility() = "public";
			hwdeviceregistration::meta_manufacturer.defvalue() = vector<string>();
			vector<string> structBase_mode_dva;
			structBase_mode_dva.push_back("readwrite");
			structBase::meta_mode.name() = "mode";
			structBase::meta_mode.type() = "String";
			structBase::meta_mode.min() = 1;
			structBase::meta_mode.max() = 1;
			structBase::meta_mode.nonpersistent() = false;
			structBase::meta_mode.registry() = false;
			structBase::meta_mode.ordered() = false;
			structBase::meta_mode.visibility() = "public";
			structBase::meta_mode.defvalue() = structBase_mode_dva;
			vector<string> structBase_configurationkind_dva;
			structBase_configurationkind_dva.push_back("configure");
			structBase::meta_configurationkind.name() = "configurationkind";
			structBase::meta_configurationkind.type() = "String";
			structBase::meta_configurationkind.min() = 1;
			structBase::meta_configurationkind.max() = 1;
			structBase::meta_configurationkind.nonpersistent() = false;
			structBase::meta_configurationkind.registry() = false;
			structBase::meta_configurationkind.ordered() = false;
			structBase::meta_configurationkind.visibility() = "public";
			structBase::meta_configurationkind.defvalue() = structBase_configurationkind_dva;
			simpleBase::meta_range_min.name() = "range_min";
			simpleBase::meta_range_min.type() = "String";
			simpleBase::meta_range_min.min() = 1;
			simpleBase::meta_range_min.max() = 1;
			simpleBase::meta_range_min.nonpersistent() = false;
			simpleBase::meta_range_min.registry() = false;
			simpleBase::meta_range_min.ordered() = false;
			simpleBase::meta_range_min.visibility() = "public";
			simpleBase::meta_range_min.defvalue() = vector<string>();
			simpleBase::meta_units.name() = "units";
			simpleBase::meta_units.type() = "String";
			simpleBase::meta_units.min() = 1;
			simpleBase::meta_units.max() = 1;
			simpleBase::meta_units.nonpersistent() = false;
			simpleBase::meta_units.registry() = false;
			simpleBase::meta_units.ordered() = false;
			simpleBase::meta_units.visibility() = "public";
			simpleBase::meta_units.defvalue() = vector<string>();
			simpleBase::meta_range_max.name() = "range_max";
			simpleBase::meta_range_max.type() = "String";
			simpleBase::meta_range_max.min() = 1;
			simpleBase::meta_range_max.max() = 1;
			simpleBase::meta_range_max.nonpersistent() = false;
			simpleBase::meta_range_max.registry() = false;
			simpleBase::meta_range_max.ordered() = false;
			simpleBase::meta_range_max.visibility() = "public";
			simpleBase::meta_range_max.defvalue() = vector<string>();
			vector<string> simpleBase_action_dva;
			simpleBase_action_dva.push_back("external");
			simpleBase::meta_action.name() = "action";
			simpleBase::meta_action.type() = "String";
			simpleBase::meta_action.min() = 1;
			simpleBase::meta_action.max() = 1;
			simpleBase::meta_action.nonpersistent() = false;
			simpleBase::meta_action.registry() = false;
			simpleBase::meta_action.ordered() = false;
			simpleBase::meta_action.visibility() = "public";
			simpleBase::meta_action.defvalue() = simpleBase_action_dva;
			vector<string> simpleBase_mode_dva;
			simpleBase_mode_dva.push_back("readwrite");
			simpleBase::meta_mode.name() = "mode";
			simpleBase::meta_mode.type() = "String";
			simpleBase::meta_mode.min() = 1;
			simpleBase::meta_mode.max() = 1;
			simpleBase::meta_mode.nonpersistent() = false;
			simpleBase::meta_mode.registry() = false;
			simpleBase::meta_mode.ordered() = false;
			simpleBase::meta_mode.visibility() = "public";
			simpleBase::meta_mode.defvalue() = simpleBase_mode_dva;
			simpleBase::meta_type.name() = "type";
			simpleBase::meta_type.type() = "String";
			simpleBase::meta_type.min() = 1;
			simpleBase::meta_type.max() = 1;
			simpleBase::meta_type.nonpersistent() = false;
			simpleBase::meta_type.registry() = false;
			simpleBase::meta_type.ordered() = false;
			simpleBase::meta_type.visibility() = "public";
			simpleBase::meta_type.defvalue() = vector<string>();
			simpleref::meta_value.name() = "value";
			simpleref::meta_value.type() = "String";
			simpleref::meta_value.min() = 1;
			simpleref::meta_value.max() = 1;
			simpleref::meta_value.nonpersistent() = false;
			simpleref::meta_value.registry() = false;
			simpleref::meta_value.ordered() = false;
			simpleref::meta_value.visibility() = "public";
			simpleref::meta_value.defvalue() = vector<string>();
			vector<string> kind_kindtype_dva;
			kind_kindtype_dva.push_back("configure");
			kind::meta_kindtype.name() = "kindtype";
			kind::meta_kindtype.type() = "String";
			kind::meta_kindtype.min() = 1;
			kind::meta_kindtype.max() = 1;
			kind::meta_kindtype.nonpersistent() = false;
			kind::meta_kindtype.registry() = false;
			kind::meta_kindtype.ordered() = false;
			kind::meta_kindtype.visibility() = "public";
			kind::meta_kindtype.defvalue() = kind_kindtype_dva;
			simplesequencePropertyDescriptor::meta_values.name() = "values";
			simplesequencePropertyDescriptor::meta_values.type() = "String";
			simplesequencePropertyDescriptor::meta_values.min() = 1;
			simplesequencePropertyDescriptor::meta_values.max() = 1;
			simplesequencePropertyDescriptor::meta_values.nonpersistent() = false;
			simplesequencePropertyDescriptor::meta_values.registry() = false;
			simplesequencePropertyDescriptor::meta_values.ordered() = false;
			simplesequencePropertyDescriptor::meta_values.visibility() = "public";
			simplesequencePropertyDescriptor::meta_values.defvalue() = vector<string>();
			property::meta_id.name() = "id";
			property::meta_id.type() = "String";
			property::meta_id.min() = 1;
			property::meta_id.max() = 1;
			property::meta_id.nonpersistent() = false;
			property::meta_id.registry() = false;
			property::meta_id.ordered() = false;
			property::meta_id.visibility() = "public";
			property::meta_id.defvalue() = vector<string>();
			property::meta_description.name() = "description";
			property::meta_description.type() = "String";
			property::meta_description.min() = 1;
			property::meta_description.max() = 1;
			property::meta_description.nonpersistent() = false;
			property::meta_description.registry() = false;
			property::meta_description.ordered() = false;
			property::meta_description.visibility() = "public";
			property::meta_description.defvalue() = vector<string>();
			simplePropertyDescriptor::meta_value.name() = "value";
			simplePropertyDescriptor::meta_value.type() = "String";
			simplePropertyDescriptor::meta_value.min() = 1;
			simplePropertyDescriptor::meta_value.max() = 1;
			simplePropertyDescriptor::meta_value.nonpersistent() = false;
			simplePropertyDescriptor::meta_value.registry() = false;
			simplePropertyDescriptor::meta_value.ordered() = false;
			simplePropertyDescriptor::meta_value.visibility() = "public";
			simplePropertyDescriptor::meta_value.defvalue() = vector<string>();
			enumeration::meta_value.name() = "value";
			enumeration::meta_value.type() = "String";
			enumeration::meta_value.min() = 1;
			enumeration::meta_value.max() = 1;
			enumeration::meta_value.nonpersistent() = false;
			enumeration::meta_value.registry() = false;
			enumeration::meta_value.ordered() = false;
			enumeration::meta_value.visibility() = "public";
			enumeration::meta_value.defvalue() = vector<string>();
			enumeration::meta_label.name() = "label";
			enumeration::meta_label.type() = "String";
			enumeration::meta_label.min() = 1;
			enumeration::meta_label.max() = 1;
			enumeration::meta_label.nonpersistent() = false;
			enumeration::meta_label.registry() = false;
			enumeration::meta_label.ordered() = false;
			enumeration::meta_label.visibility() = "public";
			enumeration::meta_label.defvalue() = vector<string>();
			devicepkgfile::meta_type.name() = "type";
			devicepkgfile::meta_type.type() = "String";
			devicepkgfile::meta_type.min() = 1;
			devicepkgfile::meta_type.max() = 1;
			devicepkgfile::meta_type.nonpersistent() = false;
			devicepkgfile::meta_type.registry() = false;
			devicepkgfile::meta_type.ordered() = false;
			devicepkgfile::meta_type.visibility() = "public";
			devicepkgfile::meta_type.defvalue() = vector<string>();
			filesystemname::meta_deviceid.name() = "deviceid";
			filesystemname::meta_deviceid.type() = "String";
			filesystemname::meta_deviceid.min() = 1;
			filesystemname::meta_deviceid.max() = 1;
			filesystemname::meta_deviceid.nonpersistent() = false;
			filesystemname::meta_deviceid.registry() = false;
			filesystemname::meta_deviceid.ordered() = false;
			filesystemname::meta_deviceid.visibility() = "public";
			filesystemname::meta_deviceid.defvalue() = vector<string>();
			filesystemname::meta_mountname.name() = "mountname";
			filesystemname::meta_mountname.type() = "String";
			filesystemname::meta_mountname.min() = 1;
			filesystemname::meta_mountname.max() = 1;
			filesystemname::meta_mountname.nonpersistent() = false;
			filesystemname::meta_mountname.registry() = false;
			filesystemname::meta_mountname.ordered() = false;
			filesystemname::meta_mountname.visibility() = "public";
			filesystemname::meta_mountname.defvalue() = vector<string>();
			dependency::meta_type.name() = "type";
			dependency::meta_type.type() = "String";
			dependency::meta_type.min() = 1;
			dependency::meta_type.max() = 1;
			dependency::meta_type.nonpersistent() = false;
			dependency::meta_type.registry() = false;
			dependency::meta_type.ordered() = false;
			dependency::meta_type.visibility() = "public";
			dependency::meta_type.defvalue() = vector<string>();
			usesdevice::meta_type.name() = "type";
			usesdevice::meta_type.type() = "String";
			usesdevice::meta_type.min() = 1;
			usesdevice::meta_type.max() = 1;
			usesdevice::meta_type.nonpersistent() = false;
			usesdevice::meta_type.registry() = false;
			usesdevice::meta_type.ordered() = false;
			usesdevice::meta_type.visibility() = "public";
			usesdevice::meta_type.defvalue() = vector<string>();
			simplepropertyref::meta_value.name() = "value";
			simplepropertyref::meta_value.type() = "String";
			simplepropertyref::meta_value.min() = 1;
			simplepropertyref::meta_value.max() = 1;
			simplepropertyref::meta_value.nonpersistent() = false;
			simplepropertyref::meta_value.registry() = false;
			simplepropertyref::meta_value.ordered() = false;
			simplepropertyref::meta_value.visibility() = "public";
			simplepropertyref::meta_value.defvalue() = vector<string>();
			runtime::meta_version.name() = "version";
			runtime::meta_version.type() = "String";
			runtime::meta_version.min() = 1;
			runtime::meta_version.max() = 1;
			runtime::meta_version.nonpersistent() = false;
			runtime::meta_version.registry() = false;
			runtime::meta_version.ordered() = false;
			runtime::meta_version.visibility() = "public";
			runtime::meta_version.defvalue() = vector<string>();
			os::meta_version.name() = "version";
			os::meta_version.type() = "String";
			os::meta_version.min() = 1;
			os::meta_version.max() = 1;
			os::meta_version.nonpersistent() = false;
			os::meta_version.registry() = false;
			os::meta_version.ordered() = false;
			os::meta_version.visibility() = "public";
			os::meta_version.defvalue() = vector<string>();
			compiler::meta_version.name() = "version";
			compiler::meta_version.type() = "String";
			compiler::meta_version.min() = 1;
			compiler::meta_version.max() = 1;
			compiler::meta_version.nonpersistent() = false;
			compiler::meta_version.registry() = false;
			compiler::meta_version.ordered() = false;
			compiler::meta_version.visibility() = "public";
			compiler::meta_version.defvalue() = vector<string>();
			programminglanguage::meta_version.name() = "version";
			programminglanguage::meta_version.type() = "String";
			programminglanguage::meta_version.min() = 1;
			programminglanguage::meta_version.max() = 1;
			programminglanguage::meta_version.nonpersistent() = false;
			programminglanguage::meta_version.registry() = false;
			programminglanguage::meta_version.ordered() = false;
			programminglanguage::meta_version.visibility() = "public";
			programminglanguage::meta_version.defvalue() = vector<string>();
			code::meta_entrypoint.name() = "entrypoint";
			code::meta_entrypoint.type() = "String";
			code::meta_entrypoint.min() = 1;
			code::meta_entrypoint.max() = 1;
			code::meta_entrypoint.nonpersistent() = false;
			code::meta_entrypoint.registry() = false;
			code::meta_entrypoint.ordered() = false;
			code::meta_entrypoint.visibility() = "public";
			code::meta_entrypoint.defvalue() = vector<string>();
			code::meta_localfile.name() = "localfile";
			code::meta_localfile.type() = "String";
			code::meta_localfile.min() = 1;
			code::meta_localfile.max() = 1;
			code::meta_localfile.nonpersistent() = false;
			code::meta_localfile.registry() = false;
			code::meta_localfile.ordered() = false;
			code::meta_localfile.visibility() = "public";
			code::meta_localfile.defvalue() = vector<string>();
			code::meta_stacksize.name() = "stacksize";
			code::meta_stacksize.type() = "String";
			code::meta_stacksize.min() = 1;
			code::meta_stacksize.max() = 1;
			code::meta_stacksize.nonpersistent() = false;
			code::meta_stacksize.registry() = false;
			code::meta_stacksize.ordered() = false;
			code::meta_stacksize.visibility() = "public";
			code::meta_stacksize.defvalue() = vector<string>();
			code::meta_priority.name() = "priority";
			code::meta_priority.type() = "String";
			code::meta_priority.min() = 1;
			code::meta_priority.max() = 1;
			code::meta_priority.nonpersistent() = false;
			code::meta_priority.registry() = false;
			code::meta_priority.ordered() = false;
			code::meta_priority.visibility() = "public";
			code::meta_priority.defvalue() = vector<string>();
			vector<string> code_type_dva;
			code_type_dva.push_back("Executable");
			code::meta_type.name() = "type";
			code::meta_type.type() = "String";
			code::meta_type.min() = 1;
			code::meta_type.max() = 1;
			code::meta_type.nonpersistent() = false;
			code::meta_type.registry() = false;
			code::meta_type.ordered() = false;
			code::meta_type.visibility() = "public";
			code::meta_type.defvalue() = code_type_dva;
			author::meta_company.name() = "company";
			author::meta_company.type() = "String";
			author::meta_company.min() = 1;
			author::meta_company.max() = 1;
			author::meta_company.nonpersistent() = false;
			author::meta_company.registry() = false;
			author::meta_company.ordered() = false;
			author::meta_company.visibility() = "public";
			author::meta_company.defvalue() = vector<string>();
			author::meta_names.name() = "names";
			author::meta_names.type() = "String";
			author::meta_names.min() = 1;
			author::meta_names.max() = 1;
			author::meta_names.nonpersistent() = false;
			author::meta_names.registry() = false;
			author::meta_names.ordered() = false;
			author::meta_names.visibility() = "public";
			author::meta_names.defvalue() = vector<string>();
			author::meta_webpage.name() = "webpage";
			author::meta_webpage.type() = "String";
			author::meta_webpage.min() = 1;
			author::meta_webpage.max() = 1;
			author::meta_webpage.nonpersistent() = false;
			author::meta_webpage.registry() = false;
			author::meta_webpage.ordered() = false;
			author::meta_webpage.visibility() = "public";
			author::meta_webpage.defvalue() = vector<string>();
			vector<string> implementation_aepcompliance_dva;
			implementation_aepcompliance_dva.push_back("aep_compliant");
			implementation::meta_aepcompliance.name() = "aepcompliance";
			implementation::meta_aepcompliance.type() = "String";
			implementation::meta_aepcompliance.min() = 1;
			implementation::meta_aepcompliance.max() = 1;
			implementation::meta_aepcompliance.nonpersistent() = false;
			implementation::meta_aepcompliance.registry() = false;
			implementation::meta_aepcompliance.ordered() = false;
			implementation::meta_aepcompliance.visibility() = "public";
			implementation::meta_aepcompliance.defvalue() = implementation_aepcompliance_dva;
			implementation::meta_description.name() = "description";
			implementation::meta_description.type() = "String";
			implementation::meta_description.min() = 1;
			implementation::meta_description.max() = 1;
			implementation::meta_description.nonpersistent() = false;
			implementation::meta_description.registry() = false;
			implementation::meta_description.ordered() = false;
			implementation::meta_description.visibility() = "public";
			implementation::meta_description.defvalue() = vector<string>();
			implementation::meta_id.name() = "id";
			implementation::meta_id.type() = "String";
			implementation::meta_id.min() = 1;
			implementation::meta_id.max() = 1;
			implementation::meta_id.nonpersistent() = false;
			implementation::meta_id.registry() = false;
			implementation::meta_id.ordered() = false;
			implementation::meta_id.visibility() = "public";
			implementation::meta_id.defvalue() = vector<string>();
			propertyfile::meta_type.name() = "type";
			propertyfile::meta_type.type() = "String";
			propertyfile::meta_type.min() = 1;
			propertyfile::meta_type.max() = 1;
			propertyfile::meta_type.nonpersistent() = false;
			propertyfile::meta_type.registry() = false;
			propertyfile::meta_type.ordered() = false;
			propertyfile::meta_type.visibility() = "public";
			propertyfile::meta_type.defvalue() = vector<string>();
			SoftPkgFolder::meta_name.name() = "name";
			SoftPkgFolder::meta_name.type() = "String";
			SoftPkgFolder::meta_name.min() = 0;
			SoftPkgFolder::meta_name.max() = 1;
			SoftPkgFolder::meta_name.nonpersistent() = false;
			SoftPkgFolder::meta_name.registry() = false;
			SoftPkgFolder::meta_name.ordered() = false;
			SoftPkgFolder::meta_name.visibility() = "public";
			SoftPkgFolder::meta_name.defvalue() = vector<string>();
			SoftwareComponentFolder::meta_name.name() = "name";
			SoftwareComponentFolder::meta_name.type() = "String";
			SoftwareComponentFolder::meta_name.min() = 0;
			SoftwareComponentFolder::meta_name.max() = 1;
			SoftwareComponentFolder::meta_name.nonpersistent() = false;
			SoftwareComponentFolder::meta_name.registry() = false;
			SoftwareComponentFolder::meta_name.ordered() = false;
			SoftwareComponentFolder::meta_name.visibility() = "public";
			SoftwareComponentFolder::meta_name.defvalue() = vector<string>();
			DevicePackageFolder::meta_name.name() = "name";
			DevicePackageFolder::meta_name.type() = "String";
			DevicePackageFolder::meta_name.min() = 0;
			DevicePackageFolder::meta_name.max() = 1;
			DevicePackageFolder::meta_name.nonpersistent() = false;
			DevicePackageFolder::meta_name.registry() = false;
			DevicePackageFolder::meta_name.ordered() = false;
			DevicePackageFolder::meta_name.visibility() = "public";
			DevicePackageFolder::meta_name.defvalue() = vector<string>();
			DeviceConfigurationFolder::meta_name.name() = "name";
			DeviceConfigurationFolder::meta_name.type() = "String";
			DeviceConfigurationFolder::meta_name.min() = 0;
			DeviceConfigurationFolder::meta_name.max() = 1;
			DeviceConfigurationFolder::meta_name.nonpersistent() = false;
			DeviceConfigurationFolder::meta_name.registry() = false;
			DeviceConfigurationFolder::meta_name.ordered() = false;
			DeviceConfigurationFolder::meta_name.visibility() = "public";
			DeviceConfigurationFolder::meta_name.defvalue() = vector<string>();
			PropertiesFolder::meta_name.name() = "name";
			PropertiesFolder::meta_name.type() = "String";
			PropertiesFolder::meta_name.min() = 0;
			PropertiesFolder::meta_name.max() = 1;
			PropertiesFolder::meta_name.nonpersistent() = false;
			PropertiesFolder::meta_name.registry() = false;
			PropertiesFolder::meta_name.ordered() = false;
			PropertiesFolder::meta_name.visibility() = "public";
			PropertiesFolder::meta_name.defvalue() = vector<string>();
			SoftwareComponent::meta_componentrepid.name() = "componentrepid";
			SoftwareComponent::meta_componentrepid.type() = "String";
			SoftwareComponent::meta_componentrepid.min() = 1;
			SoftwareComponent::meta_componentrepid.max() = 1;
			SoftwareComponent::meta_componentrepid.nonpersistent() = false;
			SoftwareComponent::meta_componentrepid.registry() = false;
			SoftwareComponent::meta_componentrepid.ordered() = false;
			SoftwareComponent::meta_componentrepid.visibility() = "public";
			SoftwareComponent::meta_componentrepid.defvalue() = vector<string>();
			SoftwareComponent::meta_corbaversion.name() = "corbaversion";
			SoftwareComponent::meta_corbaversion.type() = "String";
			SoftwareComponent::meta_corbaversion.min() = 1;
			SoftwareComponent::meta_corbaversion.max() = 1;
			SoftwareComponent::meta_corbaversion.nonpersistent() = false;
			SoftwareComponent::meta_corbaversion.registry() = false;
			SoftwareComponent::meta_corbaversion.ordered() = false;
			SoftwareComponent::meta_corbaversion.visibility() = "public";
			SoftwareComponent::meta_corbaversion.defvalue() = vector<string>();
			vector<string> SoftwareComponent_componenttype_dva;
			SoftwareComponent_componenttype_dva.push_back("other");
			SoftwareComponent::meta_componenttype.name() = "componenttype";
			SoftwareComponent::meta_componenttype.type() = "String";
			SoftwareComponent::meta_componenttype.min() = 1;
			SoftwareComponent::meta_componenttype.max() = 1;
			SoftwareComponent::meta_componenttype.nonpersistent() = false;
			SoftwareComponent::meta_componenttype.registry() = false;
			SoftwareComponent::meta_componenttype.ordered() = false;
			SoftwareComponent::meta_componenttype.visibility() = "public";
			SoftwareComponent::meta_componenttype.defvalue() = SoftwareComponent_componenttype_dva;
			SoftwareComponent::meta_usagename.name() = "usagename";
			SoftwareComponent::meta_usagename.type() = "String";
			SoftwareComponent::meta_usagename.min() = 1;
			SoftwareComponent::meta_usagename.max() = 1;
			SoftwareComponent::meta_usagename.nonpersistent() = false;
			SoftwareComponent::meta_usagename.registry() = false;
			SoftwareComponent::meta_usagename.ordered() = false;
			SoftwareComponent::meta_usagename.visibility() = "public";
			SoftwareComponent::meta_usagename.defvalue() = vector<string>();
			SoftPkg::meta_description.name() = "description";
			SoftPkg::meta_description.type() = "String";
			SoftPkg::meta_description.min() = 1;
			SoftPkg::meta_description.max() = 1;
			SoftPkg::meta_description.nonpersistent() = false;
			SoftPkg::meta_description.registry() = false;
			SoftPkg::meta_description.ordered() = false;
			SoftPkg::meta_description.visibility() = "public";
			SoftPkg::meta_description.defvalue() = vector<string>();
			SoftPkg::meta_title.name() = "title";
			SoftPkg::meta_title.type() = "String";
			SoftPkg::meta_title.min() = 1;
			SoftPkg::meta_title.max() = 1;
			SoftPkg::meta_title.nonpersistent() = false;
			SoftPkg::meta_title.registry() = false;
			SoftPkg::meta_title.ordered() = false;
			SoftPkg::meta_title.visibility() = "public";
			SoftPkg::meta_title.defvalue() = vector<string>();
			vector<string> SoftPkg_type_dva;
			SoftPkg_type_dva.push_back("sca_compliant");
			SoftPkg::meta_type.name() = "type";
			SoftPkg::meta_type.type() = "String";
			SoftPkg::meta_type.min() = 1;
			SoftPkg::meta_type.max() = 1;
			SoftPkg::meta_type.nonpersistent() = false;
			SoftPkg::meta_type.registry() = false;
			SoftPkg::meta_type.ordered() = false;
			SoftPkg::meta_type.visibility() = "public";
			SoftPkg::meta_type.defvalue() = SoftPkg_type_dva;
			SoftPkg::meta_version.name() = "version";
			SoftPkg::meta_version.type() = "String";
			SoftPkg::meta_version.min() = 1;
			SoftPkg::meta_version.max() = 1;
			SoftPkg::meta_version.nonpersistent() = false;
			SoftPkg::meta_version.registry() = false;
			SoftPkg::meta_version.ordered() = false;
			SoftPkg::meta_version.visibility() = "public";
			SoftPkg::meta_version.defvalue() = vector<string>();
			SoftPkg::meta_id.name() = "id";
			SoftPkg::meta_id.type() = "String";
			SoftPkg::meta_id.min() = 1;
			SoftPkg::meta_id.max() = 1;
			SoftPkg::meta_id.nonpersistent() = false;
			SoftPkg::meta_id.registry() = false;
			SoftPkg::meta_id.ordered() = false;
			SoftPkg::meta_id.visibility() = "public";
			SoftPkg::meta_id.defvalue() = vector<string>();
			SoftPkg::meta_OnlyOneSCD.name() = "OnlyOneSCD";
			SoftPkg::meta_OnlyOneSCD.description() = "Can only have one SCD in an SPD.";
			SoftPkg::meta_OnlyOneSCD.expression() = "self.modelParts(\"SoftwareComponentRef\")->size <= 1";
			DevicePkg::meta_version.name() = "version";
			DevicePkg::meta_version.type() = "String";
			DevicePkg::meta_version.min() = 1;
			DevicePkg::meta_version.max() = 1;
			DevicePkg::meta_version.nonpersistent() = false;
			DevicePkg::meta_version.registry() = false;
			DevicePkg::meta_version.ordered() = false;
			DevicePkg::meta_version.visibility() = "public";
			DevicePkg::meta_version.defvalue() = vector<string>();
			DevicePkg::meta_id.name() = "id";
			DevicePkg::meta_id.type() = "String";
			DevicePkg::meta_id.min() = 1;
			DevicePkg::meta_id.max() = 1;
			DevicePkg::meta_id.nonpersistent() = false;
			DevicePkg::meta_id.registry() = false;
			DevicePkg::meta_id.ordered() = false;
			DevicePkg::meta_id.visibility() = "public";
			DevicePkg::meta_id.defvalue() = vector<string>();
			DevicePkg::meta_title.name() = "title";
			DevicePkg::meta_title.type() = "String";
			DevicePkg::meta_title.min() = 1;
			DevicePkg::meta_title.max() = 1;
			DevicePkg::meta_title.nonpersistent() = false;
			DevicePkg::meta_title.registry() = false;
			DevicePkg::meta_title.ordered() = false;
			DevicePkg::meta_title.visibility() = "public";
			DevicePkg::meta_title.defvalue() = vector<string>();
			DevicePkg::meta_description.name() = "description";
			DevicePkg::meta_description.type() = "String";
			DevicePkg::meta_description.min() = 1;
			DevicePkg::meta_description.max() = 1;
			DevicePkg::meta_description.nonpersistent() = false;
			DevicePkg::meta_description.registry() = false;
			DevicePkg::meta_description.ordered() = false;
			DevicePkg::meta_description.visibility() = "public";
			DevicePkg::meta_description.defvalue() = vector<string>();
			DomainProfile::meta_name.name() = "name";
			DomainProfile::meta_name.type() = "String";
			DomainProfile::meta_name.min() = 0;
			DomainProfile::meta_name.max() = 1;
			DomainProfile::meta_name.nonpersistent() = false;
			DomainProfile::meta_name.registry() = false;
			DomainProfile::meta_name.ordered() = false;
			DomainProfile::meta_name.visibility() = "public";
			DomainProfile::meta_name.defvalue() = vector<string>();
			DomainProfile::meta_OnlyOneSAD.name() = "OnlyOneSAD";
			DomainProfile::meta_OnlyOneSAD.description() = "Can only have one SAD in a domain profile.";
			DomainProfile::meta_OnlyOneSAD.expression() = "self.models(\"SoftwareAssembly\")->size <= 1\n";
			DomainManagerConfiguration::meta_description.name() = "description";
			DomainManagerConfiguration::meta_description.type() = "String";
			DomainManagerConfiguration::meta_description.min() = 1;
			DomainManagerConfiguration::meta_description.max() = 1;
			DomainManagerConfiguration::meta_description.nonpersistent() = false;
			DomainManagerConfiguration::meta_description.registry() = false;
			DomainManagerConfiguration::meta_description.ordered() = false;
			DomainManagerConfiguration::meta_description.visibility() = "public";
			DomainManagerConfiguration::meta_description.defvalue() = vector<string>();
			SoftwareAssembly::meta_description.name() = "description";
			SoftwareAssembly::meta_description.type() = "String";
			SoftwareAssembly::meta_description.min() = 1;
			SoftwareAssembly::meta_description.max() = 1;
			SoftwareAssembly::meta_description.nonpersistent() = false;
			SoftwareAssembly::meta_description.registry() = false;
			SoftwareAssembly::meta_description.ordered() = false;
			SoftwareAssembly::meta_description.visibility() = "public";
			SoftwareAssembly::meta_description.defvalue() = vector<string>();
			SoftwareAssembly::meta_version.name() = "version";
			SoftwareAssembly::meta_version.type() = "String";
			SoftwareAssembly::meta_version.min() = 1;
			SoftwareAssembly::meta_version.max() = 1;
			SoftwareAssembly::meta_version.nonpersistent() = false;
			SoftwareAssembly::meta_version.registry() = false;
			SoftwareAssembly::meta_version.ordered() = false;
			SoftwareAssembly::meta_version.visibility() = "public";
			SoftwareAssembly::meta_version.defvalue() = vector<string>();
			DeviceConfiguration::meta_id.name() = "id";
			DeviceConfiguration::meta_id.type() = "String";
			DeviceConfiguration::meta_id.min() = 1;
			DeviceConfiguration::meta_id.max() = 1;
			DeviceConfiguration::meta_id.nonpersistent() = false;
			DeviceConfiguration::meta_id.registry() = false;
			DeviceConfiguration::meta_id.ordered() = false;
			DeviceConfiguration::meta_id.visibility() = "public";
			DeviceConfiguration::meta_id.defvalue() = vector<string>();
			DeviceConfiguration::meta_description.name() = "description";
			DeviceConfiguration::meta_description.type() = "String";
			DeviceConfiguration::meta_description.min() = 1;
			DeviceConfiguration::meta_description.max() = 1;
			DeviceConfiguration::meta_description.nonpersistent() = false;
			DeviceConfiguration::meta_description.registry() = false;
			DeviceConfiguration::meta_description.ordered() = false;
			DeviceConfiguration::meta_description.visibility() = "public";
			DeviceConfiguration::meta_description.defvalue() = vector<string>();
			DeviceConfiguration::meta_domainmanager.name() = "domainmanager";
			DeviceConfiguration::meta_domainmanager.type() = "String";
			DeviceConfiguration::meta_domainmanager.min() = 1;
			DeviceConfiguration::meta_domainmanager.max() = 1;
			DeviceConfiguration::meta_domainmanager.nonpersistent() = false;
			DeviceConfiguration::meta_domainmanager.registry() = false;
			DeviceConfiguration::meta_domainmanager.ordered() = false;
			DeviceConfiguration::meta_domainmanager.visibility() = "public";
			DeviceConfiguration::meta_domainmanager.defvalue() = vector<string>();
			RootFolder::meta_name.name() = "name";
			RootFolder::meta_name.type() = "String";
			RootFolder::meta_name.min() = 0;
			RootFolder::meta_name.max() = 1;
			RootFolder::meta_name.nonpersistent() = false;
			RootFolder::meta_name.registry() = false;
			RootFolder::meta_name.ordered() = false;
			RootFolder::meta_name.visibility() = "public";
			RootFolder::meta_name.defvalue() = vector<string>();
			MgaObject::meta_position.name() = "position";
			MgaObject::meta_position.type() = "String";
			MgaObject::meta_position.min() = 0;
			MgaObject::meta_position.max() = 1;
			MgaObject::meta_position.nonpersistent() = false;
			MgaObject::meta_position.registry() = false;
			MgaObject::meta_position.ordered() = false;
			MgaObject::meta_position.visibility() = "public";
			MgaObject::meta_position.defvalue() = vector<string>();
			MgaObject::meta_name.name() = "name";
			MgaObject::meta_name.type() = "String";
			MgaObject::meta_name.min() = 0;
			MgaObject::meta_name.max() = 1;
			MgaObject::meta_name.nonpersistent() = false;
			MgaObject::meta_name.registry() = false;
			MgaObject::meta_name.ordered() = false;
			MgaObject::meta_name.visibility() = "public";
			MgaObject::meta_name.defvalue() = vector<string>();
			
		}
		void CreatesNamespaces()
		{
		}
		void InitNamespaces()
		{
		}
		void InitAssociation0()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "usestodestConn";
			ass.assocClass() = ::SCAML::usestodestConn::meta;
			::SCAML::connectdestBase::meta_srcusestodestConn = ::Uml::AssociationRole::Create(ass);
			::SCAML::connectdestBase::meta_srcusestodestConn.name() = "srcusestodestConn";
			::SCAML::connectdestBase::meta_srcusestodestConn.min() = 0;
			::SCAML::connectdestBase::meta_srcusestodestConn.max() = -1;
			::SCAML::connectdestBase::meta_srcusestodestConn.isNavigable() = true;
			::SCAML::connectdestBase::meta_srcusestodestConn.isPrimary() = false;
			::SCAML::connectdestBase::meta_srcusestodestConn.target() = ::SCAML::usesPort::meta;
			::SCAML::usestodestConn::meta_srcusestodestConn_end_ = ::SCAML::usesPort::meta_dstusestodestConn_rev = ::SCAML::connectdestBase::meta_srcusestodestConn;
			::SCAML::usesPort::meta_dstusestodestConn = ::Uml::AssociationRole::Create(ass);
			::SCAML::usesPort::meta_dstusestodestConn.name() = "dstusestodestConn";
			::SCAML::usesPort::meta_dstusestodestConn.min() = 0;
			::SCAML::usesPort::meta_dstusestodestConn.max() = -1;
			::SCAML::usesPort::meta_dstusestodestConn.isNavigable() = true;
			::SCAML::usesPort::meta_dstusestodestConn.isPrimary() = false;
			::SCAML::usesPort::meta_dstusestodestConn.target() = ::SCAML::connectdestBase::meta;
			::SCAML::usestodestConn::meta_dstusestodestConn_end_ = ::SCAML::connectdestBase::meta_srcusestodestConn_rev = ::SCAML::usesPort::meta_dstusestodestConn;
		};
		void InitAssociation1()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::componentplacement::meta_members = ::Uml::AssociationRole::Create(ass);
			::SCAML::componentplacement::meta_members.name() = "members";
			::SCAML::componentplacement::meta_members.min() = 0;
			::SCAML::componentplacement::meta_members.max() = -1;
			::SCAML::componentplacement::meta_members.isNavigable() = true;
			::SCAML::componentplacement::meta_members.isPrimary() = false;
			::SCAML::componentplacement::meta_members.target() = ::SCAML::componentplacement_Members_Base::meta;
			::SCAML::componentplacement_Members_Base::meta_setcomponentplacement = ::Uml::AssociationRole::Create(ass);
			::SCAML::componentplacement_Members_Base::meta_setcomponentplacement.name() = "setcomponentplacement";
			::SCAML::componentplacement_Members_Base::meta_setcomponentplacement.min() = 0;
			::SCAML::componentplacement_Members_Base::meta_setcomponentplacement.max() = -1;
			::SCAML::componentplacement_Members_Base::meta_setcomponentplacement.isNavigable() = true;
			::SCAML::componentplacement_Members_Base::meta_setcomponentplacement.isPrimary() = false;
			::SCAML::componentplacement_Members_Base::meta_setcomponentplacement.target() = ::SCAML::componentplacement::meta;
		};
		void InitAssociation2()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "externaltodestConn";
			ass.assocClass() = ::SCAML::externaltodestConn::meta;
			::SCAML::externaltodestBase::meta_srcexternaltodestConn = ::Uml::AssociationRole::Create(ass);
			::SCAML::externaltodestBase::meta_srcexternaltodestConn.name() = "srcexternaltodestConn";
			::SCAML::externaltodestBase::meta_srcexternaltodestConn.min() = 0;
			::SCAML::externaltodestBase::meta_srcexternaltodestConn.max() = -1;
			::SCAML::externaltodestBase::meta_srcexternaltodestConn.isNavigable() = true;
			::SCAML::externaltodestBase::meta_srcexternaltodestConn.isPrimary() = false;
			::SCAML::externaltodestBase::meta_srcexternaltodestConn.target() = ::SCAML::externalport::meta;
			::SCAML::externaltodestConn::meta_srcexternaltodestConn_end_ = ::SCAML::externalport::meta_dstexternaltodestConn_rev = ::SCAML::externaltodestBase::meta_srcexternaltodestConn;
			::SCAML::externalport::meta_dstexternaltodestConn = ::Uml::AssociationRole::Create(ass);
			::SCAML::externalport::meta_dstexternaltodestConn.name() = "dstexternaltodestConn";
			::SCAML::externalport::meta_dstexternaltodestConn.min() = 0;
			::SCAML::externalport::meta_dstexternaltodestConn.max() = -1;
			::SCAML::externalport::meta_dstexternaltodestConn.isNavigable() = true;
			::SCAML::externalport::meta_dstexternaltodestConn.isPrimary() = false;
			::SCAML::externalport::meta_dstexternaltodestConn.target() = ::SCAML::externaltodestBase::meta;
			::SCAML::externaltodestConn::meta_dstexternaltodestConn_end_ = ::SCAML::externaltodestBase::meta_srcexternaltodestConn_rev = ::SCAML::externalport::meta_dstexternaltodestConn;
		};
		void InitAssociation3()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::supports::meta_referedbycomponentsupportedinterface = ::Uml::AssociationRole::Create(ass);
			::SCAML::supports::meta_referedbycomponentsupportedinterface.name() = "referedbycomponentsupportedinterface";
			::SCAML::supports::meta_referedbycomponentsupportedinterface.min() = 0;
			::SCAML::supports::meta_referedbycomponentsupportedinterface.max() = -1;
			::SCAML::supports::meta_referedbycomponentsupportedinterface.isNavigable() = true;
			::SCAML::supports::meta_referedbycomponentsupportedinterface.isPrimary() = false;
			::SCAML::supports::meta_referedbycomponentsupportedinterface.target() = ::SCAML::componentsupportedinterface::meta;
			::SCAML::componentsupportedinterface::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::componentsupportedinterface::meta_ref.name() = "ref";
			::SCAML::componentsupportedinterface::meta_ref.min() = 0;
			::SCAML::componentsupportedinterface::meta_ref.max() = 1;
			::SCAML::componentsupportedinterface::meta_ref.isNavigable() = true;
			::SCAML::componentsupportedinterface::meta_ref.isPrimary() = false;
			::SCAML::componentsupportedinterface::meta_ref.target() = ::SCAML::supports::meta;
		};
		void InitAssociation4()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "usestofreestandingConn";
			ass.assocClass() = ::SCAML::usestofreestandingConn::meta;
			::SCAML::FreestandingPort::meta_srcusestofreestandingConn = ::Uml::AssociationRole::Create(ass);
			::SCAML::FreestandingPort::meta_srcusestofreestandingConn.name() = "srcusestofreestandingConn";
			::SCAML::FreestandingPort::meta_srcusestofreestandingConn.min() = 0;
			::SCAML::FreestandingPort::meta_srcusestofreestandingConn.max() = -1;
			::SCAML::FreestandingPort::meta_srcusestofreestandingConn.isNavigable() = true;
			::SCAML::FreestandingPort::meta_srcusestofreestandingConn.isPrimary() = false;
			::SCAML::FreestandingPort::meta_srcusestofreestandingConn.target() = ::SCAML::usesPort::meta;
			::SCAML::usestofreestandingConn::meta_srcusestofreestandingConn_end_ = ::SCAML::usesPort::meta_dstusestofreestandingConn_rev = ::SCAML::FreestandingPort::meta_srcusestofreestandingConn;
			::SCAML::usesPort::meta_dstusestofreestandingConn = ::Uml::AssociationRole::Create(ass);
			::SCAML::usesPort::meta_dstusestofreestandingConn.name() = "dstusestofreestandingConn";
			::SCAML::usesPort::meta_dstusestofreestandingConn.min() = 0;
			::SCAML::usesPort::meta_dstusestofreestandingConn.max() = -1;
			::SCAML::usesPort::meta_dstusestofreestandingConn.isNavigable() = true;
			::SCAML::usesPort::meta_dstusestofreestandingConn.isPrimary() = false;
			::SCAML::usesPort::meta_dstusestofreestandingConn.target() = ::SCAML::FreestandingPort::meta;
			::SCAML::usestofreestandingConn::meta_dstusestofreestandingConn_end_ = ::SCAML::FreestandingPort::meta_srcusestofreestandingConn_rev = ::SCAML::usesPort::meta_dstusestofreestandingConn;
		};
		void InitAssociation5()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "freestandingtoprovidedConn";
			ass.assocClass() = ::SCAML::freestandingtoprovidedConn::meta;
			::SCAML::FreestandingPort::meta_dstfreestandingtoprovidedConn = ::Uml::AssociationRole::Create(ass);
			::SCAML::FreestandingPort::meta_dstfreestandingtoprovidedConn.name() = "dstfreestandingtoprovidedConn";
			::SCAML::FreestandingPort::meta_dstfreestandingtoprovidedConn.min() = 0;
			::SCAML::FreestandingPort::meta_dstfreestandingtoprovidedConn.max() = -1;
			::SCAML::FreestandingPort::meta_dstfreestandingtoprovidedConn.isNavigable() = true;
			::SCAML::FreestandingPort::meta_dstfreestandingtoprovidedConn.isPrimary() = false;
			::SCAML::FreestandingPort::meta_dstfreestandingtoprovidedConn.target() = ::SCAML::providesPort::meta;
			::SCAML::freestandingtoprovidedConn::meta_dstfreestandingtoprovidedConn_end_ = ::SCAML::providesPort::meta_srcfreestandingtoprovidedConn_rev = ::SCAML::FreestandingPort::meta_dstfreestandingtoprovidedConn;
			::SCAML::providesPort::meta_srcfreestandingtoprovidedConn = ::Uml::AssociationRole::Create(ass);
			::SCAML::providesPort::meta_srcfreestandingtoprovidedConn.name() = "srcfreestandingtoprovidedConn";
			::SCAML::providesPort::meta_srcfreestandingtoprovidedConn.min() = 0;
			::SCAML::providesPort::meta_srcfreestandingtoprovidedConn.max() = -1;
			::SCAML::providesPort::meta_srcfreestandingtoprovidedConn.isNavigable() = true;
			::SCAML::providesPort::meta_srcfreestandingtoprovidedConn.isPrimary() = false;
			::SCAML::providesPort::meta_srcfreestandingtoprovidedConn.target() = ::SCAML::FreestandingPort::meta;
			::SCAML::freestandingtoprovidedConn::meta_srcfreestandingtoprovidedConn_end_ = ::SCAML::FreestandingPort::meta_dstfreestandingtoprovidedConn_rev = ::SCAML::providesPort::meta_srcfreestandingtoprovidedConn;
		};
		void InitAssociation6()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "ControlFlow";
			ass.assocClass() = ::SCAML::ControlFlow::meta;
			::SCAML::CFDst::meta_srcControlFlow = ::Uml::AssociationRole::Create(ass);
			::SCAML::CFDst::meta_srcControlFlow.name() = "srcControlFlow";
			::SCAML::CFDst::meta_srcControlFlow.min() = 0;
			::SCAML::CFDst::meta_srcControlFlow.max() = -1;
			::SCAML::CFDst::meta_srcControlFlow.isNavigable() = true;
			::SCAML::CFDst::meta_srcControlFlow.isPrimary() = false;
			::SCAML::CFDst::meta_srcControlFlow.target() = ::SCAML::CFSrc::meta;
			::SCAML::ControlFlow::meta_srcControlFlow_end_ = ::SCAML::CFSrc::meta_dstControlFlow_rev = ::SCAML::CFDst::meta_srcControlFlow;
			::SCAML::CFSrc::meta_dstControlFlow = ::Uml::AssociationRole::Create(ass);
			::SCAML::CFSrc::meta_dstControlFlow.name() = "dstControlFlow";
			::SCAML::CFSrc::meta_dstControlFlow.min() = 0;
			::SCAML::CFSrc::meta_dstControlFlow.max() = -1;
			::SCAML::CFSrc::meta_dstControlFlow.isNavigable() = true;
			::SCAML::CFSrc::meta_dstControlFlow.isPrimary() = false;
			::SCAML::CFSrc::meta_dstControlFlow.target() = ::SCAML::CFDst::meta;
			::SCAML::ControlFlow::meta_dstControlFlow_end_ = ::SCAML::CFDst::meta_srcControlFlow_rev = ::SCAML::CFSrc::meta_dstControlFlow;
		};
		void InitAssociation7()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::ArgRef::meta_referedbyArg = ::Uml::AssociationRole::Create(ass);
			::SCAML::ArgRef::meta_referedbyArg.name() = "referedbyArg";
			::SCAML::ArgRef::meta_referedbyArg.min() = 0;
			::SCAML::ArgRef::meta_referedbyArg.max() = -1;
			::SCAML::ArgRef::meta_referedbyArg.isNavigable() = true;
			::SCAML::ArgRef::meta_referedbyArg.isPrimary() = false;
			::SCAML::ArgRef::meta_referedbyArg.target() = ::SCAML::Arg::meta;
			::SCAML::Arg::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::Arg::meta_ref.name() = "ref";
			::SCAML::Arg::meta_ref.min() = 0;
			::SCAML::Arg::meta_ref.max() = 1;
			::SCAML::Arg::meta_ref.isNavigable() = true;
			::SCAML::Arg::meta_ref.isPrimary() = false;
			::SCAML::Arg::meta_ref.target() = ::SCAML::ArgRef::meta;
		};
		void InitAssociation8()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "ElseFlow";
			ass.assocClass() = ::SCAML::ElseFlow::meta;
			::SCAML::Branch::meta_dstElseFlow = ::Uml::AssociationRole::Create(ass);
			::SCAML::Branch::meta_dstElseFlow.name() = "dstElseFlow";
			::SCAML::Branch::meta_dstElseFlow.min() = 0;
			::SCAML::Branch::meta_dstElseFlow.max() = -1;
			::SCAML::Branch::meta_dstElseFlow.isNavigable() = true;
			::SCAML::Branch::meta_dstElseFlow.isPrimary() = false;
			::SCAML::Branch::meta_dstElseFlow.target() = ::SCAML::CFDst::meta;
			::SCAML::ElseFlow::meta_dstElseFlow_end_ = ::SCAML::CFDst::meta_srcElseFlow_rev = ::SCAML::Branch::meta_dstElseFlow;
			::SCAML::CFDst::meta_srcElseFlow = ::Uml::AssociationRole::Create(ass);
			::SCAML::CFDst::meta_srcElseFlow.name() = "srcElseFlow";
			::SCAML::CFDst::meta_srcElseFlow.min() = 0;
			::SCAML::CFDst::meta_srcElseFlow.max() = -1;
			::SCAML::CFDst::meta_srcElseFlow.isNavigable() = true;
			::SCAML::CFDst::meta_srcElseFlow.isPrimary() = false;
			::SCAML::CFDst::meta_srcElseFlow.target() = ::SCAML::Branch::meta;
			::SCAML::ElseFlow::meta_srcElseFlow_end_ = ::SCAML::Branch::meta_dstElseFlow_rev = ::SCAML::CFDst::meta_srcElseFlow;
		};
		void InitAssociation9()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "ThenFlow";
			ass.assocClass() = ::SCAML::ThenFlow::meta;
			::SCAML::Branch::meta_dstThenFlow = ::Uml::AssociationRole::Create(ass);
			::SCAML::Branch::meta_dstThenFlow.name() = "dstThenFlow";
			::SCAML::Branch::meta_dstThenFlow.min() = 0;
			::SCAML::Branch::meta_dstThenFlow.max() = -1;
			::SCAML::Branch::meta_dstThenFlow.isNavigable() = true;
			::SCAML::Branch::meta_dstThenFlow.isPrimary() = false;
			::SCAML::Branch::meta_dstThenFlow.target() = ::SCAML::CFDst::meta;
			::SCAML::ThenFlow::meta_dstThenFlow_end_ = ::SCAML::CFDst::meta_srcThenFlow_rev = ::SCAML::Branch::meta_dstThenFlow;
			::SCAML::CFDst::meta_srcThenFlow = ::Uml::AssociationRole::Create(ass);
			::SCAML::CFDst::meta_srcThenFlow.name() = "srcThenFlow";
			::SCAML::CFDst::meta_srcThenFlow.min() = 0;
			::SCAML::CFDst::meta_srcThenFlow.max() = -1;
			::SCAML::CFDst::meta_srcThenFlow.isNavigable() = true;
			::SCAML::CFDst::meta_srcThenFlow.isPrimary() = false;
			::SCAML::CFDst::meta_srcThenFlow.target() = ::SCAML::Branch::meta;
			::SCAML::ThenFlow::meta_srcThenFlow_end_ = ::SCAML::Branch::meta_dstThenFlow_rev = ::SCAML::CFDst::meta_srcThenFlow;
		};
		void InitAssociation10()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "controllertocompinst";
			ass.assocClass() = ::SCAML::controllertocompinst::meta;
			::SCAML::SoftwareComponent::meta_srccontrollertocompinst = ::Uml::AssociationRole::Create(ass);
			::SCAML::SoftwareComponent::meta_srccontrollertocompinst.name() = "srccontrollertocompinst";
			::SCAML::SoftwareComponent::meta_srccontrollertocompinst.min() = 0;
			::SCAML::SoftwareComponent::meta_srccontrollertocompinst.max() = -1;
			::SCAML::SoftwareComponent::meta_srccontrollertocompinst.isNavigable() = true;
			::SCAML::SoftwareComponent::meta_srccontrollertocompinst.isPrimary() = false;
			::SCAML::SoftwareComponent::meta_srccontrollertocompinst.target() = ::SCAML::assemblycontroller::meta;
			::SCAML::controllertocompinst::meta_srccontrollertocompinst_end_ = ::SCAML::assemblycontroller::meta_dstcontrollertocompinst_rev = ::SCAML::SoftwareComponent::meta_srccontrollertocompinst;
			::SCAML::assemblycontroller::meta_dstcontrollertocompinst = ::Uml::AssociationRole::Create(ass);
			::SCAML::assemblycontroller::meta_dstcontrollertocompinst.name() = "dstcontrollertocompinst";
			::SCAML::assemblycontroller::meta_dstcontrollertocompinst.min() = 0;
			::SCAML::assemblycontroller::meta_dstcontrollertocompinst.max() = -1;
			::SCAML::assemblycontroller::meta_dstcontrollertocompinst.isNavigable() = true;
			::SCAML::assemblycontroller::meta_dstcontrollertocompinst.isPrimary() = false;
			::SCAML::assemblycontroller::meta_dstcontrollertocompinst.target() = ::SCAML::SoftwareComponent::meta;
			::SCAML::controllertocompinst::meta_dstcontrollertocompinst_end_ = ::SCAML::SoftwareComponent::meta_srccontrollertocompinst_rev = ::SCAML::assemblycontroller::meta_dstcontrollertocompinst;
		};
		void InitAssociation11()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "findcomponentConn";
			ass.assocClass() = ::SCAML::findcomponentConn::meta;
			::SCAML::componentresourcefactoryref::meta_dstfindcomponentConn = ::Uml::AssociationRole::Create(ass);
			::SCAML::componentresourcefactoryref::meta_dstfindcomponentConn.name() = "dstfindcomponentConn";
			::SCAML::componentresourcefactoryref::meta_dstfindcomponentConn.min() = 0;
			::SCAML::componentresourcefactoryref::meta_dstfindcomponentConn.max() = -1;
			::SCAML::componentresourcefactoryref::meta_dstfindcomponentConn.isNavigable() = true;
			::SCAML::componentresourcefactoryref::meta_dstfindcomponentConn.isPrimary() = false;
			::SCAML::componentresourcefactoryref::meta_dstfindcomponentConn.target() = ::SCAML::SoftwareComponent::meta;
			::SCAML::findcomponentConn::meta_dstfindcomponentConn_end_ = ::SCAML::SoftwareComponent::meta_srcfindcomponentConn_rev = ::SCAML::componentresourcefactoryref::meta_dstfindcomponentConn;
			::SCAML::SoftwareComponent::meta_srcfindcomponentConn = ::Uml::AssociationRole::Create(ass);
			::SCAML::SoftwareComponent::meta_srcfindcomponentConn.name() = "srcfindcomponentConn";
			::SCAML::SoftwareComponent::meta_srcfindcomponentConn.min() = 0;
			::SCAML::SoftwareComponent::meta_srcfindcomponentConn.max() = -1;
			::SCAML::SoftwareComponent::meta_srcfindcomponentConn.isNavigable() = true;
			::SCAML::SoftwareComponent::meta_srcfindcomponentConn.isPrimary() = false;
			::SCAML::SoftwareComponent::meta_srcfindcomponentConn.target() = ::SCAML::componentresourcefactoryref::meta;
			::SCAML::findcomponentConn::meta_srcfindcomponentConn_end_ = ::SCAML::componentresourcefactoryref::meta_dstfindcomponentConn_rev = ::SCAML::SoftwareComponent::meta_srcfindcomponentConn;
		};
		void InitAssociation12()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "componentresourcefactorytopropertiesConn";
			ass.assocClass() = ::SCAML::componentresourcefactorytopropertiesConn::meta;
			::SCAML::componentresourcefactoryref::meta_dstcomponentresourcefactorytopropertiesConn = ::Uml::AssociationRole::Create(ass);
			::SCAML::componentresourcefactoryref::meta_dstcomponentresourcefactorytopropertiesConn.name() = "dstcomponentresourcefactorytopropertiesConn";
			::SCAML::componentresourcefactoryref::meta_dstcomponentresourcefactorytopropertiesConn.min() = 0;
			::SCAML::componentresourcefactoryref::meta_dstcomponentresourcefactorytopropertiesConn.max() = -1;
			::SCAML::componentresourcefactoryref::meta_dstcomponentresourcefactorytopropertiesConn.isNavigable() = true;
			::SCAML::componentresourcefactoryref::meta_dstcomponentresourcefactorytopropertiesConn.isPrimary() = false;
			::SCAML::componentresourcefactoryref::meta_dstcomponentresourcefactorytopropertiesConn.target() = ::SCAML::componentproperties::meta;
			::SCAML::componentresourcefactorytopropertiesConn::meta_dstcomponentresourcefactorytopropertiesConn_end_ = ::SCAML::componentproperties::meta_srccomponentresourcefactorytopropertiesConn_rev = ::SCAML::componentresourcefactoryref::meta_dstcomponentresourcefactorytopropertiesConn;
			::SCAML::componentproperties::meta_srccomponentresourcefactorytopropertiesConn = ::Uml::AssociationRole::Create(ass);
			::SCAML::componentproperties::meta_srccomponentresourcefactorytopropertiesConn.name() = "srccomponentresourcefactorytopropertiesConn";
			::SCAML::componentproperties::meta_srccomponentresourcefactorytopropertiesConn.min() = 0;
			::SCAML::componentproperties::meta_srccomponentresourcefactorytopropertiesConn.max() = -1;
			::SCAML::componentproperties::meta_srccomponentresourcefactorytopropertiesConn.isNavigable() = true;
			::SCAML::componentproperties::meta_srccomponentresourcefactorytopropertiesConn.isPrimary() = false;
			::SCAML::componentproperties::meta_srccomponentresourcefactorytopropertiesConn.target() = ::SCAML::componentresourcefactoryref::meta;
			::SCAML::componentresourcefactorytopropertiesConn::meta_srccomponentresourcefactorytopropertiesConn_end_ = ::SCAML::componentresourcefactoryref::meta_dstcomponentresourcefactorytopropertiesConn_rev = ::SCAML::componentproperties::meta_srccomponentresourcefactorytopropertiesConn;
		};
		void InitAssociation13()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::componentresourcefactoryref::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::componentresourcefactoryref::meta_ref.name() = "ref";
			::SCAML::componentresourcefactoryref::meta_ref.min() = 0;
			::SCAML::componentresourcefactoryref::meta_ref.max() = 1;
			::SCAML::componentresourcefactoryref::meta_ref.isNavigable() = true;
			::SCAML::componentresourcefactoryref::meta_ref.isPrimary() = false;
			::SCAML::componentresourcefactoryref::meta_ref.target() = ::SCAML::SoftwareComponent::meta;
			::SCAML::SoftwareComponent::meta_referedbycomponentresourcefactoryref = ::Uml::AssociationRole::Create(ass);
			::SCAML::SoftwareComponent::meta_referedbycomponentresourcefactoryref.name() = "referedbycomponentresourcefactoryref";
			::SCAML::SoftwareComponent::meta_referedbycomponentresourcefactoryref.min() = 0;
			::SCAML::SoftwareComponent::meta_referedbycomponentresourcefactoryref.max() = -1;
			::SCAML::SoftwareComponent::meta_referedbycomponentresourcefactoryref.isNavigable() = true;
			::SCAML::SoftwareComponent::meta_referedbycomponentresourcefactoryref.isPrimary() = false;
			::SCAML::SoftwareComponent::meta_referedbycomponentresourcefactoryref.target() = ::SCAML::componentresourcefactoryref::meta;
		};
		void InitAssociation14()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::propertyProxy::meta_referedbycomponentproperties = ::Uml::AssociationRole::Create(ass);
			::SCAML::propertyProxy::meta_referedbycomponentproperties.name() = "referedbycomponentproperties";
			::SCAML::propertyProxy::meta_referedbycomponentproperties.min() = 0;
			::SCAML::propertyProxy::meta_referedbycomponentproperties.max() = -1;
			::SCAML::propertyProxy::meta_referedbycomponentproperties.isNavigable() = true;
			::SCAML::propertyProxy::meta_referedbycomponentproperties.isPrimary() = false;
			::SCAML::propertyProxy::meta_referedbycomponentproperties.target() = ::SCAML::componentproperties::meta;
			::SCAML::componentproperties::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::componentproperties::meta_ref.name() = "ref";
			::SCAML::componentproperties::meta_ref.min() = 0;
			::SCAML::componentproperties::meta_ref.max() = 1;
			::SCAML::componentproperties::meta_ref.isNavigable() = true;
			::SCAML::componentproperties::meta_ref.isPrimary() = false;
			::SCAML::componentproperties::meta_ref.target() = ::SCAML::propertyProxy::meta;
		};
		void InitAssociation15()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "componentpropertiesConn";
			ass.assocClass() = ::SCAML::componentpropertiesConn::meta;
			::SCAML::componentproperties::meta_srccomponentpropertiesConn = ::Uml::AssociationRole::Create(ass);
			::SCAML::componentproperties::meta_srccomponentpropertiesConn.name() = "srccomponentpropertiesConn";
			::SCAML::componentproperties::meta_srccomponentpropertiesConn.min() = 0;
			::SCAML::componentproperties::meta_srccomponentpropertiesConn.max() = -1;
			::SCAML::componentproperties::meta_srccomponentpropertiesConn.isNavigable() = true;
			::SCAML::componentproperties::meta_srccomponentpropertiesConn.isPrimary() = false;
			::SCAML::componentproperties::meta_srccomponentpropertiesConn.target() = ::SCAML::SoftwareComponent::meta;
			::SCAML::componentpropertiesConn::meta_srccomponentpropertiesConn_end_ = ::SCAML::SoftwareComponent::meta_dstcomponentpropertiesConn_rev = ::SCAML::componentproperties::meta_srccomponentpropertiesConn;
			::SCAML::SoftwareComponent::meta_dstcomponentpropertiesConn = ::Uml::AssociationRole::Create(ass);
			::SCAML::SoftwareComponent::meta_dstcomponentpropertiesConn.name() = "dstcomponentpropertiesConn";
			::SCAML::SoftwareComponent::meta_dstcomponentpropertiesConn.min() = 0;
			::SCAML::SoftwareComponent::meta_dstcomponentpropertiesConn.max() = -1;
			::SCAML::SoftwareComponent::meta_dstcomponentpropertiesConn.isNavigable() = true;
			::SCAML::SoftwareComponent::meta_dstcomponentpropertiesConn.isPrimary() = false;
			::SCAML::SoftwareComponent::meta_dstcomponentpropertiesConn.target() = ::SCAML::componentproperties::meta;
			::SCAML::componentpropertiesConn::meta_dstcomponentpropertiesConn_end_ = ::SCAML::componentproperties::meta_srccomponentpropertiesConn_rev = ::SCAML::SoftwareComponent::meta_dstcomponentpropertiesConn;
		};
		void InitAssociation16()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::hostcollocation::meta_members = ::Uml::AssociationRole::Create(ass);
			::SCAML::hostcollocation::meta_members.name() = "members";
			::SCAML::hostcollocation::meta_members.min() = 0;
			::SCAML::hostcollocation::meta_members.max() = -1;
			::SCAML::hostcollocation::meta_members.isNavigable() = true;
			::SCAML::hostcollocation::meta_members.isPrimary() = false;
			::SCAML::hostcollocation::meta_members.target() = ::SCAML::SoftwareComponent::meta;
			::SCAML::SoftwareComponent::meta_sethostcollocation = ::Uml::AssociationRole::Create(ass);
			::SCAML::SoftwareComponent::meta_sethostcollocation.name() = "sethostcollocation";
			::SCAML::SoftwareComponent::meta_sethostcollocation.min() = 0;
			::SCAML::SoftwareComponent::meta_sethostcollocation.max() = -1;
			::SCAML::SoftwareComponent::meta_sethostcollocation.isNavigable() = true;
			::SCAML::SoftwareComponent::meta_sethostcollocation.isPrimary() = false;
			::SCAML::SoftwareComponent::meta_sethostcollocation.target() = ::SCAML::hostcollocation::meta;
		};
		void InitAssociation17()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::usesPort::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::usesPort::meta_ref.name() = "ref";
			::SCAML::usesPort::meta_ref.min() = 0;
			::SCAML::usesPort::meta_ref.max() = 1;
			::SCAML::usesPort::meta_ref.isNavigable() = true;
			::SCAML::usesPort::meta_ref.isPrimary() = false;
			::SCAML::usesPort::meta_ref.target() = ::SCAML::Interface::meta;
			::SCAML::Interface::meta_referedbyusesPort = ::Uml::AssociationRole::Create(ass);
			::SCAML::Interface::meta_referedbyusesPort.name() = "referedbyusesPort";
			::SCAML::Interface::meta_referedbyusesPort.min() = 0;
			::SCAML::Interface::meta_referedbyusesPort.max() = -1;
			::SCAML::Interface::meta_referedbyusesPort.isNavigable() = true;
			::SCAML::Interface::meta_referedbyusesPort.isPrimary() = false;
			::SCAML::Interface::meta_referedbyusesPort.target() = ::SCAML::usesPort::meta;
		};
		void InitAssociation18()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::providesPort::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::providesPort::meta_ref.name() = "ref";
			::SCAML::providesPort::meta_ref.min() = 0;
			::SCAML::providesPort::meta_ref.max() = 1;
			::SCAML::providesPort::meta_ref.isNavigable() = true;
			::SCAML::providesPort::meta_ref.isPrimary() = false;
			::SCAML::providesPort::meta_ref.target() = ::SCAML::Interface::meta;
			::SCAML::Interface::meta_referedbyprovidesPort = ::Uml::AssociationRole::Create(ass);
			::SCAML::Interface::meta_referedbyprovidesPort.name() = "referedbyprovidesPort";
			::SCAML::Interface::meta_referedbyprovidesPort.min() = 0;
			::SCAML::Interface::meta_referedbyprovidesPort.max() = -1;
			::SCAML::Interface::meta_referedbyprovidesPort.isNavigable() = true;
			::SCAML::Interface::meta_referedbyprovidesPort.isPrimary() = false;
			::SCAML::Interface::meta_referedbyprovidesPort.target() = ::SCAML::providesPort::meta;
		};
		void InitAssociation19()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::supports::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::supports::meta_ref.name() = "ref";
			::SCAML::supports::meta_ref.min() = 0;
			::SCAML::supports::meta_ref.max() = 1;
			::SCAML::supports::meta_ref.isNavigable() = true;
			::SCAML::supports::meta_ref.isPrimary() = false;
			::SCAML::supports::meta_ref.target() = ::SCAML::Interface::meta;
			::SCAML::Interface::meta_referedbysupports = ::Uml::AssociationRole::Create(ass);
			::SCAML::Interface::meta_referedbysupports.name() = "referedbysupports";
			::SCAML::Interface::meta_referedbysupports.min() = 0;
			::SCAML::Interface::meta_referedbysupports.max() = -1;
			::SCAML::Interface::meta_referedbysupports.isNavigable() = true;
			::SCAML::Interface::meta_referedbysupports.isPrimary() = false;
			::SCAML::Interface::meta_referedbysupports.target() = ::SCAML::supports::meta;
		};
		void InitAssociation20()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "inheritsfrom";
			ass.assocClass() = ::SCAML::inheritsfrom::meta;
			::SCAML::Interface::meta_dstinheritsfrom = ::Uml::AssociationRole::Create(ass);
			::SCAML::Interface::meta_dstinheritsfrom.name() = "dstinheritsfrom";
			::SCAML::Interface::meta_dstinheritsfrom.min() = 0;
			::SCAML::Interface::meta_dstinheritsfrom.max() = -1;
			::SCAML::Interface::meta_dstinheritsfrom.isNavigable() = true;
			::SCAML::Interface::meta_dstinheritsfrom.isPrimary() = false;
			::SCAML::Interface::meta_dstinheritsfrom.target() = ::SCAML::Interface::meta;
			::SCAML::inheritsfrom::meta_dstinheritsfrom_end_ = ::SCAML::Interface::meta_srcinheritsfrom_rev = ::SCAML::Interface::meta_dstinheritsfrom;
			::SCAML::Interface::meta_srcinheritsfrom = ::Uml::AssociationRole::Create(ass);
			::SCAML::Interface::meta_srcinheritsfrom.name() = "srcinheritsfrom";
			::SCAML::Interface::meta_srcinheritsfrom.min() = 0;
			::SCAML::Interface::meta_srcinheritsfrom.max() = -1;
			::SCAML::Interface::meta_srcinheritsfrom.isNavigable() = true;
			::SCAML::Interface::meta_srcinheritsfrom.isPrimary() = false;
			::SCAML::Interface::meta_srcinheritsfrom.target() = ::SCAML::Interface::meta;
			::SCAML::inheritsfrom::meta_srcinheritsfrom_end_ = ::SCAML::Interface::meta_dstinheritsfrom_rev = ::SCAML::Interface::meta_srcinheritsfrom;
		};
		void InitAssociation21()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::DevicePkg::meta_referedbydevicepkgref = ::Uml::AssociationRole::Create(ass);
			::SCAML::DevicePkg::meta_referedbydevicepkgref.name() = "referedbydevicepkgref";
			::SCAML::DevicePkg::meta_referedbydevicepkgref.min() = 0;
			::SCAML::DevicePkg::meta_referedbydevicepkgref.max() = -1;
			::SCAML::DevicePkg::meta_referedbydevicepkgref.isNavigable() = true;
			::SCAML::DevicePkg::meta_referedbydevicepkgref.isPrimary() = false;
			::SCAML::DevicePkg::meta_referedbydevicepkgref.target() = ::SCAML::devicepkgref::meta;
			::SCAML::devicepkgref::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::devicepkgref::meta_ref.name() = "ref";
			::SCAML::devicepkgref::meta_ref.min() = 0;
			::SCAML::devicepkgref::meta_ref.max() = 1;
			::SCAML::devicepkgref::meta_ref.isNavigable() = true;
			::SCAML::devicepkgref::meta_ref.isPrimary() = false;
			::SCAML::devicepkgref::meta_ref.target() = ::SCAML::DevicePkg::meta;
		};
		void InitAssociation22()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::simplePropertyDescriptor::meta_referedbystructvalue = ::Uml::AssociationRole::Create(ass);
			::SCAML::simplePropertyDescriptor::meta_referedbystructvalue.name() = "referedbystructvalue";
			::SCAML::simplePropertyDescriptor::meta_referedbystructvalue.min() = 0;
			::SCAML::simplePropertyDescriptor::meta_referedbystructvalue.max() = -1;
			::SCAML::simplePropertyDescriptor::meta_referedbystructvalue.isNavigable() = true;
			::SCAML::simplePropertyDescriptor::meta_referedbystructvalue.isPrimary() = false;
			::SCAML::simplePropertyDescriptor::meta_referedbystructvalue.target() = ::SCAML::simpleref::meta;
			::SCAML::simpleref::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::simpleref::meta_ref.name() = "ref";
			::SCAML::simpleref::meta_ref.min() = 0;
			::SCAML::simpleref::meta_ref.max() = 1;
			::SCAML::simpleref::meta_ref.isNavigable() = true;
			::SCAML::simpleref::meta_ref.isPrimary() = false;
			::SCAML::simpleref::meta_ref.target() = ::SCAML::simplePropertyDescriptor::meta;
		};
		void InitAssociation23()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::structPropertyDescriptor::meta_referedbystructref = ::Uml::AssociationRole::Create(ass);
			::SCAML::structPropertyDescriptor::meta_referedbystructref.name() = "referedbystructref";
			::SCAML::structPropertyDescriptor::meta_referedbystructref.min() = 0;
			::SCAML::structPropertyDescriptor::meta_referedbystructref.max() = -1;
			::SCAML::structPropertyDescriptor::meta_referedbystructref.isNavigable() = true;
			::SCAML::structPropertyDescriptor::meta_referedbystructref.isPrimary() = false;
			::SCAML::structPropertyDescriptor::meta_referedbystructref.target() = ::SCAML::structref::meta;
			::SCAML::structref::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::structref::meta_ref.name() = "ref";
			::SCAML::structref::meta_ref.min() = 0;
			::SCAML::structref::meta_ref.max() = 1;
			::SCAML::structref::meta_ref.isNavigable() = true;
			::SCAML::structref::meta_ref.isPrimary() = false;
			::SCAML::structref::meta_ref.target() = ::SCAML::structPropertyDescriptor::meta;
		};
		void InitAssociation24()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::simplePropertyDescriptor::meta_referedbysimplepropertyref = ::Uml::AssociationRole::Create(ass);
			::SCAML::simplePropertyDescriptor::meta_referedbysimplepropertyref.name() = "referedbysimplepropertyref";
			::SCAML::simplePropertyDescriptor::meta_referedbysimplepropertyref.min() = 0;
			::SCAML::simplePropertyDescriptor::meta_referedbysimplepropertyref.max() = -1;
			::SCAML::simplePropertyDescriptor::meta_referedbysimplepropertyref.isNavigable() = true;
			::SCAML::simplePropertyDescriptor::meta_referedbysimplepropertyref.isPrimary() = false;
			::SCAML::simplePropertyDescriptor::meta_referedbysimplepropertyref.target() = ::SCAML::simplepropertyref::meta;
			::SCAML::simplepropertyref::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::simplepropertyref::meta_ref.name() = "ref";
			::SCAML::simplepropertyref::meta_ref.min() = 0;
			::SCAML::simplepropertyref::meta_ref.max() = 1;
			::SCAML::simplepropertyref::meta_ref.isNavigable() = true;
			::SCAML::simplepropertyref::meta_ref.isPrimary() = false;
			::SCAML::simplepropertyref::meta_ref.target() = ::SCAML::simplePropertyDescriptor::meta;
		};
		void InitAssociation25()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::DevicePkg::meta_referedbydevicepkgfile = ::Uml::AssociationRole::Create(ass);
			::SCAML::DevicePkg::meta_referedbydevicepkgfile.name() = "referedbydevicepkgfile";
			::SCAML::DevicePkg::meta_referedbydevicepkgfile.min() = 0;
			::SCAML::DevicePkg::meta_referedbydevicepkgfile.max() = -1;
			::SCAML::DevicePkg::meta_referedbydevicepkgfile.isNavigable() = true;
			::SCAML::DevicePkg::meta_referedbydevicepkgfile.isPrimary() = false;
			::SCAML::DevicePkg::meta_referedbydevicepkgfile.target() = ::SCAML::devicepkgfile::meta;
			::SCAML::devicepkgfile::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::devicepkgfile::meta_ref.name() = "ref";
			::SCAML::devicepkgfile::meta_ref.min() = 0;
			::SCAML::devicepkgfile::meta_ref.max() = 1;
			::SCAML::devicepkgfile::meta_ref.isNavigable() = true;
			::SCAML::devicepkgfile::meta_ref.isPrimary() = false;
			::SCAML::devicepkgfile::meta_ref.target() = ::SCAML::DevicePkg::meta;
		};
		void InitAssociation26()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "componentplacementConn";
			ass.assocClass() = ::SCAML::componentplacementConn::meta;
			::SCAML::componentfile::meta_dstcomponentplacementConn = ::Uml::AssociationRole::Create(ass);
			::SCAML::componentfile::meta_dstcomponentplacementConn.name() = "dstcomponentplacementConn";
			::SCAML::componentfile::meta_dstcomponentplacementConn.min() = 0;
			::SCAML::componentfile::meta_dstcomponentplacementConn.max() = -1;
			::SCAML::componentfile::meta_dstcomponentplacementConn.isNavigable() = true;
			::SCAML::componentfile::meta_dstcomponentplacementConn.isPrimary() = false;
			::SCAML::componentfile::meta_dstcomponentplacementConn.target() = ::SCAML::SoftwareComponent::meta;
			::SCAML::componentplacementConn::meta_dstcomponentplacementConn_end_ = ::SCAML::SoftwareComponent::meta_srccomponentplacementConn_rev = ::SCAML::componentfile::meta_dstcomponentplacementConn;
			::SCAML::SoftwareComponent::meta_srccomponentplacementConn = ::Uml::AssociationRole::Create(ass);
			::SCAML::SoftwareComponent::meta_srccomponentplacementConn.name() = "srccomponentplacementConn";
			::SCAML::SoftwareComponent::meta_srccomponentplacementConn.min() = 0;
			::SCAML::SoftwareComponent::meta_srccomponentplacementConn.max() = -1;
			::SCAML::SoftwareComponent::meta_srccomponentplacementConn.isNavigable() = true;
			::SCAML::SoftwareComponent::meta_srccomponentplacementConn.isPrimary() = false;
			::SCAML::SoftwareComponent::meta_srccomponentplacementConn.target() = ::SCAML::componentfile::meta;
			::SCAML::componentplacementConn::meta_srccomponentplacementConn_end_ = ::SCAML::componentfile::meta_dstcomponentplacementConn_rev = ::SCAML::SoftwareComponent::meta_srccomponentplacementConn;
		};
		void InitAssociation27()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::componentfile::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::componentfile::meta_ref.name() = "ref";
			::SCAML::componentfile::meta_ref.min() = 0;
			::SCAML::componentfile::meta_ref.max() = 1;
			::SCAML::componentfile::meta_ref.isNavigable() = true;
			::SCAML::componentfile::meta_ref.isPrimary() = false;
			::SCAML::componentfile::meta_ref.target() = ::SCAML::SoftPkg::meta;
			::SCAML::SoftPkg::meta_referedbycomponentfile = ::Uml::AssociationRole::Create(ass);
			::SCAML::SoftPkg::meta_referedbycomponentfile.name() = "referedbycomponentfile";
			::SCAML::SoftPkg::meta_referedbycomponentfile.min() = 0;
			::SCAML::SoftPkg::meta_referedbycomponentfile.max() = -1;
			::SCAML::SoftPkg::meta_referedbycomponentfile.isNavigable() = true;
			::SCAML::SoftPkg::meta_referedbycomponentfile.isPrimary() = false;
			::SCAML::SoftPkg::meta_referedbycomponentfile.target() = ::SCAML::componentfile::meta;
		};
		void InitAssociation28()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::SoftwareComponent::meta_referedbycompositepartofdevice = ::Uml::AssociationRole::Create(ass);
			::SCAML::SoftwareComponent::meta_referedbycompositepartofdevice.name() = "referedbycompositepartofdevice";
			::SCAML::SoftwareComponent::meta_referedbycompositepartofdevice.min() = 0;
			::SCAML::SoftwareComponent::meta_referedbycompositepartofdevice.max() = -1;
			::SCAML::SoftwareComponent::meta_referedbycompositepartofdevice.isNavigable() = true;
			::SCAML::SoftwareComponent::meta_referedbycompositepartofdevice.isPrimary() = false;
			::SCAML::SoftwareComponent::meta_referedbycompositepartofdevice.target() = ::SCAML::compositepartofdevice::meta;
			::SCAML::compositepartofdevice::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::compositepartofdevice::meta_ref.name() = "ref";
			::SCAML::compositepartofdevice::meta_ref.min() = 0;
			::SCAML::compositepartofdevice::meta_ref.max() = 1;
			::SCAML::compositepartofdevice::meta_ref.isNavigable() = true;
			::SCAML::compositepartofdevice::meta_ref.isPrimary() = false;
			::SCAML::compositepartofdevice::meta_ref.target() = ::SCAML::SoftwareComponent::meta;
		};
		void InitAssociation29()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::SoftwareComponent::meta_referedbydeployondevice = ::Uml::AssociationRole::Create(ass);
			::SCAML::SoftwareComponent::meta_referedbydeployondevice.name() = "referedbydeployondevice";
			::SCAML::SoftwareComponent::meta_referedbydeployondevice.min() = 0;
			::SCAML::SoftwareComponent::meta_referedbydeployondevice.max() = -1;
			::SCAML::SoftwareComponent::meta_referedbydeployondevice.isNavigable() = true;
			::SCAML::SoftwareComponent::meta_referedbydeployondevice.isPrimary() = false;
			::SCAML::SoftwareComponent::meta_referedbydeployondevice.target() = ::SCAML::deployondevice::meta;
			::SCAML::deployondevice::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::deployondevice::meta_ref.name() = "ref";
			::SCAML::deployondevice::meta_ref.min() = 0;
			::SCAML::deployondevice::meta_ref.max() = 1;
			::SCAML::deployondevice::meta_ref.isNavigable() = true;
			::SCAML::deployondevice::meta_ref.isPrimary() = false;
			::SCAML::deployondevice::meta_ref.target() = ::SCAML::SoftwareComponent::meta;
		};
		void InitAssociation30()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::SoftPkg::meta_referedbydevconfigcomponentfile = ::Uml::AssociationRole::Create(ass);
			::SCAML::SoftPkg::meta_referedbydevconfigcomponentfile.name() = "referedbydevconfigcomponentfile";
			::SCAML::SoftPkg::meta_referedbydevconfigcomponentfile.min() = 0;
			::SCAML::SoftPkg::meta_referedbydevconfigcomponentfile.max() = -1;
			::SCAML::SoftPkg::meta_referedbydevconfigcomponentfile.isNavigable() = true;
			::SCAML::SoftPkg::meta_referedbydevconfigcomponentfile.isPrimary() = false;
			::SCAML::SoftPkg::meta_referedbydevconfigcomponentfile.target() = ::SCAML::devconfigcomponentfile::meta;
			::SCAML::devconfigcomponentfile::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::devconfigcomponentfile::meta_ref.name() = "ref";
			::SCAML::devconfigcomponentfile::meta_ref.min() = 0;
			::SCAML::devconfigcomponentfile::meta_ref.max() = 1;
			::SCAML::devconfigcomponentfile::meta_ref.isNavigable() = true;
			::SCAML::devconfigcomponentfile::meta_ref.isPrimary() = false;
			::SCAML::devconfigcomponentfile::meta_ref.target() = ::SCAML::SoftPkg::meta;
		};
		void InitAssociation31()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::SoftPkg::meta_referedbydevicemanagersoftpkg = ::Uml::AssociationRole::Create(ass);
			::SCAML::SoftPkg::meta_referedbydevicemanagersoftpkg.name() = "referedbydevicemanagersoftpkg";
			::SCAML::SoftPkg::meta_referedbydevicemanagersoftpkg.min() = 0;
			::SCAML::SoftPkg::meta_referedbydevicemanagersoftpkg.max() = -1;
			::SCAML::SoftPkg::meta_referedbydevicemanagersoftpkg.isNavigable() = true;
			::SCAML::SoftPkg::meta_referedbydevicemanagersoftpkg.isPrimary() = false;
			::SCAML::SoftPkg::meta_referedbydevicemanagersoftpkg.target() = ::SCAML::devicemanagersoftpkg::meta;
			::SCAML::devicemanagersoftpkg::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::devicemanagersoftpkg::meta_ref.name() = "ref";
			::SCAML::devicemanagersoftpkg::meta_ref.min() = 0;
			::SCAML::devicemanagersoftpkg::meta_ref.max() = 1;
			::SCAML::devicemanagersoftpkg::meta_ref.isNavigable() = true;
			::SCAML::devicemanagersoftpkg::meta_ref.isPrimary() = false;
			::SCAML::devicemanagersoftpkg::meta_ref.target() = ::SCAML::SoftPkg::meta;
		};
		void InitAssociation32()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::DevicePkg::meta_referedbyusesdeviceref = ::Uml::AssociationRole::Create(ass);
			::SCAML::DevicePkg::meta_referedbyusesdeviceref.name() = "referedbyusesdeviceref";
			::SCAML::DevicePkg::meta_referedbyusesdeviceref.min() = 0;
			::SCAML::DevicePkg::meta_referedbyusesdeviceref.max() = -1;
			::SCAML::DevicePkg::meta_referedbyusesdeviceref.isNavigable() = true;
			::SCAML::DevicePkg::meta_referedbyusesdeviceref.isPrimary() = false;
			::SCAML::DevicePkg::meta_referedbyusesdeviceref.target() = ::SCAML::usesdeviceref::meta;
			::SCAML::usesdeviceref::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::usesdeviceref::meta_ref.name() = "ref";
			::SCAML::usesdeviceref::meta_ref.min() = 0;
			::SCAML::usesdeviceref::meta_ref.max() = 1;
			::SCAML::usesdeviceref::meta_ref.isNavigable() = true;
			::SCAML::usesdeviceref::meta_ref.isPrimary() = false;
			::SCAML::usesdeviceref::meta_ref.target() = ::SCAML::DevicePkg::meta;
		};
		void InitAssociation33()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::Properties::meta_referedbypropertyref = ::Uml::AssociationRole::Create(ass);
			::SCAML::Properties::meta_referedbypropertyref.name() = "referedbypropertyref";
			::SCAML::Properties::meta_referedbypropertyref.min() = 0;
			::SCAML::Properties::meta_referedbypropertyref.max() = -1;
			::SCAML::Properties::meta_referedbypropertyref.isNavigable() = true;
			::SCAML::Properties::meta_referedbypropertyref.isPrimary() = false;
			::SCAML::Properties::meta_referedbypropertyref.target() = ::SCAML::propertyref::meta;
			::SCAML::propertyref::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::propertyref::meta_ref.name() = "ref";
			::SCAML::propertyref::meta_ref.min() = 0;
			::SCAML::propertyref::meta_ref.max() = 1;
			::SCAML::propertyref::meta_ref.isNavigable() = true;
			::SCAML::propertyref::meta_ref.isPrimary() = false;
			::SCAML::propertyref::meta_ref.target() = ::SCAML::Properties::meta;
		};
		void InitAssociation34()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "usesImpl";
			ass.assocClass() = ::SCAML::usesImpl::meta;
			::SCAML::implref::meta_srcusesImpl = ::Uml::AssociationRole::Create(ass);
			::SCAML::implref::meta_srcusesImpl.name() = "srcusesImpl";
			::SCAML::implref::meta_srcusesImpl.min() = 0;
			::SCAML::implref::meta_srcusesImpl.max() = -1;
			::SCAML::implref::meta_srcusesImpl.isNavigable() = true;
			::SCAML::implref::meta_srcusesImpl.isPrimary() = false;
			::SCAML::implref::meta_srcusesImpl.target() = ::SCAML::softpkgref::meta;
			::SCAML::usesImpl::meta_srcusesImpl_end_ = ::SCAML::softpkgref::meta_dstusesImpl_rev = ::SCAML::implref::meta_srcusesImpl;
			::SCAML::softpkgref::meta_dstusesImpl = ::Uml::AssociationRole::Create(ass);
			::SCAML::softpkgref::meta_dstusesImpl.name() = "dstusesImpl";
			::SCAML::softpkgref::meta_dstusesImpl.min() = 0;
			::SCAML::softpkgref::meta_dstusesImpl.max() = 1;
			::SCAML::softpkgref::meta_dstusesImpl.isNavigable() = true;
			::SCAML::softpkgref::meta_dstusesImpl.isPrimary() = false;
			::SCAML::softpkgref::meta_dstusesImpl.target() = ::SCAML::implref::meta;
			::SCAML::usesImpl::meta_dstusesImpl_end_ = ::SCAML::implref::meta_srcusesImpl_rev = ::SCAML::softpkgref::meta_dstusesImpl;
		};
		void InitAssociation35()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::implref::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::implref::meta_ref.name() = "ref";
			::SCAML::implref::meta_ref.min() = 0;
			::SCAML::implref::meta_ref.max() = 1;
			::SCAML::implref::meta_ref.isNavigable() = true;
			::SCAML::implref::meta_ref.isPrimary() = false;
			::SCAML::implref::meta_ref.target() = ::SCAML::implementation::meta;
			::SCAML::implementation::meta_referedbyimplref = ::Uml::AssociationRole::Create(ass);
			::SCAML::implementation::meta_referedbyimplref.name() = "referedbyimplref";
			::SCAML::implementation::meta_referedbyimplref.min() = 0;
			::SCAML::implementation::meta_referedbyimplref.max() = -1;
			::SCAML::implementation::meta_referedbyimplref.isNavigable() = true;
			::SCAML::implementation::meta_referedbyimplref.isPrimary() = false;
			::SCAML::implementation::meta_referedbyimplref.target() = ::SCAML::implref::meta;
		};
		void InitAssociation36()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::softpkgref::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::softpkgref::meta_ref.name() = "ref";
			::SCAML::softpkgref::meta_ref.min() = 0;
			::SCAML::softpkgref::meta_ref.max() = 1;
			::SCAML::softpkgref::meta_ref.isNavigable() = true;
			::SCAML::softpkgref::meta_ref.isPrimary() = false;
			::SCAML::softpkgref::meta_ref.target() = ::SCAML::SoftPkg::meta;
			::SCAML::SoftPkg::meta_referedbysoftpkgref = ::Uml::AssociationRole::Create(ass);
			::SCAML::SoftPkg::meta_referedbysoftpkgref.name() = "referedbysoftpkgref";
			::SCAML::SoftPkg::meta_referedbysoftpkgref.min() = 0;
			::SCAML::SoftPkg::meta_referedbysoftpkgref.max() = -1;
			::SCAML::SoftPkg::meta_referedbysoftpkgref.isNavigable() = true;
			::SCAML::SoftPkg::meta_referedbysoftpkgref.isPrimary() = false;
			::SCAML::SoftPkg::meta_referedbysoftpkgref.target() = ::SCAML::softpkgref::meta;
		};
		void InitAssociation37()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			ass.name() = "DataFlow";
			ass.assocClass() = ::SCAML::DataFlow::meta;
			::SCAML::DFFCO::meta_srcDataFlow = ::Uml::AssociationRole::Create(ass);
			::SCAML::DFFCO::meta_srcDataFlow.name() = "srcDataFlow";
			::SCAML::DFFCO::meta_srcDataFlow.min() = 0;
			::SCAML::DFFCO::meta_srcDataFlow.max() = -1;
			::SCAML::DFFCO::meta_srcDataFlow.isNavigable() = true;
			::SCAML::DFFCO::meta_srcDataFlow.isPrimary() = false;
			::SCAML::DFFCO::meta_srcDataFlow.target() = ::SCAML::DFFCO::meta;
			::SCAML::DataFlow::meta_srcDataFlow_end_ = ::SCAML::DFFCO::meta_dstDataFlow_rev = ::SCAML::DFFCO::meta_srcDataFlow;
			::SCAML::DFFCO::meta_dstDataFlow = ::Uml::AssociationRole::Create(ass);
			::SCAML::DFFCO::meta_dstDataFlow.name() = "dstDataFlow";
			::SCAML::DFFCO::meta_dstDataFlow.min() = 0;
			::SCAML::DFFCO::meta_dstDataFlow.max() = -1;
			::SCAML::DFFCO::meta_dstDataFlow.isNavigable() = true;
			::SCAML::DFFCO::meta_dstDataFlow.isPrimary() = false;
			::SCAML::DFFCO::meta_dstDataFlow.target() = ::SCAML::DFFCO::meta;
			::SCAML::DataFlow::meta_dstDataFlow_end_ = ::SCAML::DFFCO::meta_srcDataFlow_rev = ::SCAML::DFFCO::meta_dstDataFlow;
		};
		void InitAssociation38()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::Properties::meta_referedbypropertyfile = ::Uml::AssociationRole::Create(ass);
			::SCAML::Properties::meta_referedbypropertyfile.name() = "referedbypropertyfile";
			::SCAML::Properties::meta_referedbypropertyfile.min() = 0;
			::SCAML::Properties::meta_referedbypropertyfile.max() = -1;
			::SCAML::Properties::meta_referedbypropertyfile.isNavigable() = true;
			::SCAML::Properties::meta_referedbypropertyfile.isPrimary() = false;
			::SCAML::Properties::meta_referedbypropertyfile.target() = ::SCAML::propertyfile::meta;
			::SCAML::propertyfile::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::propertyfile::meta_ref.name() = "ref";
			::SCAML::propertyfile::meta_ref.min() = 0;
			::SCAML::propertyfile::meta_ref.max() = 1;
			::SCAML::propertyfile::meta_ref.isNavigable() = true;
			::SCAML::propertyfile::meta_ref.isPrimary() = false;
			::SCAML::propertyfile::meta_ref.target() = ::SCAML::Properties::meta;
		};
		void InitAssociation39()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::SoftPkg::meta_referedbySoftPkgRef = ::Uml::AssociationRole::Create(ass);
			::SCAML::SoftPkg::meta_referedbySoftPkgRef.name() = "referedbySoftPkgRef";
			::SCAML::SoftPkg::meta_referedbySoftPkgRef.min() = 0;
			::SCAML::SoftPkg::meta_referedbySoftPkgRef.max() = -1;
			::SCAML::SoftPkg::meta_referedbySoftPkgRef.isNavigable() = true;
			::SCAML::SoftPkg::meta_referedbySoftPkgRef.isPrimary() = false;
			::SCAML::SoftPkg::meta_referedbySoftPkgRef.target() = ::SCAML::SoftPkgRef::meta;
			::SCAML::SoftPkgRef::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::SoftPkgRef::meta_ref.name() = "ref";
			::SCAML::SoftPkgRef::meta_ref.min() = 0;
			::SCAML::SoftPkgRef::meta_ref.max() = 1;
			::SCAML::SoftPkgRef::meta_ref.isNavigable() = true;
			::SCAML::SoftPkgRef::meta_ref.isPrimary() = false;
			::SCAML::SoftPkgRef::meta_ref.target() = ::SCAML::SoftPkg::meta;
		};
		void InitAssociation40()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::SoftwareComponent::meta_referedbySoftwareComponentRef = ::Uml::AssociationRole::Create(ass);
			::SCAML::SoftwareComponent::meta_referedbySoftwareComponentRef.name() = "referedbySoftwareComponentRef";
			::SCAML::SoftwareComponent::meta_referedbySoftwareComponentRef.min() = 0;
			::SCAML::SoftwareComponent::meta_referedbySoftwareComponentRef.max() = -1;
			::SCAML::SoftwareComponent::meta_referedbySoftwareComponentRef.isNavigable() = true;
			::SCAML::SoftwareComponent::meta_referedbySoftwareComponentRef.isPrimary() = false;
			::SCAML::SoftwareComponent::meta_referedbySoftwareComponentRef.target() = ::SCAML::SoftwareComponentRef::meta;
			::SCAML::SoftwareComponentRef::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::SoftwareComponentRef::meta_ref.name() = "ref";
			::SCAML::SoftwareComponentRef::meta_ref.min() = 0;
			::SCAML::SoftwareComponentRef::meta_ref.max() = 1;
			::SCAML::SoftwareComponentRef::meta_ref.isNavigable() = true;
			::SCAML::SoftwareComponentRef::meta_ref.isPrimary() = false;
			::SCAML::SoftwareComponentRef::meta_ref.target() = ::SCAML::SoftwareComponent::meta;
		};
		void InitAssociation41()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::DevicePkg::meta_referedbyDevicePkgRef = ::Uml::AssociationRole::Create(ass);
			::SCAML::DevicePkg::meta_referedbyDevicePkgRef.name() = "referedbyDevicePkgRef";
			::SCAML::DevicePkg::meta_referedbyDevicePkgRef.min() = 0;
			::SCAML::DevicePkg::meta_referedbyDevicePkgRef.max() = -1;
			::SCAML::DevicePkg::meta_referedbyDevicePkgRef.isNavigable() = true;
			::SCAML::DevicePkg::meta_referedbyDevicePkgRef.isPrimary() = false;
			::SCAML::DevicePkg::meta_referedbyDevicePkgRef.target() = ::SCAML::DevicePkgRef::meta;
			::SCAML::DevicePkgRef::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::DevicePkgRef::meta_ref.name() = "ref";
			::SCAML::DevicePkgRef::meta_ref.min() = 0;
			::SCAML::DevicePkgRef::meta_ref.max() = 1;
			::SCAML::DevicePkgRef::meta_ref.isNavigable() = true;
			::SCAML::DevicePkgRef::meta_ref.isPrimary() = false;
			::SCAML::DevicePkgRef::meta_ref.target() = ::SCAML::DevicePkg::meta;
		};
		void InitAssociation42()
		{
			::Uml::Association ass = ::Uml::Association::Create(umldiagram);
			::SCAML::SoftPkg::meta_referedbySoftwarePackageRef = ::Uml::AssociationRole::Create(ass);
			::SCAML::SoftPkg::meta_referedbySoftwarePackageRef.name() = "referedbySoftwarePackageRef";
			::SCAML::SoftPkg::meta_referedbySoftwarePackageRef.min() = 0;
			::SCAML::SoftPkg::meta_referedbySoftwarePackageRef.max() = -1;
			::SCAML::SoftPkg::meta_referedbySoftwarePackageRef.isNavigable() = true;
			::SCAML::SoftPkg::meta_referedbySoftwarePackageRef.isPrimary() = false;
			::SCAML::SoftPkg::meta_referedbySoftwarePackageRef.target() = ::SCAML::SoftwarePackageRef::meta;
			::SCAML::SoftwarePackageRef::meta_ref = ::Uml::AssociationRole::Create(ass);
			::SCAML::SoftwarePackageRef::meta_ref.name() = "ref";
			::SCAML::SoftwarePackageRef::meta_ref.min() = 0;
			::SCAML::SoftwarePackageRef::meta_ref.max() = 1;
			::SCAML::SoftwarePackageRef::meta_ref.isNavigable() = true;
			::SCAML::SoftwarePackageRef::meta_ref.isPrimary() = false;
			::SCAML::SoftwarePackageRef::meta_ref.target() = ::SCAML::SoftPkg::meta;
		};
		void InitCrossNSAssociations()
		{
		}
		void InitComposition0()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::Arg::meta_SimulinkEntrypoint_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::Arg::meta_SimulinkEntrypoint_parent.name() = "SimulinkEntrypoint_parent";
			::SCAML::Arg::meta_SimulinkEntrypoint_parent.isNavigable() = true;
			::SCAML::Arg::meta_SimulinkEntrypoint_parent.target() = ::SCAML::SimulinkEntrypoint::meta;
			::SCAML::SimulinkEntrypoint::meta_Arg_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SimulinkEntrypoint::meta_Arg_children.name() = "Arg";
			::SCAML::SimulinkEntrypoint::meta_Arg_children.min() = 0;
			::SCAML::SimulinkEntrypoint::meta_Arg_children.max() = -1;
			::SCAML::SimulinkEntrypoint::meta_Arg_children.isNavigable() = true;
			::SCAML::SimulinkEntrypoint::meta_Arg_children.target() = ::SCAML::Arg::meta;
		}
		void InitComposition1()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::interfaces::meta_InterfaceFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::interfaces::meta_InterfaceFolder_parent.name() = "InterfaceFolder_parent";
			::SCAML::interfaces::meta_InterfaceFolder_parent.isNavigable() = true;
			::SCAML::interfaces::meta_InterfaceFolder_parent.target() = ::SCAML::InterfaceFolder::meta;
			::SCAML::InterfaceFolder::meta_interfaces_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::InterfaceFolder::meta_interfaces_children.name() = "interfaces";
			::SCAML::InterfaceFolder::meta_interfaces_children.min() = 0;
			::SCAML::InterfaceFolder::meta_interfaces_children.max() = -1;
			::SCAML::InterfaceFolder::meta_interfaces_children.isNavigable() = true;
			::SCAML::InterfaceFolder::meta_interfaces_children.target() = ::SCAML::interfaces::meta;
		}
		void InitComposition2()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::Interface::meta_interfaces_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::Interface::meta_interfaces_parent.name() = "interfaces_parent";
			::SCAML::Interface::meta_interfaces_parent.isNavigable() = true;
			::SCAML::Interface::meta_interfaces_parent.target() = ::SCAML::interfaces::meta;
			::SCAML::interfaces::meta_Interface_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::interfaces::meta_Interface_children.name() = "Interface";
			::SCAML::interfaces::meta_Interface_children.min() = 0;
			::SCAML::interfaces::meta_Interface_children.max() = -1;
			::SCAML::interfaces::meta_Interface_children.isNavigable() = true;
			::SCAML::interfaces::meta_Interface_children.target() = ::SCAML::Interface::meta;
		}
		void InitComposition3()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::inheritsfrom::meta_interfaces_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::inheritsfrom::meta_interfaces_parent.name() = "interfaces_parent";
			::SCAML::inheritsfrom::meta_interfaces_parent.isNavigable() = true;
			::SCAML::inheritsfrom::meta_interfaces_parent.target() = ::SCAML::interfaces::meta;
			::SCAML::interfaces::meta_inheritsfrom_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::interfaces::meta_inheritsfrom_children.name() = "inheritsfrom";
			::SCAML::interfaces::meta_inheritsfrom_children.min() = 0;
			::SCAML::interfaces::meta_inheritsfrom_children.max() = -1;
			::SCAML::interfaces::meta_inheritsfrom_children.isNavigable() = true;
			::SCAML::interfaces::meta_inheritsfrom_children.target() = ::SCAML::inheritsfrom::meta;
		}
		void InitComposition4()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::devicepkgref::meta_hwdeviceregistration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::devicepkgref::meta_hwdeviceregistration_parent.name() = "hwdeviceregistration_parent";
			::SCAML::devicepkgref::meta_hwdeviceregistration_parent.isNavigable() = true;
			::SCAML::devicepkgref::meta_hwdeviceregistration_parent.target() = ::SCAML::hwdeviceregistration::meta;
			::SCAML::hwdeviceregistration::meta_devicepkgref_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::hwdeviceregistration::meta_devicepkgref_children.name() = "devicepkgref";
			::SCAML::hwdeviceregistration::meta_devicepkgref_children.min() = 0;
			::SCAML::hwdeviceregistration::meta_devicepkgref_children.max() = -1;
			::SCAML::hwdeviceregistration::meta_devicepkgref_children.isNavigable() = true;
			::SCAML::hwdeviceregistration::meta_devicepkgref_children.target() = ::SCAML::devicepkgref::meta;
		}
		void InitComposition5()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::propertyfile::meta_hwdeviceregistration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::propertyfile::meta_hwdeviceregistration_parent.name() = "hwdeviceregistration_parent";
			::SCAML::propertyfile::meta_hwdeviceregistration_parent.isNavigable() = true;
			::SCAML::propertyfile::meta_hwdeviceregistration_parent.target() = ::SCAML::hwdeviceregistration::meta;
			::SCAML::hwdeviceregistration::meta_propertyfile_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::hwdeviceregistration::meta_propertyfile_children.name() = "propertyfile";
			::SCAML::hwdeviceregistration::meta_propertyfile_children.min() = 0;
			::SCAML::hwdeviceregistration::meta_propertyfile_children.max() = -1;
			::SCAML::hwdeviceregistration::meta_propertyfile_children.isNavigable() = true;
			::SCAML::hwdeviceregistration::meta_propertyfile_children.target() = ::SCAML::propertyfile::meta;
		}
		void InitComposition6()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::childhwdevice::meta_hwdeviceregistration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::childhwdevice::meta_hwdeviceregistration_parent.name() = "hwdeviceregistration_parent";
			::SCAML::childhwdevice::meta_hwdeviceregistration_parent.isNavigable() = true;
			::SCAML::childhwdevice::meta_hwdeviceregistration_parent.target() = ::SCAML::hwdeviceregistration::meta;
			::SCAML::hwdeviceregistration::meta_childhwdevice_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::hwdeviceregistration::meta_childhwdevice_children.name() = "childhwdevice";
			::SCAML::hwdeviceregistration::meta_childhwdevice_children.min() = 0;
			::SCAML::hwdeviceregistration::meta_childhwdevice_children.max() = -1;
			::SCAML::hwdeviceregistration::meta_childhwdevice_children.isNavigable() = true;
			::SCAML::hwdeviceregistration::meta_childhwdevice_children.target() = ::SCAML::childhwdevice::meta;
		}
		void InitComposition7()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::kind::meta_simpleBase_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::kind::meta_simpleBase_parent.name() = "simpleBase_parent";
			::SCAML::kind::meta_simpleBase_parent.isNavigable() = true;
			::SCAML::kind::meta_simpleBase_parent.target() = ::SCAML::simpleBase::meta;
			::SCAML::simpleBase::meta_kind_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::simpleBase::meta_kind_children.name() = "kind";
			::SCAML::simpleBase::meta_kind_children.min() = 0;
			::SCAML::simpleBase::meta_kind_children.max() = -1;
			::SCAML::simpleBase::meta_kind_children.isNavigable() = true;
			::SCAML::simpleBase::meta_kind_children.target() = ::SCAML::kind::meta;
		}
		void InitComposition8()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::simpleref::meta_structvalue_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::simpleref::meta_structvalue_parent.name() = "structvalue_parent";
			::SCAML::simpleref::meta_structvalue_parent.isNavigable() = true;
			::SCAML::simpleref::meta_structvalue_parent.target() = ::SCAML::structvalue::meta;
			::SCAML::structvalue::meta_simpleref_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::structvalue::meta_simpleref_children.name() = "simpleref";
			::SCAML::structvalue::meta_simpleref_children.min() = 1;
			::SCAML::structvalue::meta_simpleref_children.max() = -1;
			::SCAML::structvalue::meta_simpleref_children.isNavigable() = true;
			::SCAML::structvalue::meta_simpleref_children.target() = ::SCAML::simpleref::meta;
		}
		void InitComposition9()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::structref::meta_structref_structsequencePropertyDescriptor_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::structref::meta_structref_structsequencePropertyDescriptor_parent.name() = "structref_structsequencePropertyDescriptor_parent";
			::SCAML::structref::meta_structref_structsequencePropertyDescriptor_parent.isNavigable() = true;
			::SCAML::structref::meta_structref_structsequencePropertyDescriptor_parent.target() = ::SCAML::structsequencePropertyDescriptor::meta;
			::SCAML::structsequencePropertyDescriptor::meta_structref = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::structsequencePropertyDescriptor::meta_structref.name() = "structref";
			::SCAML::structsequencePropertyDescriptor::meta_structref.min() = 1;
			::SCAML::structsequencePropertyDescriptor::meta_structref.max() = 1;
			::SCAML::structsequencePropertyDescriptor::meta_structref.isNavigable() = true;
			::SCAML::structsequencePropertyDescriptor::meta_structref.target() = ::SCAML::structref::meta;
		}
		void InitComposition10()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::structvalue::meta_structsequencePropertyDescriptor_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::structvalue::meta_structsequencePropertyDescriptor_parent.name() = "structsequencePropertyDescriptor_parent";
			::SCAML::structvalue::meta_structsequencePropertyDescriptor_parent.isNavigable() = true;
			::SCAML::structvalue::meta_structsequencePropertyDescriptor_parent.target() = ::SCAML::structsequencePropertyDescriptor::meta;
			::SCAML::structsequencePropertyDescriptor::meta_structvalue_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::structsequencePropertyDescriptor::meta_structvalue_children.name() = "structvalue";
			::SCAML::structsequencePropertyDescriptor::meta_structvalue_children.min() = 0;
			::SCAML::structsequencePropertyDescriptor::meta_structvalue_children.max() = -1;
			::SCAML::structsequencePropertyDescriptor::meta_structvalue_children.isNavigable() = true;
			::SCAML::structsequencePropertyDescriptor::meta_structvalue_children.target() = ::SCAML::structvalue::meta;
		}
		void InitComposition11()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::simplePropertyDescriptor::meta_simple_structPropertyDescriptor_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::simplePropertyDescriptor::meta_simple_structPropertyDescriptor_parent.name() = "simple_structPropertyDescriptor_parent";
			::SCAML::simplePropertyDescriptor::meta_simple_structPropertyDescriptor_parent.isNavigable() = true;
			::SCAML::simplePropertyDescriptor::meta_simple_structPropertyDescriptor_parent.target() = ::SCAML::structPropertyDescriptor::meta;
			::SCAML::structPropertyDescriptor::meta_simple = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::structPropertyDescriptor::meta_simple.name() = "simple";
			::SCAML::structPropertyDescriptor::meta_simple.min() = 1;
			::SCAML::structPropertyDescriptor::meta_simple.max() = -1;
			::SCAML::structPropertyDescriptor::meta_simple.isNavigable() = true;
			::SCAML::structPropertyDescriptor::meta_simple.target() = ::SCAML::simplePropertyDescriptor::meta;
		}
		void InitComposition12()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::simplePropertyDescriptor::meta_inputvalue_testPropertyDescriptor_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::simplePropertyDescriptor::meta_inputvalue_testPropertyDescriptor_parent.name() = "inputvalue_testPropertyDescriptor_parent";
			::SCAML::simplePropertyDescriptor::meta_inputvalue_testPropertyDescriptor_parent.isNavigable() = true;
			::SCAML::simplePropertyDescriptor::meta_inputvalue_testPropertyDescriptor_parent.target() = ::SCAML::testPropertyDescriptor::meta;
			::SCAML::testPropertyDescriptor::meta_inputvalue = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::testPropertyDescriptor::meta_inputvalue.name() = "inputvalue";
			::SCAML::testPropertyDescriptor::meta_inputvalue.min() = 0;
			::SCAML::testPropertyDescriptor::meta_inputvalue.max() = -1;
			::SCAML::testPropertyDescriptor::meta_inputvalue.isNavigable() = true;
			::SCAML::testPropertyDescriptor::meta_inputvalue.target() = ::SCAML::simplePropertyDescriptor::meta;
		}
		void InitComposition13()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::simplePropertyDescriptor::meta_resultvalue_testPropertyDescriptor_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::simplePropertyDescriptor::meta_resultvalue_testPropertyDescriptor_parent.name() = "resultvalue_testPropertyDescriptor_parent";
			::SCAML::simplePropertyDescriptor::meta_resultvalue_testPropertyDescriptor_parent.isNavigable() = true;
			::SCAML::simplePropertyDescriptor::meta_resultvalue_testPropertyDescriptor_parent.target() = ::SCAML::testPropertyDescriptor::meta;
			::SCAML::testPropertyDescriptor::meta_resultvalue = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::testPropertyDescriptor::meta_resultvalue.name() = "resultvalue";
			::SCAML::testPropertyDescriptor::meta_resultvalue.min() = 1;
			::SCAML::testPropertyDescriptor::meta_resultvalue.max() = -1;
			::SCAML::testPropertyDescriptor::meta_resultvalue.isNavigable() = true;
			::SCAML::testPropertyDescriptor::meta_resultvalue.target() = ::SCAML::simplePropertyDescriptor::meta;
		}
		void InitComposition14()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::enumeration::meta_enumerations_simplePropertyDescriptor_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::enumeration::meta_enumerations_simplePropertyDescriptor_parent.name() = "enumerations_simplePropertyDescriptor_parent";
			::SCAML::enumeration::meta_enumerations_simplePropertyDescriptor_parent.isNavigable() = true;
			::SCAML::enumeration::meta_enumerations_simplePropertyDescriptor_parent.target() = ::SCAML::simplePropertyDescriptor::meta;
			::SCAML::simplePropertyDescriptor::meta_enumerations = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::simplePropertyDescriptor::meta_enumerations.name() = "enumerations";
			::SCAML::simplePropertyDescriptor::meta_enumerations.min() = 0;
			::SCAML::simplePropertyDescriptor::meta_enumerations.max() = -1;
			::SCAML::simplePropertyDescriptor::meta_enumerations.isNavigable() = true;
			::SCAML::simplePropertyDescriptor::meta_enumerations.target() = ::SCAML::enumeration::meta;
		}
		void InitComposition15()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::propertyref::meta_usesdevice_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::propertyref::meta_usesdevice_parent.name() = "usesdevice_parent";
			::SCAML::propertyref::meta_usesdevice_parent.isNavigable() = true;
			::SCAML::propertyref::meta_usesdevice_parent.target() = ::SCAML::usesdevice::meta;
			::SCAML::usesdevice::meta_propertyref_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::usesdevice::meta_propertyref_children.name() = "propertyref";
			::SCAML::usesdevice::meta_propertyref_children.min() = 0;
			::SCAML::usesdevice::meta_propertyref_children.max() = -1;
			::SCAML::usesdevice::meta_propertyref_children.isNavigable() = true;
			::SCAML::usesdevice::meta_propertyref_children.target() = ::SCAML::propertyref::meta;
		}
		void InitComposition16()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::usesdeviceref::meta_usesdevice_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::usesdeviceref::meta_usesdevice_parent.name() = "usesdevice_parent";
			::SCAML::usesdeviceref::meta_usesdevice_parent.isNavigable() = true;
			::SCAML::usesdeviceref::meta_usesdevice_parent.target() = ::SCAML::usesdevice::meta;
			::SCAML::usesdevice::meta_usesdeviceref_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::usesdevice::meta_usesdeviceref_children.name() = "usesdeviceref";
			::SCAML::usesdevice::meta_usesdeviceref_children.min() = 0;
			::SCAML::usesdevice::meta_usesdeviceref_children.max() = -1;
			::SCAML::usesdevice::meta_usesdeviceref_children.isNavigable() = true;
			::SCAML::usesdevice::meta_usesdeviceref_children.target() = ::SCAML::usesdeviceref::meta;
		}
		void InitComposition17()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::implref::meta_implementation_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::implref::meta_implementation_parent.name() = "implementation_parent";
			::SCAML::implref::meta_implementation_parent.isNavigable() = true;
			::SCAML::implref::meta_implementation_parent.target() = ::SCAML::implementation::meta;
			::SCAML::implementation::meta_implref_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::implementation::meta_implref_children.name() = "implref";
			::SCAML::implementation::meta_implref_children.min() = 0;
			::SCAML::implementation::meta_implref_children.max() = -1;
			::SCAML::implementation::meta_implref_children.isNavigable() = true;
			::SCAML::implementation::meta_implref_children.target() = ::SCAML::implref::meta;
		}
		void InitComposition18()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::usesImpl::meta_implementation_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::usesImpl::meta_implementation_parent.name() = "implementation_parent";
			::SCAML::usesImpl::meta_implementation_parent.isNavigable() = true;
			::SCAML::usesImpl::meta_implementation_parent.target() = ::SCAML::implementation::meta;
			::SCAML::implementation::meta_usesImpl_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::implementation::meta_usesImpl_children.name() = "usesImpl";
			::SCAML::implementation::meta_usesImpl_children.min() = 0;
			::SCAML::implementation::meta_usesImpl_children.max() = -1;
			::SCAML::implementation::meta_usesImpl_children.isNavigable() = true;
			::SCAML::implementation::meta_usesImpl_children.target() = ::SCAML::usesImpl::meta;
		}
		void InitComposition19()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::dependency::meta_implementation_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::dependency::meta_implementation_parent.name() = "implementation_parent";
			::SCAML::dependency::meta_implementation_parent.isNavigable() = true;
			::SCAML::dependency::meta_implementation_parent.target() = ::SCAML::implementation::meta;
			::SCAML::implementation::meta_dependency_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::implementation::meta_dependency_children.name() = "dependency";
			::SCAML::implementation::meta_dependency_children.min() = 0;
			::SCAML::implementation::meta_dependency_children.max() = -1;
			::SCAML::implementation::meta_dependency_children.isNavigable() = true;
			::SCAML::implementation::meta_dependency_children.target() = ::SCAML::dependency::meta;
		}
		void InitComposition20()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::code::meta_implementation_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::code::meta_implementation_parent.name() = "implementation_parent";
			::SCAML::code::meta_implementation_parent.isNavigable() = true;
			::SCAML::code::meta_implementation_parent.target() = ::SCAML::implementation::meta;
			::SCAML::implementation::meta_code_child = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::implementation::meta_code_child.name() = "code";
			::SCAML::implementation::meta_code_child.min() = 1;
			::SCAML::implementation::meta_code_child.max() = 1;
			::SCAML::implementation::meta_code_child.isNavigable() = true;
			::SCAML::implementation::meta_code_child.target() = ::SCAML::code::meta;
		}
		void InitComposition21()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::humanlanguage::meta_implementation_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::humanlanguage::meta_implementation_parent.name() = "implementation_parent";
			::SCAML::humanlanguage::meta_implementation_parent.isNavigable() = true;
			::SCAML::humanlanguage::meta_implementation_parent.target() = ::SCAML::implementation::meta;
			::SCAML::implementation::meta_humanlanguage_child = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::implementation::meta_humanlanguage_child.name() = "humanlanguage";
			::SCAML::implementation::meta_humanlanguage_child.min() = 0;
			::SCAML::implementation::meta_humanlanguage_child.max() = 1;
			::SCAML::implementation::meta_humanlanguage_child.isNavigable() = true;
			::SCAML::implementation::meta_humanlanguage_child.target() = ::SCAML::humanlanguage::meta;
		}
		void InitComposition22()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::runtime::meta_implementation_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::runtime::meta_implementation_parent.name() = "implementation_parent";
			::SCAML::runtime::meta_implementation_parent.isNavigable() = true;
			::SCAML::runtime::meta_implementation_parent.target() = ::SCAML::implementation::meta;
			::SCAML::implementation::meta_runtime_child = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::implementation::meta_runtime_child.name() = "runtime";
			::SCAML::implementation::meta_runtime_child.min() = 0;
			::SCAML::implementation::meta_runtime_child.max() = 1;
			::SCAML::implementation::meta_runtime_child.isNavigable() = true;
			::SCAML::implementation::meta_runtime_child.target() = ::SCAML::runtime::meta;
		}
		void InitComposition23()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::compiler::meta_implementation_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::compiler::meta_implementation_parent.name() = "implementation_parent";
			::SCAML::compiler::meta_implementation_parent.isNavigable() = true;
			::SCAML::compiler::meta_implementation_parent.target() = ::SCAML::implementation::meta;
			::SCAML::implementation::meta_compiler_child = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::implementation::meta_compiler_child.name() = "compiler";
			::SCAML::implementation::meta_compiler_child.min() = 0;
			::SCAML::implementation::meta_compiler_child.max() = 1;
			::SCAML::implementation::meta_compiler_child.isNavigable() = true;
			::SCAML::implementation::meta_compiler_child.target() = ::SCAML::compiler::meta;
		}
		void InitComposition24()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::processor::meta_implementation_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::processor::meta_implementation_parent.name() = "implementation_parent";
			::SCAML::processor::meta_implementation_parent.isNavigable() = true;
			::SCAML::processor::meta_implementation_parent.target() = ::SCAML::implementation::meta;
			::SCAML::implementation::meta_processor_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::implementation::meta_processor_children.name() = "processor";
			::SCAML::implementation::meta_processor_children.min() = 0;
			::SCAML::implementation::meta_processor_children.max() = -1;
			::SCAML::implementation::meta_processor_children.isNavigable() = true;
			::SCAML::implementation::meta_processor_children.target() = ::SCAML::processor::meta;
		}
		void InitComposition25()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::os::meta_implementation_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::os::meta_implementation_parent.name() = "implementation_parent";
			::SCAML::os::meta_implementation_parent.isNavigable() = true;
			::SCAML::os::meta_implementation_parent.target() = ::SCAML::implementation::meta;
			::SCAML::implementation::meta_os_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::implementation::meta_os_children.name() = "os";
			::SCAML::implementation::meta_os_children.min() = 0;
			::SCAML::implementation::meta_os_children.max() = -1;
			::SCAML::implementation::meta_os_children.isNavigable() = true;
			::SCAML::implementation::meta_os_children.target() = ::SCAML::os::meta;
		}
		void InitComposition26()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::propertyfile::meta_implementation_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::propertyfile::meta_implementation_parent.name() = "implementation_parent";
			::SCAML::propertyfile::meta_implementation_parent.isNavigable() = true;
			::SCAML::propertyfile::meta_implementation_parent.target() = ::SCAML::implementation::meta;
			::SCAML::implementation::meta_propertyfile_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::implementation::meta_propertyfile_children.name() = "propertyfile";
			::SCAML::implementation::meta_propertyfile_children.min() = 0;
			::SCAML::implementation::meta_propertyfile_children.max() = -1;
			::SCAML::implementation::meta_propertyfile_children.isNavigable() = true;
			::SCAML::implementation::meta_propertyfile_children.target() = ::SCAML::propertyfile::meta;
		}
		void InitComposition27()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::usesdevice::meta_implementation_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::usesdevice::meta_implementation_parent.name() = "implementation_parent";
			::SCAML::usesdevice::meta_implementation_parent.isNavigable() = true;
			::SCAML::usesdevice::meta_implementation_parent.target() = ::SCAML::implementation::meta;
			::SCAML::implementation::meta_usesdevice_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::implementation::meta_usesdevice_children.name() = "usesdevice";
			::SCAML::implementation::meta_usesdevice_children.min() = 0;
			::SCAML::implementation::meta_usesdevice_children.max() = -1;
			::SCAML::implementation::meta_usesdevice_children.isNavigable() = true;
			::SCAML::implementation::meta_usesdevice_children.target() = ::SCAML::usesdevice::meta;
		}
		void InitComposition28()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::programminglanguage::meta_implementation_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::programminglanguage::meta_implementation_parent.name() = "implementation_parent";
			::SCAML::programminglanguage::meta_implementation_parent.isNavigable() = true;
			::SCAML::programminglanguage::meta_implementation_parent.target() = ::SCAML::implementation::meta;
			::SCAML::implementation::meta_programminglanguage_child = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::implementation::meta_programminglanguage_child.name() = "programminglanguage";
			::SCAML::implementation::meta_programminglanguage_child.min() = 0;
			::SCAML::implementation::meta_programminglanguage_child.max() = 1;
			::SCAML::implementation::meta_programminglanguage_child.isNavigable() = true;
			::SCAML::implementation::meta_programminglanguage_child.target() = ::SCAML::programminglanguage::meta;
		}
		void InitComposition29()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::DataPort::meta_SimulinkSystem_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::DataPort::meta_SimulinkSystem_parent.name() = "SimulinkSystem_parent";
			::SCAML::DataPort::meta_SimulinkSystem_parent.isNavigable() = true;
			::SCAML::DataPort::meta_SimulinkSystem_parent.target() = ::SCAML::SimulinkSystem::meta;
			::SCAML::SimulinkSystem::meta_DataPort_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SimulinkSystem::meta_DataPort_children.name() = "DataPort";
			::SCAML::SimulinkSystem::meta_DataPort_children.min() = 0;
			::SCAML::SimulinkSystem::meta_DataPort_children.max() = -1;
			::SCAML::SimulinkSystem::meta_DataPort_children.isNavigable() = true;
			::SCAML::SimulinkSystem::meta_DataPort_children.target() = ::SCAML::DataPort::meta;
		}
		void InitComposition30()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::SimulinkVars::meta_SimulinkSystem_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::SimulinkVars::meta_SimulinkSystem_parent.name() = "SimulinkSystem_parent";
			::SCAML::SimulinkVars::meta_SimulinkSystem_parent.isNavigable() = true;
			::SCAML::SimulinkVars::meta_SimulinkSystem_parent.target() = ::SCAML::SimulinkSystem::meta;
			::SCAML::SimulinkSystem::meta_SimulinkVars_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SimulinkSystem::meta_SimulinkVars_children.name() = "SimulinkVars";
			::SCAML::SimulinkSystem::meta_SimulinkVars_children.min() = 0;
			::SCAML::SimulinkSystem::meta_SimulinkVars_children.max() = -1;
			::SCAML::SimulinkSystem::meta_SimulinkVars_children.isNavigable() = true;
			::SCAML::SimulinkSystem::meta_SimulinkVars_children.target() = ::SCAML::SimulinkVars::meta;
		}
		void InitComposition31()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::SimulinkEntrypoint::meta_SimulinkSystem_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::SimulinkEntrypoint::meta_SimulinkSystem_parent.name() = "SimulinkSystem_parent";
			::SCAML::SimulinkEntrypoint::meta_SimulinkSystem_parent.isNavigable() = true;
			::SCAML::SimulinkEntrypoint::meta_SimulinkSystem_parent.target() = ::SCAML::SimulinkSystem::meta;
			::SCAML::SimulinkSystem::meta_SimulinkEntrypoint_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SimulinkSystem::meta_SimulinkEntrypoint_children.name() = "SimulinkEntrypoint";
			::SCAML::SimulinkSystem::meta_SimulinkEntrypoint_children.min() = 0;
			::SCAML::SimulinkSystem::meta_SimulinkEntrypoint_children.max() = -1;
			::SCAML::SimulinkSystem::meta_SimulinkEntrypoint_children.isNavigable() = true;
			::SCAML::SimulinkSystem::meta_SimulinkEntrypoint_children.target() = ::SCAML::SimulinkEntrypoint::meta;
		}
		void InitComposition32()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::WrapperPart::meta_SimulinkImplementation_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::WrapperPart::meta_SimulinkImplementation_parent.name() = "SimulinkImplementation_parent";
			::SCAML::WrapperPart::meta_SimulinkImplementation_parent.isNavigable() = true;
			::SCAML::WrapperPart::meta_SimulinkImplementation_parent.target() = ::SCAML::SimulinkImplementation::meta;
			::SCAML::SimulinkImplementation::meta_WrapperPart_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SimulinkImplementation::meta_WrapperPart_children.name() = "WrapperPart";
			::SCAML::SimulinkImplementation::meta_WrapperPart_children.min() = 0;
			::SCAML::SimulinkImplementation::meta_WrapperPart_children.max() = -1;
			::SCAML::SimulinkImplementation::meta_WrapperPart_children.isNavigable() = true;
			::SCAML::SimulinkImplementation::meta_WrapperPart_children.target() = ::SCAML::WrapperPart::meta;
		}
		void InitComposition33()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::SimulinkSystem::meta_SimulinkImplementation_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::SimulinkSystem::meta_SimulinkImplementation_parent.name() = "SimulinkImplementation_parent";
			::SCAML::SimulinkSystem::meta_SimulinkImplementation_parent.isNavigable() = true;
			::SCAML::SimulinkSystem::meta_SimulinkImplementation_parent.target() = ::SCAML::SimulinkImplementation::meta;
			::SCAML::SimulinkImplementation::meta_SimulinkSystem_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SimulinkImplementation::meta_SimulinkSystem_children.name() = "SimulinkSystem";
			::SCAML::SimulinkImplementation::meta_SimulinkSystem_children.min() = 0;
			::SCAML::SimulinkImplementation::meta_SimulinkSystem_children.max() = -1;
			::SCAML::SimulinkImplementation::meta_SimulinkSystem_children.isNavigable() = true;
			::SCAML::SimulinkImplementation::meta_SimulinkSystem_children.target() = ::SCAML::SimulinkSystem::meta;
		}
		void InitComposition34()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::SoftPkg::meta_SoftPkgFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::SoftPkg::meta_SoftPkgFolder_parent.name() = "SoftPkgFolder_parent";
			::SCAML::SoftPkg::meta_SoftPkgFolder_parent.isNavigable() = true;
			::SCAML::SoftPkg::meta_SoftPkgFolder_parent.target() = ::SCAML::SoftPkgFolder::meta;
			::SCAML::SoftPkgFolder::meta_SoftPkg_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftPkgFolder::meta_SoftPkg_children.name() = "SoftPkg";
			::SCAML::SoftPkgFolder::meta_SoftPkg_children.min() = 0;
			::SCAML::SoftPkgFolder::meta_SoftPkg_children.max() = -1;
			::SCAML::SoftPkgFolder::meta_SoftPkg_children.isNavigable() = true;
			::SCAML::SoftPkgFolder::meta_SoftPkg_children.target() = ::SCAML::SoftPkg::meta;
		}
		void InitComposition35()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::SoftwareComponent::meta_SoftwareComponentFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::SoftwareComponent::meta_SoftwareComponentFolder_parent.name() = "SoftwareComponentFolder_parent";
			::SCAML::SoftwareComponent::meta_SoftwareComponentFolder_parent.isNavigable() = true;
			::SCAML::SoftwareComponent::meta_SoftwareComponentFolder_parent.target() = ::SCAML::SoftwareComponentFolder::meta;
			::SCAML::SoftwareComponentFolder::meta_SoftwareComponent_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareComponentFolder::meta_SoftwareComponent_children.name() = "SoftwareComponent";
			::SCAML::SoftwareComponentFolder::meta_SoftwareComponent_children.min() = 0;
			::SCAML::SoftwareComponentFolder::meta_SoftwareComponent_children.max() = -1;
			::SCAML::SoftwareComponentFolder::meta_SoftwareComponent_children.isNavigable() = true;
			::SCAML::SoftwareComponentFolder::meta_SoftwareComponent_children.target() = ::SCAML::SoftwareComponent::meta;
		}
		void InitComposition36()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::DevicePkg::meta_DevicePackageFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::DevicePkg::meta_DevicePackageFolder_parent.name() = "DevicePackageFolder_parent";
			::SCAML::DevicePkg::meta_DevicePackageFolder_parent.isNavigable() = true;
			::SCAML::DevicePkg::meta_DevicePackageFolder_parent.target() = ::SCAML::DevicePackageFolder::meta;
			::SCAML::DevicePackageFolder::meta_DevicePkg_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DevicePackageFolder::meta_DevicePkg_children.name() = "DevicePkg";
			::SCAML::DevicePackageFolder::meta_DevicePkg_children.min() = 0;
			::SCAML::DevicePackageFolder::meta_DevicePkg_children.max() = -1;
			::SCAML::DevicePackageFolder::meta_DevicePkg_children.isNavigable() = true;
			::SCAML::DevicePackageFolder::meta_DevicePkg_children.target() = ::SCAML::DevicePkg::meta;
		}
		void InitComposition37()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::DeviceConfiguration::meta_DeviceConfigurationFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_DeviceConfigurationFolder_parent.name() = "DeviceConfigurationFolder_parent";
			::SCAML::DeviceConfiguration::meta_DeviceConfigurationFolder_parent.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_DeviceConfigurationFolder_parent.target() = ::SCAML::DeviceConfigurationFolder::meta;
			::SCAML::DeviceConfigurationFolder::meta_DeviceConfiguration_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfigurationFolder::meta_DeviceConfiguration_children.name() = "DeviceConfiguration";
			::SCAML::DeviceConfigurationFolder::meta_DeviceConfiguration_children.min() = 0;
			::SCAML::DeviceConfigurationFolder::meta_DeviceConfiguration_children.max() = -1;
			::SCAML::DeviceConfigurationFolder::meta_DeviceConfiguration_children.isNavigable() = true;
			::SCAML::DeviceConfigurationFolder::meta_DeviceConfiguration_children.target() = ::SCAML::DeviceConfiguration::meta;
		}
		void InitComposition38()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::Properties::meta_PropertiesFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::Properties::meta_PropertiesFolder_parent.name() = "PropertiesFolder_parent";
			::SCAML::Properties::meta_PropertiesFolder_parent.isNavigable() = true;
			::SCAML::Properties::meta_PropertiesFolder_parent.target() = ::SCAML::PropertiesFolder::meta;
			::SCAML::PropertiesFolder::meta_Properties_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::PropertiesFolder::meta_Properties_children.name() = "Properties";
			::SCAML::PropertiesFolder::meta_Properties_children.min() = 0;
			::SCAML::PropertiesFolder::meta_Properties_children.max() = -1;
			::SCAML::PropertiesFolder::meta_Properties_children.isNavigable() = true;
			::SCAML::PropertiesFolder::meta_Properties_children.target() = ::SCAML::Properties::meta;
		}
		void InitComposition39()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::supports::meta_SoftwareComponent_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::supports::meta_SoftwareComponent_parent.name() = "SoftwareComponent_parent";
			::SCAML::supports::meta_SoftwareComponent_parent.isNavigable() = true;
			::SCAML::supports::meta_SoftwareComponent_parent.target() = ::SCAML::SoftwareComponent::meta;
			::SCAML::SoftwareComponent::meta_supports_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareComponent::meta_supports_children.name() = "supports";
			::SCAML::SoftwareComponent::meta_supports_children.min() = 0;
			::SCAML::SoftwareComponent::meta_supports_children.max() = -1;
			::SCAML::SoftwareComponent::meta_supports_children.isNavigable() = true;
			::SCAML::SoftwareComponent::meta_supports_children.target() = ::SCAML::supports::meta;
		}
		void InitComposition40()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::propertyfile::meta_SoftwareComponent_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::propertyfile::meta_SoftwareComponent_parent.name() = "SoftwareComponent_parent";
			::SCAML::propertyfile::meta_SoftwareComponent_parent.isNavigable() = true;
			::SCAML::propertyfile::meta_SoftwareComponent_parent.target() = ::SCAML::SoftwareComponent::meta;
			::SCAML::SoftwareComponent::meta_propertyfile_child = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareComponent::meta_propertyfile_child.name() = "propertyfile";
			::SCAML::SoftwareComponent::meta_propertyfile_child.min() = 0;
			::SCAML::SoftwareComponent::meta_propertyfile_child.max() = 1;
			::SCAML::SoftwareComponent::meta_propertyfile_child.isNavigable() = true;
			::SCAML::SoftwareComponent::meta_propertyfile_child.target() = ::SCAML::propertyfile::meta;
		}
		void InitComposition41()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::usesPort::meta_uses_SoftwareComponent_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::usesPort::meta_uses_SoftwareComponent_parent.name() = "uses_SoftwareComponent_parent";
			::SCAML::usesPort::meta_uses_SoftwareComponent_parent.isNavigable() = true;
			::SCAML::usesPort::meta_uses_SoftwareComponent_parent.target() = ::SCAML::SoftwareComponent::meta;
			::SCAML::SoftwareComponent::meta_uses = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareComponent::meta_uses.name() = "uses";
			::SCAML::SoftwareComponent::meta_uses.min() = 0;
			::SCAML::SoftwareComponent::meta_uses.max() = -1;
			::SCAML::SoftwareComponent::meta_uses.isNavigable() = true;
			::SCAML::SoftwareComponent::meta_uses.target() = ::SCAML::usesPort::meta;
		}
		void InitComposition42()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::providesPort::meta_provides_SoftwareComponent_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::providesPort::meta_provides_SoftwareComponent_parent.name() = "provides_SoftwareComponent_parent";
			::SCAML::providesPort::meta_provides_SoftwareComponent_parent.isNavigable() = true;
			::SCAML::providesPort::meta_provides_SoftwareComponent_parent.target() = ::SCAML::SoftwareComponent::meta;
			::SCAML::SoftwareComponent::meta_provides = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareComponent::meta_provides.name() = "provides";
			::SCAML::SoftwareComponent::meta_provides.min() = 0;
			::SCAML::SoftwareComponent::meta_provides.max() = -1;
			::SCAML::SoftwareComponent::meta_provides.isNavigable() = true;
			::SCAML::SoftwareComponent::meta_provides.target() = ::SCAML::providesPort::meta;
		}
		void InitComposition43()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::property::meta_properties_Properties_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::property::meta_properties_Properties_parent.name() = "properties_Properties_parent";
			::SCAML::property::meta_properties_Properties_parent.isNavigable() = true;
			::SCAML::property::meta_properties_Properties_parent.target() = ::SCAML::Properties::meta;
			::SCAML::Properties::meta_properties = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::Properties::meta_properties.name() = "properties";
			::SCAML::Properties::meta_properties.min() = 0;
			::SCAML::Properties::meta_properties.max() = -1;
			::SCAML::Properties::meta_properties.isNavigable() = true;
			::SCAML::Properties::meta_properties.target() = ::SCAML::property::meta;
		}
		void InitComposition44()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::propertyfile::meta_SoftPkg_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::propertyfile::meta_SoftPkg_parent.name() = "SoftPkg_parent";
			::SCAML::propertyfile::meta_SoftPkg_parent.isNavigable() = true;
			::SCAML::propertyfile::meta_SoftPkg_parent.target() = ::SCAML::SoftPkg::meta;
			::SCAML::SoftPkg::meta_propertyfile_child = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftPkg::meta_propertyfile_child.name() = "propertyfile";
			::SCAML::SoftPkg::meta_propertyfile_child.min() = 0;
			::SCAML::SoftPkg::meta_propertyfile_child.max() = 1;
			::SCAML::SoftPkg::meta_propertyfile_child.isNavigable() = true;
			::SCAML::SoftPkg::meta_propertyfile_child.target() = ::SCAML::propertyfile::meta;
		}
		void InitComposition45()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::SoftwareComponentRef::meta_descriptor_SoftPkg_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::SoftwareComponentRef::meta_descriptor_SoftPkg_parent.name() = "descriptor_SoftPkg_parent";
			::SCAML::SoftwareComponentRef::meta_descriptor_SoftPkg_parent.isNavigable() = true;
			::SCAML::SoftwareComponentRef::meta_descriptor_SoftPkg_parent.target() = ::SCAML::SoftPkg::meta;
			::SCAML::SoftPkg::meta_descriptor = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftPkg::meta_descriptor.name() = "descriptor";
			::SCAML::SoftPkg::meta_descriptor.min() = 0;
			::SCAML::SoftPkg::meta_descriptor.max() = 1;
			::SCAML::SoftPkg::meta_descriptor.isNavigable() = true;
			::SCAML::SoftPkg::meta_descriptor.target() = ::SCAML::SoftwareComponentRef::meta;
		}
		void InitComposition46()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::author::meta_SoftPkg_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::author::meta_SoftPkg_parent.name() = "SoftPkg_parent";
			::SCAML::author::meta_SoftPkg_parent.isNavigable() = true;
			::SCAML::author::meta_SoftPkg_parent.target() = ::SCAML::SoftPkg::meta;
			::SCAML::SoftPkg::meta_author_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftPkg::meta_author_children.name() = "author";
			::SCAML::SoftPkg::meta_author_children.min() = 1;
			::SCAML::SoftPkg::meta_author_children.max() = -1;
			::SCAML::SoftPkg::meta_author_children.isNavigable() = true;
			::SCAML::SoftPkg::meta_author_children.target() = ::SCAML::author::meta;
		}
		void InitComposition47()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::usesdevice::meta_SoftPkg_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::usesdevice::meta_SoftPkg_parent.name() = "SoftPkg_parent";
			::SCAML::usesdevice::meta_SoftPkg_parent.isNavigable() = true;
			::SCAML::usesdevice::meta_SoftPkg_parent.target() = ::SCAML::SoftPkg::meta;
			::SCAML::SoftPkg::meta_usesdevice_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftPkg::meta_usesdevice_children.name() = "usesdevice";
			::SCAML::SoftPkg::meta_usesdevice_children.min() = 0;
			::SCAML::SoftPkg::meta_usesdevice_children.max() = -1;
			::SCAML::SoftPkg::meta_usesdevice_children.isNavigable() = true;
			::SCAML::SoftPkg::meta_usesdevice_children.target() = ::SCAML::usesdevice::meta;
		}
		void InitComposition48()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::implementation::meta_SoftPkg_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::implementation::meta_SoftPkg_parent.name() = "SoftPkg_parent";
			::SCAML::implementation::meta_SoftPkg_parent.isNavigable() = true;
			::SCAML::implementation::meta_SoftPkg_parent.target() = ::SCAML::SoftPkg::meta;
			::SCAML::SoftPkg::meta_implementation_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftPkg::meta_implementation_children.name() = "implementation";
			::SCAML::SoftPkg::meta_implementation_children.min() = 1;
			::SCAML::SoftPkg::meta_implementation_children.max() = -1;
			::SCAML::SoftPkg::meta_implementation_children.isNavigable() = true;
			::SCAML::SoftPkg::meta_implementation_children.target() = ::SCAML::implementation::meta;
		}
		void InitComposition49()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::author::meta_DevicePkg_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::author::meta_DevicePkg_parent.name() = "DevicePkg_parent";
			::SCAML::author::meta_DevicePkg_parent.isNavigable() = true;
			::SCAML::author::meta_DevicePkg_parent.target() = ::SCAML::DevicePkg::meta;
			::SCAML::DevicePkg::meta_author_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DevicePkg::meta_author_children.name() = "author";
			::SCAML::DevicePkg::meta_author_children.min() = 0;
			::SCAML::DevicePkg::meta_author_children.max() = -1;
			::SCAML::DevicePkg::meta_author_children.isNavigable() = true;
			::SCAML::DevicePkg::meta_author_children.target() = ::SCAML::author::meta;
		}
		void InitComposition50()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::hwdeviceregistration::meta_DevicePkg_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::hwdeviceregistration::meta_DevicePkg_parent.name() = "DevicePkg_parent";
			::SCAML::hwdeviceregistration::meta_DevicePkg_parent.isNavigable() = true;
			::SCAML::hwdeviceregistration::meta_DevicePkg_parent.target() = ::SCAML::DevicePkg::meta;
			::SCAML::DevicePkg::meta_hwdeviceregistration_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DevicePkg::meta_hwdeviceregistration_children.name() = "hwdeviceregistration";
			::SCAML::DevicePkg::meta_hwdeviceregistration_children.min() = 0;
			::SCAML::DevicePkg::meta_hwdeviceregistration_children.max() = -1;
			::SCAML::DevicePkg::meta_hwdeviceregistration_children.isNavigable() = true;
			::SCAML::DevicePkg::meta_hwdeviceregistration_children.target() = ::SCAML::hwdeviceregistration::meta;
		}
		void InitComposition51()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::SoftwareComponentFolder::meta_DomainProfile_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::SoftwareComponentFolder::meta_DomainProfile_parent.name() = "DomainProfile_parent";
			::SCAML::SoftwareComponentFolder::meta_DomainProfile_parent.isNavigable() = true;
			::SCAML::SoftwareComponentFolder::meta_DomainProfile_parent.target() = ::SCAML::DomainProfile::meta;
			::SCAML::DomainProfile::meta_SoftwareComponentFolder_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DomainProfile::meta_SoftwareComponentFolder_children.name() = "SoftwareComponentFolder";
			::SCAML::DomainProfile::meta_SoftwareComponentFolder_children.min() = 0;
			::SCAML::DomainProfile::meta_SoftwareComponentFolder_children.max() = -1;
			::SCAML::DomainProfile::meta_SoftwareComponentFolder_children.isNavigable() = true;
			::SCAML::DomainProfile::meta_SoftwareComponentFolder_children.target() = ::SCAML::SoftwareComponentFolder::meta;
		}
		void InitComposition52()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::SoftPkgFolder::meta_DomainProfile_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::SoftPkgFolder::meta_DomainProfile_parent.name() = "DomainProfile_parent";
			::SCAML::SoftPkgFolder::meta_DomainProfile_parent.isNavigable() = true;
			::SCAML::SoftPkgFolder::meta_DomainProfile_parent.target() = ::SCAML::DomainProfile::meta;
			::SCAML::DomainProfile::meta_SoftPkgFolder_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DomainProfile::meta_SoftPkgFolder_children.name() = "SoftPkgFolder";
			::SCAML::DomainProfile::meta_SoftPkgFolder_children.min() = 0;
			::SCAML::DomainProfile::meta_SoftPkgFolder_children.max() = -1;
			::SCAML::DomainProfile::meta_SoftPkgFolder_children.isNavigable() = true;
			::SCAML::DomainProfile::meta_SoftPkgFolder_children.target() = ::SCAML::SoftPkgFolder::meta;
		}
		void InitComposition53()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::DevicePackageFolder::meta_DomainProfile_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::DevicePackageFolder::meta_DomainProfile_parent.name() = "DomainProfile_parent";
			::SCAML::DevicePackageFolder::meta_DomainProfile_parent.isNavigable() = true;
			::SCAML::DevicePackageFolder::meta_DomainProfile_parent.target() = ::SCAML::DomainProfile::meta;
			::SCAML::DomainProfile::meta_DevicePackageFolder_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DomainProfile::meta_DevicePackageFolder_children.name() = "DevicePackageFolder";
			::SCAML::DomainProfile::meta_DevicePackageFolder_children.min() = 0;
			::SCAML::DomainProfile::meta_DevicePackageFolder_children.max() = -1;
			::SCAML::DomainProfile::meta_DevicePackageFolder_children.isNavigable() = true;
			::SCAML::DomainProfile::meta_DevicePackageFolder_children.target() = ::SCAML::DevicePackageFolder::meta;
		}
		void InitComposition54()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::DeviceConfigurationFolder::meta_DomainProfile_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::DeviceConfigurationFolder::meta_DomainProfile_parent.name() = "DomainProfile_parent";
			::SCAML::DeviceConfigurationFolder::meta_DomainProfile_parent.isNavigable() = true;
			::SCAML::DeviceConfigurationFolder::meta_DomainProfile_parent.target() = ::SCAML::DomainProfile::meta;
			::SCAML::DomainProfile::meta_DeviceConfigurationFolder_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DomainProfile::meta_DeviceConfigurationFolder_children.name() = "DeviceConfigurationFolder";
			::SCAML::DomainProfile::meta_DeviceConfigurationFolder_children.min() = 0;
			::SCAML::DomainProfile::meta_DeviceConfigurationFolder_children.max() = -1;
			::SCAML::DomainProfile::meta_DeviceConfigurationFolder_children.isNavigable() = true;
			::SCAML::DomainProfile::meta_DeviceConfigurationFolder_children.target() = ::SCAML::DeviceConfigurationFolder::meta;
		}
		void InitComposition55()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::PropertiesFolder::meta_DomainProfile_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::PropertiesFolder::meta_DomainProfile_parent.name() = "DomainProfile_parent";
			::SCAML::PropertiesFolder::meta_DomainProfile_parent.isNavigable() = true;
			::SCAML::PropertiesFolder::meta_DomainProfile_parent.target() = ::SCAML::DomainProfile::meta;
			::SCAML::DomainProfile::meta_PropertiesFolder_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DomainProfile::meta_PropertiesFolder_children.name() = "PropertiesFolder";
			::SCAML::DomainProfile::meta_PropertiesFolder_children.min() = 0;
			::SCAML::DomainProfile::meta_PropertiesFolder_children.max() = -1;
			::SCAML::DomainProfile::meta_PropertiesFolder_children.isNavigable() = true;
			::SCAML::DomainProfile::meta_PropertiesFolder_children.target() = ::SCAML::PropertiesFolder::meta;
		}
		void InitComposition56()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::SoftwareAssembly::meta_DomainProfile_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_DomainProfile_parent.name() = "DomainProfile_parent";
			::SCAML::SoftwareAssembly::meta_DomainProfile_parent.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_DomainProfile_parent.target() = ::SCAML::DomainProfile::meta;
			::SCAML::DomainProfile::meta_SoftwareAssembly_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DomainProfile::meta_SoftwareAssembly_children.name() = "SoftwareAssembly";
			::SCAML::DomainProfile::meta_SoftwareAssembly_children.min() = 0;
			::SCAML::DomainProfile::meta_SoftwareAssembly_children.max() = -1;
			::SCAML::DomainProfile::meta_SoftwareAssembly_children.isNavigable() = true;
			::SCAML::DomainProfile::meta_SoftwareAssembly_children.target() = ::SCAML::SoftwareAssembly::meta;
		}
		void InitComposition57()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::DomainManagerConfiguration::meta_DomainProfile_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::DomainManagerConfiguration::meta_DomainProfile_parent.name() = "DomainProfile_parent";
			::SCAML::DomainManagerConfiguration::meta_DomainProfile_parent.isNavigable() = true;
			::SCAML::DomainManagerConfiguration::meta_DomainProfile_parent.target() = ::SCAML::DomainProfile::meta;
			::SCAML::DomainProfile::meta_DomainManagerConfiguration_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DomainProfile::meta_DomainManagerConfiguration_children.name() = "DomainManagerConfiguration";
			::SCAML::DomainProfile::meta_DomainManagerConfiguration_children.min() = 0;
			::SCAML::DomainProfile::meta_DomainManagerConfiguration_children.max() = -1;
			::SCAML::DomainProfile::meta_DomainManagerConfiguration_children.isNavigable() = true;
			::SCAML::DomainProfile::meta_DomainManagerConfiguration_children.target() = ::SCAML::DomainManagerConfiguration::meta;
		}
		void InitComposition58()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::SoftPkgRef::meta_DomainManagerConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::SoftPkgRef::meta_DomainManagerConfiguration_parent.name() = "DomainManagerConfiguration_parent";
			::SCAML::SoftPkgRef::meta_DomainManagerConfiguration_parent.isNavigable() = true;
			::SCAML::SoftPkgRef::meta_DomainManagerConfiguration_parent.target() = ::SCAML::DomainManagerConfiguration::meta;
			::SCAML::DomainManagerConfiguration::meta_SoftPkgRef_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DomainManagerConfiguration::meta_SoftPkgRef_children.name() = "SoftPkgRef";
			::SCAML::DomainManagerConfiguration::meta_SoftPkgRef_children.min() = 0;
			::SCAML::DomainManagerConfiguration::meta_SoftPkgRef_children.max() = -1;
			::SCAML::DomainManagerConfiguration::meta_SoftPkgRef_children.isNavigable() = true;
			::SCAML::DomainManagerConfiguration::meta_SoftPkgRef_children.target() = ::SCAML::SoftPkgRef::meta;
		}
		void InitComposition59()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::componentsupportedinterface::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::componentsupportedinterface::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::componentsupportedinterface::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::componentsupportedinterface::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_componentsupportedinterface_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_componentsupportedinterface_children.name() = "componentsupportedinterface";
			::SCAML::SoftwareAssembly::meta_componentsupportedinterface_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_componentsupportedinterface_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_componentsupportedinterface_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_componentsupportedinterface_children.target() = ::SCAML::componentsupportedinterface::meta;
		}
		void InitComposition60()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::SoftwarePackageRef::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::SoftwarePackageRef::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::SoftwarePackageRef::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::SoftwarePackageRef::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_SoftwarePackageRef_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_SoftwarePackageRef_children.name() = "SoftwarePackageRef";
			::SCAML::SoftwareAssembly::meta_SoftwarePackageRef_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_SoftwarePackageRef_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_SoftwarePackageRef_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_SoftwarePackageRef_children.target() = ::SCAML::SoftwarePackageRef::meta;
		}
		void InitComposition61()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::usestodestConn::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::usestodestConn::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::usestodestConn::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::usestodestConn::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_usestodestConn_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_usestodestConn_children.name() = "usestodestConn";
			::SCAML::SoftwareAssembly::meta_usestodestConn_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_usestodestConn_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_usestodestConn_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_usestodestConn_children.target() = ::SCAML::usestodestConn::meta;
		}
		void InitComposition62()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::usestofreestandingConn::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::usestofreestandingConn::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::usestofreestandingConn::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::usestofreestandingConn::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_usestofreestandingConn_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_usestofreestandingConn_children.name() = "usestofreestandingConn";
			::SCAML::SoftwareAssembly::meta_usestofreestandingConn_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_usestofreestandingConn_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_usestofreestandingConn_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_usestofreestandingConn_children.target() = ::SCAML::usestofreestandingConn::meta;
		}
		void InitComposition63()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::freestandingtoprovidedConn::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::freestandingtoprovidedConn::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::freestandingtoprovidedConn::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::freestandingtoprovidedConn::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_freestandingtoprovidedConn_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_freestandingtoprovidedConn_children.name() = "freestandingtoprovidedConn";
			::SCAML::SoftwareAssembly::meta_freestandingtoprovidedConn_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_freestandingtoprovidedConn_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_freestandingtoprovidedConn_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_freestandingtoprovidedConn_children.target() = ::SCAML::freestandingtoprovidedConn::meta;
		}
		void InitComposition64()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::externaltodestConn::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::externaltodestConn::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::externaltodestConn::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::externaltodestConn::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_externaltodestConn_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_externaltodestConn_children.name() = "externaltodestConn";
			::SCAML::SoftwareAssembly::meta_externaltodestConn_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_externaltodestConn_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_externaltodestConn_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_externaltodestConn_children.target() = ::SCAML::externaltodestConn::meta;
		}
		void InitComposition65()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::externalport::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::externalport::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::externalport::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::externalport::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_externalport_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_externalport_children.name() = "externalport";
			::SCAML::SoftwareAssembly::meta_externalport_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_externalport_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_externalport_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_externalport_children.target() = ::SCAML::externalport::meta;
		}
		void InitComposition66()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::FreestandingPort::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::FreestandingPort::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::FreestandingPort::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::FreestandingPort::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_FreestandingPort_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_FreestandingPort_children.name() = "FreestandingPort";
			::SCAML::SoftwareAssembly::meta_FreestandingPort_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_FreestandingPort_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_FreestandingPort_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_FreestandingPort_children.target() = ::SCAML::FreestandingPort::meta;
		}
		void InitComposition67()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::controllertocompinst::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::controllertocompinst::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::controllertocompinst::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::controllertocompinst::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_controllertocompinst_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_controllertocompinst_children.name() = "controllertocompinst";
			::SCAML::SoftwareAssembly::meta_controllertocompinst_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_controllertocompinst_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_controllertocompinst_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_controllertocompinst_children.target() = ::SCAML::controllertocompinst::meta;
		}
		void InitComposition68()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::assemblycontroller::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::assemblycontroller::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::assemblycontroller::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::assemblycontroller::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_assemblycontroller_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_assemblycontroller_children.name() = "assemblycontroller";
			::SCAML::SoftwareAssembly::meta_assemblycontroller_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_assemblycontroller_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_assemblycontroller_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_assemblycontroller_children.target() = ::SCAML::assemblycontroller::meta;
		}
		void InitComposition69()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::SoftwareComponent::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::SoftwareComponent::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::SoftwareComponent::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::SoftwareComponent::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_SoftwareComponent_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_SoftwareComponent_children.name() = "SoftwareComponent";
			::SCAML::SoftwareAssembly::meta_SoftwareComponent_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_SoftwareComponent_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_SoftwareComponent_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_SoftwareComponent_children.target() = ::SCAML::SoftwareComponent::meta;
		}
		void InitComposition70()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::componentfile::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::componentfile::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::componentfile::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::componentfile::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_componentfile_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_componentfile_children.name() = "componentfile";
			::SCAML::SoftwareAssembly::meta_componentfile_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_componentfile_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_componentfile_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_componentfile_children.target() = ::SCAML::componentfile::meta;
		}
		void InitComposition71()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::componentresourcefactoryref::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::componentresourcefactoryref::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::componentresourcefactoryref::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::componentresourcefactoryref::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_componentresourcefactoryref_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_componentresourcefactoryref_children.name() = "componentresourcefactoryref";
			::SCAML::SoftwareAssembly::meta_componentresourcefactoryref_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_componentresourcefactoryref_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_componentresourcefactoryref_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_componentresourcefactoryref_children.target() = ::SCAML::componentresourcefactoryref::meta;
		}
		void InitComposition72()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::componentproperties::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::componentproperties::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::componentproperties::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::componentproperties::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_componentproperties_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_componentproperties_children.name() = "componentproperties";
			::SCAML::SoftwareAssembly::meta_componentproperties_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_componentproperties_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_componentproperties_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_componentproperties_children.target() = ::SCAML::componentproperties::meta;
		}
		void InitComposition73()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::findcomponentConn::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::findcomponentConn::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::findcomponentConn::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::findcomponentConn::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_findcomponentConn_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_findcomponentConn_children.name() = "findcomponentConn";
			::SCAML::SoftwareAssembly::meta_findcomponentConn_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_findcomponentConn_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_findcomponentConn_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_findcomponentConn_children.target() = ::SCAML::findcomponentConn::meta;
		}
		void InitComposition74()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::componentresourcefactorytopropertiesConn::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::componentresourcefactorytopropertiesConn::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::componentresourcefactorytopropertiesConn::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::componentresourcefactorytopropertiesConn::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_componentresourcefactorytopropertiesConn_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_componentresourcefactorytopropertiesConn_children.name() = "componentresourcefactorytopropertiesConn";
			::SCAML::SoftwareAssembly::meta_componentresourcefactorytopropertiesConn_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_componentresourcefactorytopropertiesConn_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_componentresourcefactorytopropertiesConn_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_componentresourcefactorytopropertiesConn_children.target() = ::SCAML::componentresourcefactorytopropertiesConn::meta;
		}
		void InitComposition75()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::componentpropertiesConn::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::componentpropertiesConn::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::componentpropertiesConn::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::componentpropertiesConn::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_componentpropertiesConn_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_componentpropertiesConn_children.name() = "componentpropertiesConn";
			::SCAML::SoftwareAssembly::meta_componentpropertiesConn_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_componentpropertiesConn_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_componentpropertiesConn_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_componentpropertiesConn_children.target() = ::SCAML::componentpropertiesConn::meta;
		}
		void InitComposition76()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::componentplacementConn::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::componentplacementConn::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::componentplacementConn::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::componentplacementConn::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_componentplacementConn_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_componentplacementConn_children.name() = "componentplacementConn";
			::SCAML::SoftwareAssembly::meta_componentplacementConn_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_componentplacementConn_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_componentplacementConn_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_componentplacementConn_children.target() = ::SCAML::componentplacementConn::meta;
		}
		void InitComposition77()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::hostcollocation::meta_SoftwareAssembly_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::hostcollocation::meta_SoftwareAssembly_parent.name() = "SoftwareAssembly_parent";
			::SCAML::hostcollocation::meta_SoftwareAssembly_parent.isNavigable() = true;
			::SCAML::hostcollocation::meta_SoftwareAssembly_parent.target() = ::SCAML::SoftwareAssembly::meta;
			::SCAML::SoftwareAssembly::meta_hostcollocation_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::SoftwareAssembly::meta_hostcollocation_children.name() = "hostcollocation";
			::SCAML::SoftwareAssembly::meta_hostcollocation_children.min() = 0;
			::SCAML::SoftwareAssembly::meta_hostcollocation_children.max() = -1;
			::SCAML::SoftwareAssembly::meta_hostcollocation_children.isNavigable() = true;
			::SCAML::SoftwareAssembly::meta_hostcollocation_children.target() = ::SCAML::hostcollocation::meta;
		}
		void InitComposition78()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::SoftwarePackageRef::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::SoftwarePackageRef::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::SoftwarePackageRef::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::SoftwarePackageRef::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_SoftwarePackageRef_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_SoftwarePackageRef_children.name() = "SoftwarePackageRef";
			::SCAML::DeviceConfiguration::meta_SoftwarePackageRef_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_SoftwarePackageRef_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_SoftwarePackageRef_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_SoftwarePackageRef_children.target() = ::SCAML::SoftwarePackageRef::meta;
		}
		void InitComposition79()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::DevicePkgRef::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::DevicePkgRef::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::DevicePkgRef::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::DevicePkgRef::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_DevicePkgRef_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_DevicePkgRef_children.name() = "DevicePkgRef";
			::SCAML::DeviceConfiguration::meta_DevicePkgRef_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_DevicePkgRef_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_DevicePkgRef_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_DevicePkgRef_children.target() = ::SCAML::DevicePkgRef::meta;
		}
		void InitComposition80()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::devicepkgfile::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::devicepkgfile::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::devicepkgfile::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::devicepkgfile::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_devicepkgfile_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_devicepkgfile_children.name() = "devicepkgfile";
			::SCAML::DeviceConfiguration::meta_devicepkgfile_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_devicepkgfile_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_devicepkgfile_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_devicepkgfile_children.target() = ::SCAML::devicepkgfile::meta;
		}
		void InitComposition81()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::thisPort::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::thisPort::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::thisPort::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::thisPort::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_thisPort_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_thisPort_children.name() = "thisPort";
			::SCAML::DeviceConfiguration::meta_thisPort_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_thisPort_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_thisPort_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_thisPort_children.target() = ::SCAML::thisPort::meta;
		}
		void InitComposition82()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::SoftwareComponent::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::SoftwareComponent::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::SoftwareComponent::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::SoftwareComponent::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_SoftwareComponent_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_SoftwareComponent_children.name() = "SoftwareComponent";
			::SCAML::DeviceConfiguration::meta_SoftwareComponent_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_SoftwareComponent_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_SoftwareComponent_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_SoftwareComponent_children.target() = ::SCAML::SoftwareComponent::meta;
		}
		void InitComposition83()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::filesystemname::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::filesystemname::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::filesystemname::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::filesystemname::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_filesystemname_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_filesystemname_children.name() = "filesystemname";
			::SCAML::DeviceConfiguration::meta_filesystemname_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_filesystemname_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_filesystemname_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_filesystemname_children.target() = ::SCAML::filesystemname::meta;
		}
		void InitComposition84()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::componentpropertiesConn::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::componentpropertiesConn::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::componentpropertiesConn::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::componentpropertiesConn::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_componentpropertiesConn_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_componentpropertiesConn_children.name() = "componentpropertiesConn";
			::SCAML::DeviceConfiguration::meta_componentpropertiesConn_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_componentpropertiesConn_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_componentpropertiesConn_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_componentpropertiesConn_children.target() = ::SCAML::componentpropertiesConn::meta;
		}
		void InitComposition85()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::componentproperties::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::componentproperties::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::componentproperties::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::componentproperties::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_componentproperties_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_componentproperties_children.name() = "componentproperties";
			::SCAML::DeviceConfiguration::meta_componentproperties_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_componentproperties_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_componentproperties_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_componentproperties_children.target() = ::SCAML::componentproperties::meta;
		}
		void InitComposition86()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::componentfile::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::componentfile::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::componentfile::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::componentfile::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_componentfile_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_componentfile_children.name() = "componentfile";
			::SCAML::DeviceConfiguration::meta_componentfile_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_componentfile_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_componentfile_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_componentfile_children.target() = ::SCAML::componentfile::meta;
		}
		void InitComposition87()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::service::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::service::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::service::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::service::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_service_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_service_children.name() = "service";
			::SCAML::DeviceConfiguration::meta_service_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_service_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_service_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_service_children.target() = ::SCAML::service::meta;
		}
		void InitComposition88()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::freestandingtoprovidedConn::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::freestandingtoprovidedConn::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::freestandingtoprovidedConn::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::freestandingtoprovidedConn::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_freestandingtoprovidedConn_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_freestandingtoprovidedConn_children.name() = "freestandingtoprovidedConn";
			::SCAML::DeviceConfiguration::meta_freestandingtoprovidedConn_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_freestandingtoprovidedConn_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_freestandingtoprovidedConn_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_freestandingtoprovidedConn_children.target() = ::SCAML::freestandingtoprovidedConn::meta;
		}
		void InitComposition89()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::usestofreestandingConn::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::usestofreestandingConn::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::usestofreestandingConn::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::usestofreestandingConn::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_usestofreestandingConn_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_usestofreestandingConn_children.name() = "usestofreestandingConn";
			::SCAML::DeviceConfiguration::meta_usestofreestandingConn_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_usestofreestandingConn_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_usestofreestandingConn_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_usestofreestandingConn_children.target() = ::SCAML::usestofreestandingConn::meta;
		}
		void InitComposition90()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::usestodestConn::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::usestodestConn::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::usestodestConn::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::usestodestConn::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_usestodestConn_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_usestodestConn_children.name() = "usestodestConn";
			::SCAML::DeviceConfiguration::meta_usestodestConn_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_usestodestConn_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_usestodestConn_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_usestodestConn_children.target() = ::SCAML::usestodestConn::meta;
		}
		void InitComposition91()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::SoftwareComponentRef::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::SoftwareComponentRef::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::SoftwareComponentRef::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::SoftwareComponentRef::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_SoftwareComponentRef_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_SoftwareComponentRef_children.name() = "SoftwareComponentRef";
			::SCAML::DeviceConfiguration::meta_SoftwareComponentRef_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_SoftwareComponentRef_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_SoftwareComponentRef_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_SoftwareComponentRef_children.target() = ::SCAML::SoftwareComponentRef::meta;
		}
		void InitComposition92()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::compositepartofdevice::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::compositepartofdevice::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::compositepartofdevice::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::compositepartofdevice::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_compositepartofdevice_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_compositepartofdevice_children.name() = "compositepartofdevice";
			::SCAML::DeviceConfiguration::meta_compositepartofdevice_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_compositepartofdevice_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_compositepartofdevice_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_compositepartofdevice_children.target() = ::SCAML::compositepartofdevice::meta;
		}
		void InitComposition93()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::deployondevice::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::deployondevice::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::deployondevice::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::deployondevice::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_deployondevice_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_deployondevice_children.name() = "deployondevice";
			::SCAML::DeviceConfiguration::meta_deployondevice_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_deployondevice_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_deployondevice_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_deployondevice_children.target() = ::SCAML::deployondevice::meta;
		}
		void InitComposition94()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::componentplacement::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::componentplacement::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::componentplacement::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::componentplacement::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_componentplacement_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_componentplacement_children.name() = "componentplacement";
			::SCAML::DeviceConfiguration::meta_componentplacement_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_componentplacement_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_componentplacement_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_componentplacement_children.target() = ::SCAML::componentplacement::meta;
		}
		void InitComposition95()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::devconfigcomponentfile::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::devconfigcomponentfile::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::devconfigcomponentfile::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::devconfigcomponentfile::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_devconfigcomponentfile_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_devconfigcomponentfile_children.name() = "devconfigcomponentfile";
			::SCAML::DeviceConfiguration::meta_devconfigcomponentfile_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_devconfigcomponentfile_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_devconfigcomponentfile_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_devconfigcomponentfile_children.target() = ::SCAML::devconfigcomponentfile::meta;
		}
		void InitComposition96()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::devicemanagersoftpkg::meta_DeviceConfiguration_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::devicemanagersoftpkg::meta_DeviceConfiguration_parent.name() = "DeviceConfiguration_parent";
			::SCAML::devicemanagersoftpkg::meta_DeviceConfiguration_parent.isNavigable() = true;
			::SCAML::devicemanagersoftpkg::meta_DeviceConfiguration_parent.target() = ::SCAML::DeviceConfiguration::meta;
			::SCAML::DeviceConfiguration::meta_devicemanagersoftpkg_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::DeviceConfiguration::meta_devicemanagersoftpkg_children.name() = "devicemanagersoftpkg";
			::SCAML::DeviceConfiguration::meta_devicemanagersoftpkg_children.min() = 0;
			::SCAML::DeviceConfiguration::meta_devicemanagersoftpkg_children.max() = -1;
			::SCAML::DeviceConfiguration::meta_devicemanagersoftpkg_children.isNavigable() = true;
			::SCAML::DeviceConfiguration::meta_devicemanagersoftpkg_children.target() = ::SCAML::devicemanagersoftpkg::meta;
		}
		void InitComposition97()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::SoftPkgFolder::meta_RootFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::SoftPkgFolder::meta_RootFolder_parent.name() = "RootFolder_parent";
			::SCAML::SoftPkgFolder::meta_RootFolder_parent.isNavigable() = true;
			::SCAML::SoftPkgFolder::meta_RootFolder_parent.target() = ::SCAML::RootFolder::meta;
			::SCAML::RootFolder::meta_SoftPkgFolder_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::RootFolder::meta_SoftPkgFolder_children.name() = "SoftPkgFolder";
			::SCAML::RootFolder::meta_SoftPkgFolder_children.min() = 0;
			::SCAML::RootFolder::meta_SoftPkgFolder_children.max() = -1;
			::SCAML::RootFolder::meta_SoftPkgFolder_children.isNavigable() = true;
			::SCAML::RootFolder::meta_SoftPkgFolder_children.target() = ::SCAML::SoftPkgFolder::meta;
		}
		void InitComposition98()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::InterfaceFolder::meta_RootFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::InterfaceFolder::meta_RootFolder_parent.name() = "RootFolder_parent";
			::SCAML::InterfaceFolder::meta_RootFolder_parent.isNavigable() = true;
			::SCAML::InterfaceFolder::meta_RootFolder_parent.target() = ::SCAML::RootFolder::meta;
			::SCAML::RootFolder::meta_InterfaceFolder_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::RootFolder::meta_InterfaceFolder_children.name() = "InterfaceFolder";
			::SCAML::RootFolder::meta_InterfaceFolder_children.min() = 0;
			::SCAML::RootFolder::meta_InterfaceFolder_children.max() = -1;
			::SCAML::RootFolder::meta_InterfaceFolder_children.isNavigable() = true;
			::SCAML::RootFolder::meta_InterfaceFolder_children.target() = ::SCAML::InterfaceFolder::meta;
		}
		void InitComposition99()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::SoftwareComponentFolder::meta_RootFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::SoftwareComponentFolder::meta_RootFolder_parent.name() = "RootFolder_parent";
			::SCAML::SoftwareComponentFolder::meta_RootFolder_parent.isNavigable() = true;
			::SCAML::SoftwareComponentFolder::meta_RootFolder_parent.target() = ::SCAML::RootFolder::meta;
			::SCAML::RootFolder::meta_SoftwareComponentFolder_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::RootFolder::meta_SoftwareComponentFolder_children.name() = "SoftwareComponentFolder";
			::SCAML::RootFolder::meta_SoftwareComponentFolder_children.min() = 0;
			::SCAML::RootFolder::meta_SoftwareComponentFolder_children.max() = -1;
			::SCAML::RootFolder::meta_SoftwareComponentFolder_children.isNavigable() = true;
			::SCAML::RootFolder::meta_SoftwareComponentFolder_children.target() = ::SCAML::SoftwareComponentFolder::meta;
		}
		void InitComposition100()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::DevicePackageFolder::meta_RootFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::DevicePackageFolder::meta_RootFolder_parent.name() = "RootFolder_parent";
			::SCAML::DevicePackageFolder::meta_RootFolder_parent.isNavigable() = true;
			::SCAML::DevicePackageFolder::meta_RootFolder_parent.target() = ::SCAML::RootFolder::meta;
			::SCAML::RootFolder::meta_DevicePackageFolder_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::RootFolder::meta_DevicePackageFolder_children.name() = "DevicePackageFolder";
			::SCAML::RootFolder::meta_DevicePackageFolder_children.min() = 0;
			::SCAML::RootFolder::meta_DevicePackageFolder_children.max() = -1;
			::SCAML::RootFolder::meta_DevicePackageFolder_children.isNavigable() = true;
			::SCAML::RootFolder::meta_DevicePackageFolder_children.target() = ::SCAML::DevicePackageFolder::meta;
		}
		void InitComposition101()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::DeviceConfigurationFolder::meta_RootFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::DeviceConfigurationFolder::meta_RootFolder_parent.name() = "RootFolder_parent";
			::SCAML::DeviceConfigurationFolder::meta_RootFolder_parent.isNavigable() = true;
			::SCAML::DeviceConfigurationFolder::meta_RootFolder_parent.target() = ::SCAML::RootFolder::meta;
			::SCAML::RootFolder::meta_DeviceConfigurationFolder_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::RootFolder::meta_DeviceConfigurationFolder_children.name() = "DeviceConfigurationFolder";
			::SCAML::RootFolder::meta_DeviceConfigurationFolder_children.min() = 0;
			::SCAML::RootFolder::meta_DeviceConfigurationFolder_children.max() = -1;
			::SCAML::RootFolder::meta_DeviceConfigurationFolder_children.isNavigable() = true;
			::SCAML::RootFolder::meta_DeviceConfigurationFolder_children.target() = ::SCAML::DeviceConfigurationFolder::meta;
		}
		void InitComposition102()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::PropertiesFolder::meta_RootFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::PropertiesFolder::meta_RootFolder_parent.name() = "RootFolder_parent";
			::SCAML::PropertiesFolder::meta_RootFolder_parent.isNavigable() = true;
			::SCAML::PropertiesFolder::meta_RootFolder_parent.target() = ::SCAML::RootFolder::meta;
			::SCAML::RootFolder::meta_PropertiesFolder_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::RootFolder::meta_PropertiesFolder_children.name() = "PropertiesFolder";
			::SCAML::RootFolder::meta_PropertiesFolder_children.min() = 0;
			::SCAML::RootFolder::meta_PropertiesFolder_children.max() = -1;
			::SCAML::RootFolder::meta_PropertiesFolder_children.isNavigable() = true;
			::SCAML::RootFolder::meta_PropertiesFolder_children.target() = ::SCAML::PropertiesFolder::meta;
		}
		void InitComposition103()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::DomainProfile::meta_RootFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::DomainProfile::meta_RootFolder_parent.name() = "RootFolder_parent";
			::SCAML::DomainProfile::meta_RootFolder_parent.isNavigable() = true;
			::SCAML::DomainProfile::meta_RootFolder_parent.target() = ::SCAML::RootFolder::meta;
			::SCAML::RootFolder::meta_DomainProfile_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::RootFolder::meta_DomainProfile_children.name() = "DomainProfile";
			::SCAML::RootFolder::meta_DomainProfile_children.min() = 0;
			::SCAML::RootFolder::meta_DomainProfile_children.max() = -1;
			::SCAML::RootFolder::meta_DomainProfile_children.isNavigable() = true;
			::SCAML::RootFolder::meta_DomainProfile_children.target() = ::SCAML::DomainProfile::meta;
		}
		void InitComposition104()
		{
			::Uml::Composition comp = ::Uml::Composition::Create(umldiagram);
			comp.nonpersistent() =false;
			::SCAML::RootFolder::meta_RootFolder_parent = ::Uml::CompositionParentRole::Create(comp);
			::SCAML::RootFolder::meta_RootFolder_parent.name() = "RootFolder_parent";
			::SCAML::RootFolder::meta_RootFolder_parent.isNavigable() = true;
			::SCAML::RootFolder::meta_RootFolder_parent.target() = ::SCAML::RootFolder::meta;
			::SCAML::RootFolder::meta_RootFolder_children = ::Uml::CompositionChildRole::Create(comp);
			::SCAML::RootFolder::meta_RootFolder_children.name() = "RootFolder";
			::SCAML::RootFolder::meta_RootFolder_children.min() = 0;
			::SCAML::RootFolder::meta_RootFolder_children.max() = -1;
			::SCAML::RootFolder::meta_RootFolder_children.isNavigable() = true;
			::SCAML::RootFolder::meta_RootFolder_children.target() = ::SCAML::RootFolder::meta;
		}
		void InitCrossNSCompositions()
		{
		}
		void InitInheritence()
		{
			connectdestBase::meta.subTypes() +=  ::SCAML::componentsupportedinterface::meta;
			connectdestBase::meta.subTypes() +=  ::SCAML::providesPort::meta;
			componentplacement_Members_Base::meta.subTypes() +=  ::SCAML::componentproperties::meta;
			componentplacement_Members_Base::meta.subTypes() +=  ::SCAML::devicepkgfile::meta;
			componentplacement_Members_Base::meta.subTypes() +=  ::SCAML::componentfile::meta;
			componentplacement_Members_Base::meta.subTypes() +=  ::SCAML::compositepartofdevice::meta;
			componentplacement_Members_Base::meta.subTypes() +=  ::SCAML::deployondevice::meta;
			componentplacement_Members_Base::meta.subTypes() +=  ::SCAML::devconfigcomponentfile::meta;
			componentplacement_Members_Base::meta.subTypes() +=  ::SCAML::SoftwareComponent::meta;
			externaltodestBase::meta.subTypes() +=  ::SCAML::componentsupportedinterface::meta;
			externaltodestBase::meta.subTypes() +=  ::SCAML::usesPort::meta;
			externaltodestBase::meta.subTypes() +=  ::SCAML::providesPort::meta;
			FreestandingPort::meta.subTypes() +=  ::SCAML::thisPort::meta;
			FreestandingPort::meta.subTypes() +=  ::SCAML::deviceusedbythiscomponentref::meta;
			FreestandingPort::meta.subTypes() +=  ::SCAML::service::meta;
			FreestandingPort::meta.subTypes() +=  ::SCAML::eventchannel::meta;
			FreestandingPort::meta.subTypes() +=  ::SCAML::devicethatloadedthiscomponentref::meta;
			service::meta.subTypes() +=  ::SCAML::log::meta;
			service::meta.subTypes() +=  ::SCAML::filemanager::meta;
			service::meta.subTypes() +=  ::SCAML::namingservice::meta;
			CFSrc::meta.subTypes() +=  ::SCAML::Event::meta;
			CFSrc::meta.subTypes() +=  ::SCAML::SimulinkEntrypoint::meta;
			CFSrc::meta.subTypes() +=  ::SCAML::port::meta;
			CFSrc::meta.subTypes() +=  ::SCAML::property::meta;
			CFSrc::meta.subTypes() +=  ::SCAML::DataMapping::meta;
			ArgRef::meta.subTypes() +=  ::SCAML::DataPort::meta;
			ArgRef::meta.subTypes() +=  ::SCAML::SimulinkVars::meta;
			CFDst::meta.subTypes() +=  ::SCAML::SimulinkEntrypoint::meta;
			CFDst::meta.subTypes() +=  ::SCAML::Branch::meta;
			CFDst::meta.subTypes() +=  ::SCAML::port::meta;
			CFDst::meta.subTypes() +=  ::SCAML::DataMapping::meta;
			propertyProxy::meta.subTypes() +=  ::SCAML::structsequencePropertyDescriptor::meta;
			propertyProxy::meta.subTypes() +=  ::SCAML::structPropertyDescriptor::meta;
			propertyProxy::meta.subTypes() +=  ::SCAML::simplesequencePropertyDescriptor::meta;
			propertyProxy::meta.subTypes() +=  ::SCAML::simplePropertyDescriptor::meta;
			port::meta.subTypes() +=  ::SCAML::usesPort::meta;
			port::meta.subTypes() +=  ::SCAML::providesPort::meta;
			componentfeatures::meta.subTypes() +=  ::SCAML::supports::meta;
			componentfeatures::meta.subTypes() +=  ::SCAML::port::meta;
			childhwdevice::meta.subTypes() +=  ::SCAML::hwdeviceregistration::meta;
			structBase::meta.subTypes() +=  ::SCAML::structsequencePropertyDescriptor::meta;
			structBase::meta.subTypes() +=  ::SCAML::structPropertyDescriptor::meta;
			simpleBase::meta.subTypes() +=  ::SCAML::simplesequencePropertyDescriptor::meta;
			simpleBase::meta.subTypes() +=  ::SCAML::simplePropertyDescriptor::meta;
			property::meta.subTypes() +=  ::SCAML::structBase::meta;
			property::meta.subTypes() +=  ::SCAML::simpleBase::meta;
			property::meta.subTypes() +=  ::SCAML::testPropertyDescriptor::meta;
			dependency::meta.subTypes() +=  ::SCAML::simplepropertyref::meta;
			dependency::meta.subTypes() +=  ::SCAML::softpkgref::meta;
			implementation::meta.subTypes() +=  ::SCAML::SimulinkImplementation::meta;
			DFFCO::meta.subTypes() +=  ::SCAML::port::meta;
			DFFCO::meta.subTypes() +=  ::SCAML::property::meta;
			DFFCO::meta.subTypes() +=  ::SCAML::DataPort::meta;
			DFFCO::meta.subTypes() +=  ::SCAML::DataMapping::meta;
			DataPort::meta.subTypes() +=  ::SCAML::DataInport::meta;
			DataPort::meta.subTypes() +=  ::SCAML::DataOutport::meta;
			WrapperPart::meta.subTypes() +=  ::SCAML::Event::meta;
			WrapperPart::meta.subTypes() +=  ::SCAML::ControlFlow::meta;
			WrapperPart::meta.subTypes() +=  ::SCAML::Branch::meta;
			WrapperPart::meta.subTypes() +=  ::SCAML::ThenFlow::meta;
			WrapperPart::meta.subTypes() +=  ::SCAML::ElseFlow::meta;
			WrapperPart::meta.subTypes() +=  ::SCAML::DataFlow::meta;
			WrapperPart::meta.subTypes() +=  ::SCAML::Var::meta;
			WrapperPart::meta.subTypes() +=  ::SCAML::Const::meta;
			WrapperPart::meta.subTypes() +=  ::SCAML::Function::meta;
			WrapperPart::meta.subTypes() +=  ::SCAML::DataMapping::meta;
			SoftwareComponent::meta.subTypes() +=  ::SCAML::SimulinkImplementation::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::connectdestBase::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::usestodestConn::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::externaltodestConn::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::externalport::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::externaltodestBase::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::freestandingtoprovidedConn::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::usestofreestandingConn::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::FreestandingPort::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::CFSrc::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::ArgRef::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::Arg::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::CFDst::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::controllertocompinst::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::assemblycontroller::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::componentresourcefactorytopropertiesConn::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::findcomponentConn::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::componentresourcefactoryref::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::propertyProxy::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::componentpropertiesConn::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::componentproperties::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::componentplacementConn::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::hostcollocation::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::inheritsfrom::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::Interface::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::interfaces::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::componentfeatures::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::devicepkgref::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::childhwdevice::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::structvalue::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::simpleref::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::structref::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::kind::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::enumeration::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::devicepkgfile::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::filesystemname::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::componentfile::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::compositepartofdevice::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::deployondevice::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::componentplacement::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::devconfigcomponentfile::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::devicemanagersoftpkg::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::usesImpl::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::dependency::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::usesdeviceref::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::usesdevice::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::propertyref::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::implref::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::runtime::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::processor::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::os::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::humanlanguage::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::compiler::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::programminglanguage::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::code::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::author::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::implementation::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::SimulinkSystem::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::DFFCO::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::WrapperPart::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::propertyfile::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::SoftPkgRef::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::SoftwareComponentRef::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::DevicePkgRef::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::SoftwarePackageRef::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::SoftwareComponent::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::Properties::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::SoftPkg::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::DevicePkg::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::DomainManagerConfiguration::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::SoftwareAssembly::meta;
			MgaObject::meta.subTypes() +=  ::SCAML::DeviceConfiguration::meta;
		}
		void InitCrossNSInheritence()
		{
		}
		void InitializeDgr()
		{
			Creates();
			InitClassesAttributes();
			CreatesNamespaces();
			InitNamespaces();
			InitAssociation0();
			InitAssociation1();
			InitAssociation2();
			InitAssociation3();
			InitAssociation4();
			InitAssociation5();
			InitAssociation6();
			InitAssociation7();
			InitAssociation8();
			InitAssociation9();
			InitAssociation10();
			InitAssociation11();
			InitAssociation12();
			InitAssociation13();
			InitAssociation14();
			InitAssociation15();
			InitAssociation16();
			InitAssociation17();
			InitAssociation18();
			InitAssociation19();
			InitAssociation20();
			InitAssociation21();
			InitAssociation22();
			InitAssociation23();
			InitAssociation24();
			InitAssociation25();
			InitAssociation26();
			InitAssociation27();
			InitAssociation28();
			InitAssociation29();
			InitAssociation30();
			InitAssociation31();
			InitAssociation32();
			InitAssociation33();
			InitAssociation34();
			InitAssociation35();
			InitAssociation36();
			InitAssociation37();
			InitAssociation38();
			InitAssociation39();
			InitAssociation40();
			InitAssociation41();
			InitAssociation42();
			InitComposition0();
			InitComposition1();
			InitComposition2();
			InitComposition3();
			InitComposition4();
			InitComposition5();
			InitComposition6();
			InitComposition7();
			InitComposition8();
			InitComposition9();
			InitComposition10();
			InitComposition11();
			InitComposition12();
			InitComposition13();
			InitComposition14();
			InitComposition15();
			InitComposition16();
			InitComposition17();
			InitComposition18();
			InitComposition19();
			InitComposition20();
			InitComposition21();
			InitComposition22();
			InitComposition23();
			InitComposition24();
			InitComposition25();
			InitComposition26();
			InitComposition27();
			InitComposition28();
			InitComposition29();
			InitComposition30();
			InitComposition31();
			InitComposition32();
			InitComposition33();
			InitComposition34();
			InitComposition35();
			InitComposition36();
			InitComposition37();
			InitComposition38();
			InitComposition39();
			InitComposition40();
			InitComposition41();
			InitComposition42();
			InitComposition43();
			InitComposition44();
			InitComposition45();
			InitComposition46();
			InitComposition47();
			InitComposition48();
			InitComposition49();
			InitComposition50();
			InitComposition51();
			InitComposition52();
			InitComposition53();
			InitComposition54();
			InitComposition55();
			InitComposition56();
			InitComposition57();
			InitComposition58();
			InitComposition59();
			InitComposition60();
			InitComposition61();
			InitComposition62();
			InitComposition63();
			InitComposition64();
			InitComposition65();
			InitComposition66();
			InitComposition67();
			InitComposition68();
			InitComposition69();
			InitComposition70();
			InitComposition71();
			InitComposition72();
			InitComposition73();
			InitComposition74();
			InitComposition75();
			InitComposition76();
			InitComposition77();
			InitComposition78();
			InitComposition79();
			InitComposition80();
			InitComposition81();
			InitComposition82();
			InitComposition83();
			InitComposition84();
			InitComposition85();
			InitComposition86();
			InitComposition87();
			InitComposition88();
			InitComposition89();
			InitComposition90();
			InitComposition91();
			InitComposition92();
			InitComposition93();
			InitComposition94();
			InitComposition95();
			InitComposition96();
			InitComposition97();
			InitComposition98();
			InitComposition99();
			InitComposition100();
			InitComposition101();
			InitComposition102();
			InitComposition103();
			InitComposition104();
			InitInheritence();
		}

		// initialize from another diagram
		void Creates2(const ::Uml::Diagram &dgr)
		{
			::Uml::SetClass(connectdestBase::meta, dgr, "connectdestBase");
			::Uml::SetClass(componentplacement_Members_Base::meta, dgr, "componentplacement_Members_Base");
			::Uml::SetClass(usestodestConn::meta, dgr, "usestodestConn");
			::Uml::SetClass(externaltodestConn::meta, dgr, "externaltodestConn");
			::Uml::SetClass(externalport::meta, dgr, "externalport");
			::Uml::SetClass(externaltodestBase::meta, dgr, "externaltodestBase");
			::Uml::SetClass(componentsupportedinterface::meta, dgr, "componentsupportedinterface");
			::Uml::SetClass(freestandingtoprovidedConn::meta, dgr, "freestandingtoprovidedConn");
			::Uml::SetClass(usestofreestandingConn::meta, dgr, "usestofreestandingConn");
			::Uml::SetClass(thisPort::meta, dgr, "thisPort");
			::Uml::SetClass(log::meta, dgr, "log");
			::Uml::SetClass(filemanager::meta, dgr, "filemanager");
			::Uml::SetAttribute(filemanager::meta_usagename, filemanager::meta, "usagename");
			::Uml::SetClass(namingservice::meta, dgr, "namingservice");
			::Uml::SetClass(FreestandingPort::meta, dgr, "FreestandingPort");
			::Uml::SetClass(deviceusedbythiscomponentref::meta, dgr, "deviceusedbythiscomponentref");
			::Uml::SetAttribute(deviceusedbythiscomponentref::meta_usesrefid, deviceusedbythiscomponentref::meta, "usesrefid");
			::Uml::SetClass(service::meta, dgr, "service");
			::Uml::SetClass(eventchannel::meta, dgr, "eventchannel");
			::Uml::SetClass(devicethatloadedthiscomponentref::meta, dgr, "devicethatloadedthiscomponentref");
			::Uml::SetClass(Event::meta, dgr, "Event");
			::Uml::SetClass(ControlFlow::meta, dgr, "ControlFlow");
			::Uml::SetClass(CFSrc::meta, dgr, "CFSrc");
			::Uml::SetClass(ArgRef::meta, dgr, "ArgRef");
			::Uml::SetClass(Arg::meta, dgr, "Arg");
			::Uml::SetClass(SimulinkEntrypoint::meta, dgr, "SimulinkEntrypoint");
			::Uml::SetClass(Branch::meta, dgr, "Branch");
			::Uml::SetClass(CFDst::meta, dgr, "CFDst");
			::Uml::SetClass(ThenFlow::meta, dgr, "ThenFlow");
			::Uml::SetClass(ElseFlow::meta, dgr, "ElseFlow");
			::Uml::SetClass(controllertocompinst::meta, dgr, "controllertocompinst");
			::Uml::SetClass(assemblycontroller::meta, dgr, "assemblycontroller");
			::Uml::SetClass(componentresourcefactorytopropertiesConn::meta, dgr, "componentresourcefactorytopropertiesConn");
			::Uml::SetClass(findcomponentConn::meta, dgr, "findcomponentConn");
			::Uml::SetClass(componentresourcefactoryref::meta, dgr, "componentresourcefactoryref");
			::Uml::SetClass(propertyProxy::meta, dgr, "propertyProxy");
			::Uml::SetClass(componentpropertiesConn::meta, dgr, "componentpropertiesConn");
			::Uml::SetClass(componentproperties::meta, dgr, "componentproperties");
			::Uml::SetAttribute(componentproperties::meta_value_s, componentproperties::meta, "value_s");
			::Uml::SetClass(componentplacementConn::meta, dgr, "componentplacementConn");
			::Uml::SetClass(hostcollocation::meta, dgr, "hostcollocation");
			::Uml::SetClass(InterfaceFolder::meta, dgr, "InterfaceFolder");
			::Uml::SetAttribute(InterfaceFolder::meta_name, InterfaceFolder::meta, "name");
			::Uml::SetClass(usesPort::meta, dgr, "usesPort");
			::Uml::SetAttribute(usesPort::meta_usesname, usesPort::meta, "usesname");
			::Uml::SetClass(providesPort::meta, dgr, "providesPort");
			::Uml::SetAttribute(providesPort::meta_providesname, providesPort::meta, "providesname");
			::Uml::SetClass(supports::meta, dgr, "supports");
			::Uml::SetAttribute(supports::meta_supportsname, supports::meta, "supportsname");
			::Uml::SetClass(inheritsfrom::meta, dgr, "inheritsfrom");
			::Uml::SetClass(Interface::meta, dgr, "Interface");
			::Uml::SetAttribute(Interface::meta_repid, Interface::meta, "repid");
			::Uml::SetClass(interfaces::meta, dgr, "interfaces");
			::Uml::SetClass(port::meta, dgr, "port");
			::Uml::SetAttribute(port::meta_isControl, port::meta, "isControl");
			::Uml::SetAttribute(port::meta_isData, port::meta, "isData");
			::Uml::SetAttribute(port::meta_isResponses, port::meta, "isResponses");
			::Uml::SetAttribute(port::meta_isTest, port::meta, "isTest");
			::Uml::SetClass(componentfeatures::meta, dgr, "componentfeatures");
			::Uml::SetClass(devicepkgref::meta, dgr, "devicepkgref");
			::Uml::SetClass(hwdeviceregistration::meta, dgr, "hwdeviceregistration");
			::Uml::SetAttribute(hwdeviceregistration::meta_modelnumber, hwdeviceregistration::meta, "modelnumber");
			::Uml::SetAttribute(hwdeviceregistration::meta_id, hwdeviceregistration::meta, "id");
			::Uml::SetAttribute(hwdeviceregistration::meta_version, hwdeviceregistration::meta, "version");
			::Uml::SetAttribute(hwdeviceregistration::meta_description, hwdeviceregistration::meta, "description");
			::Uml::SetAttribute(hwdeviceregistration::meta_deviceclass, hwdeviceregistration::meta, "deviceclass");
			::Uml::SetAttribute(hwdeviceregistration::meta_manufacturer, hwdeviceregistration::meta, "manufacturer");
			::Uml::SetClass(childhwdevice::meta, dgr, "childhwdevice");
			::Uml::SetClass(structBase::meta, dgr, "structBase");
			::Uml::SetAttribute(structBase::meta_mode, structBase::meta, "mode");
			::Uml::SetAttribute(structBase::meta_configurationkind, structBase::meta, "configurationkind");
			::Uml::SetClass(simpleBase::meta, dgr, "simpleBase");
			::Uml::SetAttribute(simpleBase::meta_range_min, simpleBase::meta, "range_min");
			::Uml::SetAttribute(simpleBase::meta_units, simpleBase::meta, "units");
			::Uml::SetAttribute(simpleBase::meta_range_max, simpleBase::meta, "range_max");
			::Uml::SetAttribute(simpleBase::meta_action, simpleBase::meta, "action");
			::Uml::SetAttribute(simpleBase::meta_mode, simpleBase::meta, "mode");
			::Uml::SetAttribute(simpleBase::meta_type, simpleBase::meta, "type");
			::Uml::SetClass(structvalue::meta, dgr, "structvalue");
			::Uml::SetClass(simpleref::meta, dgr, "simpleref");
			::Uml::SetAttribute(simpleref::meta_value, simpleref::meta, "value");
			::Uml::SetClass(structref::meta, dgr, "structref");
			::Uml::SetClass(structsequencePropertyDescriptor::meta, dgr, "structsequencePropertyDescriptor");
			::Uml::SetClass(structPropertyDescriptor::meta, dgr, "structPropertyDescriptor");
			::Uml::SetClass(testPropertyDescriptor::meta, dgr, "testPropertyDescriptor");
			::Uml::SetClass(kind::meta, dgr, "kind");
			::Uml::SetAttribute(kind::meta_kindtype, kind::meta, "kindtype");
			::Uml::SetClass(simplesequencePropertyDescriptor::meta, dgr, "simplesequencePropertyDescriptor");
			::Uml::SetAttribute(simplesequencePropertyDescriptor::meta_values, simplesequencePropertyDescriptor::meta, "values");
			::Uml::SetClass(property::meta, dgr, "property");
			::Uml::SetAttribute(property::meta_id, property::meta, "id");
			::Uml::SetAttribute(property::meta_description, property::meta, "description");
			::Uml::SetClass(simplePropertyDescriptor::meta, dgr, "simplePropertyDescriptor");
			::Uml::SetAttribute(simplePropertyDescriptor::meta_value, simplePropertyDescriptor::meta, "value");
			::Uml::SetClass(enumeration::meta, dgr, "enumeration");
			::Uml::SetAttribute(enumeration::meta_value, enumeration::meta, "value");
			::Uml::SetAttribute(enumeration::meta_label, enumeration::meta, "label");
			::Uml::SetClass(devicepkgfile::meta, dgr, "devicepkgfile");
			::Uml::SetAttribute(devicepkgfile::meta_type, devicepkgfile::meta, "type");
			::Uml::SetClass(filesystemname::meta, dgr, "filesystemname");
			::Uml::SetAttribute(filesystemname::meta_deviceid, filesystemname::meta, "deviceid");
			::Uml::SetAttribute(filesystemname::meta_mountname, filesystemname::meta, "mountname");
			::Uml::SetClass(componentfile::meta, dgr, "componentfile");
			::Uml::SetClass(compositepartofdevice::meta, dgr, "compositepartofdevice");
			::Uml::SetClass(deployondevice::meta, dgr, "deployondevice");
			::Uml::SetClass(componentplacement::meta, dgr, "componentplacement");
			::Uml::SetClass(devconfigcomponentfile::meta, dgr, "devconfigcomponentfile");
			::Uml::SetClass(devicemanagersoftpkg::meta, dgr, "devicemanagersoftpkg");
			::Uml::SetClass(usesImpl::meta, dgr, "usesImpl");
			::Uml::SetClass(dependency::meta, dgr, "dependency");
			::Uml::SetAttribute(dependency::meta_type, dependency::meta, "type");
			::Uml::SetClass(usesdeviceref::meta, dgr, "usesdeviceref");
			::Uml::SetClass(usesdevice::meta, dgr, "usesdevice");
			::Uml::SetAttribute(usesdevice::meta_type, usesdevice::meta, "type");
			::Uml::SetClass(propertyref::meta, dgr, "propertyref");
			::Uml::SetClass(implref::meta, dgr, "implref");
			::Uml::SetClass(simplepropertyref::meta, dgr, "simplepropertyref");
			::Uml::SetAttribute(simplepropertyref::meta_value, simplepropertyref::meta, "value");
			::Uml::SetClass(softpkgref::meta, dgr, "softpkgref");
			::Uml::SetClass(runtime::meta, dgr, "runtime");
			::Uml::SetAttribute(runtime::meta_version, runtime::meta, "version");
			::Uml::SetClass(processor::meta, dgr, "processor");
			::Uml::SetClass(os::meta, dgr, "os");
			::Uml::SetAttribute(os::meta_version, os::meta, "version");
			::Uml::SetClass(humanlanguage::meta, dgr, "humanlanguage");
			::Uml::SetClass(compiler::meta, dgr, "compiler");
			::Uml::SetAttribute(compiler::meta_version, compiler::meta, "version");
			::Uml::SetClass(programminglanguage::meta, dgr, "programminglanguage");
			::Uml::SetAttribute(programminglanguage::meta_version, programminglanguage::meta, "version");
			::Uml::SetClass(code::meta, dgr, "code");
			::Uml::SetAttribute(code::meta_entrypoint, code::meta, "entrypoint");
			::Uml::SetAttribute(code::meta_localfile, code::meta, "localfile");
			::Uml::SetAttribute(code::meta_stacksize, code::meta, "stacksize");
			::Uml::SetAttribute(code::meta_priority, code::meta, "priority");
			::Uml::SetAttribute(code::meta_type, code::meta, "type");
			::Uml::SetClass(author::meta, dgr, "author");
			::Uml::SetAttribute(author::meta_company, author::meta, "company");
			::Uml::SetAttribute(author::meta_names, author::meta, "names");
			::Uml::SetAttribute(author::meta_webpage, author::meta, "webpage");
			::Uml::SetClass(implementation::meta, dgr, "implementation");
			::Uml::SetAttribute(implementation::meta_aepcompliance, implementation::meta, "aepcompliance");
			::Uml::SetAttribute(implementation::meta_description, implementation::meta, "description");
			::Uml::SetAttribute(implementation::meta_id, implementation::meta, "id");
			::Uml::SetClass(SimulinkSystem::meta, dgr, "SimulinkSystem");
			::Uml::SetClass(DataInport::meta, dgr, "DataInport");
			::Uml::SetClass(DataOutport::meta, dgr, "DataOutport");
			::Uml::SetClass(DataFlow::meta, dgr, "DataFlow");
			::Uml::SetClass(DFFCO::meta, dgr, "DFFCO");
			::Uml::SetClass(Var::meta, dgr, "Var");
			::Uml::SetClass(Const::meta, dgr, "Const");
			::Uml::SetClass(Function::meta, dgr, "Function");
			::Uml::SetClass(SimulinkImplementation::meta, dgr, "SimulinkImplementation");
			::Uml::SetClass(DataPort::meta, dgr, "DataPort");
			::Uml::SetClass(DataMapping::meta, dgr, "DataMapping");
			::Uml::SetClass(WrapperPart::meta, dgr, "WrapperPart");
			::Uml::SetClass(SimulinkVars::meta, dgr, "SimulinkVars");
			::Uml::SetClass(propertyfile::meta, dgr, "propertyfile");
			::Uml::SetAttribute(propertyfile::meta_type, propertyfile::meta, "type");
			::Uml::SetClass(SoftPkgRef::meta, dgr, "SoftPkgRef");
			::Uml::SetClass(SoftPkgFolder::meta, dgr, "SoftPkgFolder");
			::Uml::SetAttribute(SoftPkgFolder::meta_name, SoftPkgFolder::meta, "name");
			::Uml::SetClass(SoftwareComponentRef::meta, dgr, "SoftwareComponentRef");
			::Uml::SetClass(SoftwareComponentFolder::meta, dgr, "SoftwareComponentFolder");
			::Uml::SetAttribute(SoftwareComponentFolder::meta_name, SoftwareComponentFolder::meta, "name");
			::Uml::SetClass(DevicePkgRef::meta, dgr, "DevicePkgRef");
			::Uml::SetClass(DevicePackageFolder::meta, dgr, "DevicePackageFolder");
			::Uml::SetAttribute(DevicePackageFolder::meta_name, DevicePackageFolder::meta, "name");
			::Uml::SetClass(DeviceConfigurationFolder::meta, dgr, "DeviceConfigurationFolder");
			::Uml::SetAttribute(DeviceConfigurationFolder::meta_name, DeviceConfigurationFolder::meta, "name");
			::Uml::SetClass(PropertiesFolder::meta, dgr, "PropertiesFolder");
			::Uml::SetAttribute(PropertiesFolder::meta_name, PropertiesFolder::meta, "name");
			::Uml::SetClass(SoftwarePackageRef::meta, dgr, "SoftwarePackageRef");
			::Uml::SetClass(SoftwareComponent::meta, dgr, "SoftwareComponent");
			::Uml::SetAttribute(SoftwareComponent::meta_componentrepid, SoftwareComponent::meta, "componentrepid");
			::Uml::SetAttribute(SoftwareComponent::meta_corbaversion, SoftwareComponent::meta, "corbaversion");
			::Uml::SetAttribute(SoftwareComponent::meta_componenttype, SoftwareComponent::meta, "componenttype");
			::Uml::SetAttribute(SoftwareComponent::meta_usagename, SoftwareComponent::meta, "usagename");
			::Uml::SetClass(Properties::meta, dgr, "Properties");
			::Uml::SetClass(SoftPkg::meta, dgr, "SoftPkg");
			::Uml::SetAttribute(SoftPkg::meta_description, SoftPkg::meta, "description");
			::Uml::SetAttribute(SoftPkg::meta_title, SoftPkg::meta, "title");
			::Uml::SetAttribute(SoftPkg::meta_type, SoftPkg::meta, "type");
			::Uml::SetAttribute(SoftPkg::meta_version, SoftPkg::meta, "version");
			::Uml::SetAttribute(SoftPkg::meta_id, SoftPkg::meta, "id");
			::Uml::SetClass(DevicePkg::meta, dgr, "DevicePkg");
			::Uml::SetAttribute(DevicePkg::meta_version, DevicePkg::meta, "version");
			::Uml::SetAttribute(DevicePkg::meta_id, DevicePkg::meta, "id");
			::Uml::SetAttribute(DevicePkg::meta_title, DevicePkg::meta, "title");
			::Uml::SetAttribute(DevicePkg::meta_description, DevicePkg::meta, "description");
			::Uml::SetClass(DomainProfile::meta, dgr, "DomainProfile");
			::Uml::SetAttribute(DomainProfile::meta_name, DomainProfile::meta, "name");
			::Uml::SetClass(DomainManagerConfiguration::meta, dgr, "DomainManagerConfiguration");
			::Uml::SetAttribute(DomainManagerConfiguration::meta_description, DomainManagerConfiguration::meta, "description");
			::Uml::SetClass(SoftwareAssembly::meta, dgr, "SoftwareAssembly");
			::Uml::SetAttribute(SoftwareAssembly::meta_description, SoftwareAssembly::meta, "description");
			::Uml::SetAttribute(SoftwareAssembly::meta_version, SoftwareAssembly::meta, "version");
			::Uml::SetClass(DeviceConfiguration::meta, dgr, "DeviceConfiguration");
			::Uml::SetAttribute(DeviceConfiguration::meta_id, DeviceConfiguration::meta, "id");
			::Uml::SetAttribute(DeviceConfiguration::meta_description, DeviceConfiguration::meta, "description");
			::Uml::SetAttribute(DeviceConfiguration::meta_domainmanager, DeviceConfiguration::meta, "domainmanager");
			::Uml::SetClass(RootFolder::meta, dgr, "RootFolder");
			::Uml::SetAttribute(RootFolder::meta_name, RootFolder::meta, "name");
			::Uml::SetClass(MgaObject::meta, dgr, "MgaObject");
			::Uml::SetAttribute(MgaObject::meta_position, MgaObject::meta, "position");
			::Uml::SetAttribute(MgaObject::meta_name, MgaObject::meta, "name");
		}
		void CreatesNamespaces2(const ::Uml::Diagram &dgr)
		{
		}
		void InitializeDgrSetupMeta(const ::Uml::Diagram & dgr)
		{
			Creates2(dgr);
			CreatesNamespaces2(dgr);
		}
		void InitializeDgr2()
		{
			//composition child roles 
			::Uml::SetParentRole(usestodestConn::meta_DeviceConfiguration_parent, usestodestConn::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(usestodestConn::meta_SoftwareAssembly_parent, usestodestConn::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(externaltodestConn::meta_SoftwareAssembly_parent, externaltodestConn::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(externalport::meta_SoftwareAssembly_parent, externalport::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(componentsupportedinterface::meta_SoftwareAssembly_parent, componentsupportedinterface::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(freestandingtoprovidedConn::meta_DeviceConfiguration_parent, freestandingtoprovidedConn::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(freestandingtoprovidedConn::meta_SoftwareAssembly_parent, freestandingtoprovidedConn::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(usestofreestandingConn::meta_DeviceConfiguration_parent, usestofreestandingConn::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(usestofreestandingConn::meta_SoftwareAssembly_parent, usestofreestandingConn::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(thisPort::meta_DeviceConfiguration_parent, thisPort::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(FreestandingPort::meta_SoftwareAssembly_parent, FreestandingPort::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(service::meta_DeviceConfiguration_parent, service::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(Arg::meta_SimulinkEntrypoint_parent, Arg::meta, ::SCAML::SimulinkEntrypoint::meta, "", "");
			::Uml::SetParentRole(SimulinkEntrypoint::meta_SimulinkSystem_parent, SimulinkEntrypoint::meta, ::SCAML::SimulinkSystem::meta, "", "");
			::Uml::SetParentRole(controllertocompinst::meta_SoftwareAssembly_parent, controllertocompinst::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(assemblycontroller::meta_SoftwareAssembly_parent, assemblycontroller::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(componentresourcefactorytopropertiesConn::meta_SoftwareAssembly_parent, componentresourcefactorytopropertiesConn::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(findcomponentConn::meta_SoftwareAssembly_parent, findcomponentConn::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(componentresourcefactoryref::meta_SoftwareAssembly_parent, componentresourcefactoryref::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(componentpropertiesConn::meta_DeviceConfiguration_parent, componentpropertiesConn::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(componentpropertiesConn::meta_SoftwareAssembly_parent, componentpropertiesConn::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(componentproperties::meta_DeviceConfiguration_parent, componentproperties::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(componentproperties::meta_SoftwareAssembly_parent, componentproperties::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(componentplacementConn::meta_SoftwareAssembly_parent, componentplacementConn::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(hostcollocation::meta_SoftwareAssembly_parent, hostcollocation::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(InterfaceFolder::meta_RootFolder_parent, InterfaceFolder::meta, ::SCAML::RootFolder::meta, "", "");
			::Uml::SetParentRole(usesPort::meta_uses_SoftwareComponent_parent, usesPort::meta, ::SCAML::SoftwareComponent::meta, "uses", "");
			::Uml::SetParentRole(providesPort::meta_provides_SoftwareComponent_parent, providesPort::meta, ::SCAML::SoftwareComponent::meta, "provides", "");
			::Uml::SetParentRole(supports::meta_SoftwareComponent_parent, supports::meta, ::SCAML::SoftwareComponent::meta, "", "");
			::Uml::SetParentRole(inheritsfrom::meta_interfaces_parent, inheritsfrom::meta, ::SCAML::interfaces::meta, "", "");
			::Uml::SetParentRole(Interface::meta_interfaces_parent, Interface::meta, ::SCAML::interfaces::meta, "", "");
			::Uml::SetParentRole(interfaces::meta_InterfaceFolder_parent, interfaces::meta, ::SCAML::InterfaceFolder::meta, "", "");
			::Uml::SetParentRole(devicepkgref::meta_hwdeviceregistration_parent, devicepkgref::meta, ::SCAML::hwdeviceregistration::meta, "", "");
			::Uml::SetParentRole(hwdeviceregistration::meta_DevicePkg_parent, hwdeviceregistration::meta, ::SCAML::DevicePkg::meta, "", "");
			::Uml::SetParentRole(childhwdevice::meta_hwdeviceregistration_parent, childhwdevice::meta, ::SCAML::hwdeviceregistration::meta, "", "");
			::Uml::SetParentRole(structvalue::meta_structsequencePropertyDescriptor_parent, structvalue::meta, ::SCAML::structsequencePropertyDescriptor::meta, "", "");
			::Uml::SetParentRole(simpleref::meta_structvalue_parent, simpleref::meta, ::SCAML::structvalue::meta, "", "");
			::Uml::SetParentRole(structref::meta_structref_structsequencePropertyDescriptor_parent, structref::meta, ::SCAML::structsequencePropertyDescriptor::meta, "structref", "");
			::Uml::SetParentRole(kind::meta_simpleBase_parent, kind::meta, ::SCAML::simpleBase::meta, "", "");
			::Uml::SetParentRole(property::meta_properties_Properties_parent, property::meta, ::SCAML::Properties::meta, "properties", "");
			::Uml::SetParentRole(simplePropertyDescriptor::meta_resultvalue_testPropertyDescriptor_parent, simplePropertyDescriptor::meta, ::SCAML::testPropertyDescriptor::meta, "resultvalue", "");
			::Uml::SetParentRole(simplePropertyDescriptor::meta_simple_structPropertyDescriptor_parent, simplePropertyDescriptor::meta, ::SCAML::structPropertyDescriptor::meta, "simple", "");
			::Uml::SetParentRole(simplePropertyDescriptor::meta_inputvalue_testPropertyDescriptor_parent, simplePropertyDescriptor::meta, ::SCAML::testPropertyDescriptor::meta, "inputvalue", "");
			::Uml::SetParentRole(enumeration::meta_enumerations_simplePropertyDescriptor_parent, enumeration::meta, ::SCAML::simplePropertyDescriptor::meta, "enumerations", "");
			::Uml::SetParentRole(devicepkgfile::meta_DeviceConfiguration_parent, devicepkgfile::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(filesystemname::meta_DeviceConfiguration_parent, filesystemname::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(componentfile::meta_DeviceConfiguration_parent, componentfile::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(componentfile::meta_SoftwareAssembly_parent, componentfile::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(compositepartofdevice::meta_DeviceConfiguration_parent, compositepartofdevice::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(deployondevice::meta_DeviceConfiguration_parent, deployondevice::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(componentplacement::meta_DeviceConfiguration_parent, componentplacement::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(devconfigcomponentfile::meta_DeviceConfiguration_parent, devconfigcomponentfile::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(devicemanagersoftpkg::meta_DeviceConfiguration_parent, devicemanagersoftpkg::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(usesImpl::meta_implementation_parent, usesImpl::meta, ::SCAML::implementation::meta, "", "");
			::Uml::SetParentRole(dependency::meta_implementation_parent, dependency::meta, ::SCAML::implementation::meta, "", "");
			::Uml::SetParentRole(usesdeviceref::meta_usesdevice_parent, usesdeviceref::meta, ::SCAML::usesdevice::meta, "", "");
			::Uml::SetParentRole(usesdevice::meta_SoftPkg_parent, usesdevice::meta, ::SCAML::SoftPkg::meta, "", "");
			::Uml::SetParentRole(usesdevice::meta_implementation_parent, usesdevice::meta, ::SCAML::implementation::meta, "", "");
			::Uml::SetParentRole(propertyref::meta_usesdevice_parent, propertyref::meta, ::SCAML::usesdevice::meta, "", "");
			::Uml::SetParentRole(implref::meta_implementation_parent, implref::meta, ::SCAML::implementation::meta, "", "");
			::Uml::SetParentRole(runtime::meta_implementation_parent, runtime::meta, ::SCAML::implementation::meta, "", "");
			::Uml::SetParentRole(processor::meta_implementation_parent, processor::meta, ::SCAML::implementation::meta, "", "");
			::Uml::SetParentRole(os::meta_implementation_parent, os::meta, ::SCAML::implementation::meta, "", "");
			::Uml::SetParentRole(humanlanguage::meta_implementation_parent, humanlanguage::meta, ::SCAML::implementation::meta, "", "");
			::Uml::SetParentRole(compiler::meta_implementation_parent, compiler::meta, ::SCAML::implementation::meta, "", "");
			::Uml::SetParentRole(programminglanguage::meta_implementation_parent, programminglanguage::meta, ::SCAML::implementation::meta, "", "");
			::Uml::SetParentRole(code::meta_implementation_parent, code::meta, ::SCAML::implementation::meta, "", "");
			::Uml::SetParentRole(author::meta_DevicePkg_parent, author::meta, ::SCAML::DevicePkg::meta, "", "");
			::Uml::SetParentRole(author::meta_SoftPkg_parent, author::meta, ::SCAML::SoftPkg::meta, "", "");
			::Uml::SetParentRole(implementation::meta_SoftPkg_parent, implementation::meta, ::SCAML::SoftPkg::meta, "", "");
			::Uml::SetParentRole(SimulinkSystem::meta_SimulinkImplementation_parent, SimulinkSystem::meta, ::SCAML::SimulinkImplementation::meta, "", "");
			::Uml::SetParentRole(DataPort::meta_SimulinkSystem_parent, DataPort::meta, ::SCAML::SimulinkSystem::meta, "", "");
			::Uml::SetParentRole(WrapperPart::meta_SimulinkImplementation_parent, WrapperPart::meta, ::SCAML::SimulinkImplementation::meta, "", "");
			::Uml::SetParentRole(SimulinkVars::meta_SimulinkSystem_parent, SimulinkVars::meta, ::SCAML::SimulinkSystem::meta, "", "");
			::Uml::SetParentRole(propertyfile::meta_hwdeviceregistration_parent, propertyfile::meta, ::SCAML::hwdeviceregistration::meta, "", "");
			::Uml::SetParentRole(propertyfile::meta_implementation_parent, propertyfile::meta, ::SCAML::implementation::meta, "", "");
			::Uml::SetParentRole(propertyfile::meta_SoftwareComponent_parent, propertyfile::meta, ::SCAML::SoftwareComponent::meta, "", "");
			::Uml::SetParentRole(propertyfile::meta_SoftPkg_parent, propertyfile::meta, ::SCAML::SoftPkg::meta, "", "");
			::Uml::SetParentRole(SoftPkgRef::meta_DomainManagerConfiguration_parent, SoftPkgRef::meta, ::SCAML::DomainManagerConfiguration::meta, "", "");
			::Uml::SetParentRole(SoftPkgFolder::meta_RootFolder_parent, SoftPkgFolder::meta, ::SCAML::RootFolder::meta, "", "");
			::Uml::SetParentRole(SoftPkgFolder::meta_DomainProfile_parent, SoftPkgFolder::meta, ::SCAML::DomainProfile::meta, "", "");
			::Uml::SetParentRole(SoftwareComponentRef::meta_DeviceConfiguration_parent, SoftwareComponentRef::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(SoftwareComponentRef::meta_descriptor_SoftPkg_parent, SoftwareComponentRef::meta, ::SCAML::SoftPkg::meta, "descriptor", "");
			::Uml::SetParentRole(SoftwareComponentFolder::meta_RootFolder_parent, SoftwareComponentFolder::meta, ::SCAML::RootFolder::meta, "", "");
			::Uml::SetParentRole(SoftwareComponentFolder::meta_DomainProfile_parent, SoftwareComponentFolder::meta, ::SCAML::DomainProfile::meta, "", "");
			::Uml::SetParentRole(DevicePkgRef::meta_DeviceConfiguration_parent, DevicePkgRef::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(DevicePackageFolder::meta_RootFolder_parent, DevicePackageFolder::meta, ::SCAML::RootFolder::meta, "", "");
			::Uml::SetParentRole(DevicePackageFolder::meta_DomainProfile_parent, DevicePackageFolder::meta, ::SCAML::DomainProfile::meta, "", "");
			::Uml::SetParentRole(DeviceConfigurationFolder::meta_RootFolder_parent, DeviceConfigurationFolder::meta, ::SCAML::RootFolder::meta, "", "");
			::Uml::SetParentRole(DeviceConfigurationFolder::meta_DomainProfile_parent, DeviceConfigurationFolder::meta, ::SCAML::DomainProfile::meta, "", "");
			::Uml::SetParentRole(PropertiesFolder::meta_RootFolder_parent, PropertiesFolder::meta, ::SCAML::RootFolder::meta, "", "");
			::Uml::SetParentRole(PropertiesFolder::meta_DomainProfile_parent, PropertiesFolder::meta, ::SCAML::DomainProfile::meta, "", "");
			::Uml::SetParentRole(SoftwarePackageRef::meta_DeviceConfiguration_parent, SoftwarePackageRef::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(SoftwarePackageRef::meta_SoftwareAssembly_parent, SoftwarePackageRef::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(SoftwareComponent::meta_SoftwareComponentFolder_parent, SoftwareComponent::meta, ::SCAML::SoftwareComponentFolder::meta, "", "");
			::Uml::SetParentRole(SoftwareComponent::meta_SoftwareAssembly_parent, SoftwareComponent::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetParentRole(SoftwareComponent::meta_DeviceConfiguration_parent, SoftwareComponent::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetParentRole(Properties::meta_PropertiesFolder_parent, Properties::meta, ::SCAML::PropertiesFolder::meta, "", "");
			::Uml::SetParentRole(SoftPkg::meta_SoftPkgFolder_parent, SoftPkg::meta, ::SCAML::SoftPkgFolder::meta, "", "");
			::Uml::SetParentRole(DevicePkg::meta_DevicePackageFolder_parent, DevicePkg::meta, ::SCAML::DevicePackageFolder::meta, "", "");
			::Uml::SetParentRole(DomainProfile::meta_RootFolder_parent, DomainProfile::meta, ::SCAML::RootFolder::meta, "", "");
			::Uml::SetParentRole(DomainManagerConfiguration::meta_DomainProfile_parent, DomainManagerConfiguration::meta, ::SCAML::DomainProfile::meta, "", "");
			::Uml::SetParentRole(SoftwareAssembly::meta_DomainProfile_parent, SoftwareAssembly::meta, ::SCAML::DomainProfile::meta, "", "");
			::Uml::SetParentRole(DeviceConfiguration::meta_DeviceConfigurationFolder_parent, DeviceConfiguration::meta, ::SCAML::DeviceConfigurationFolder::meta, "", "");
			::Uml::SetParentRole(RootFolder::meta_RootFolder_parent, RootFolder::meta, ::SCAML::RootFolder::meta, "", "");

			// composition parentroles 
			::Uml::SetChildRole(SimulinkEntrypoint::meta_Arg_children, SimulinkEntrypoint::meta, ::SCAML::Arg::meta, "", "");
			::Uml::SetChildRole(InterfaceFolder::meta_interfaces_children, InterfaceFolder::meta, ::SCAML::interfaces::meta, "", "");
			::Uml::SetChildRole(interfaces::meta_Interface_children, interfaces::meta, ::SCAML::Interface::meta, "", "");
			::Uml::SetChildRole(interfaces::meta_inheritsfrom_children, interfaces::meta, ::SCAML::inheritsfrom::meta, "", "");
			::Uml::SetChildRole(hwdeviceregistration::meta_devicepkgref_children, hwdeviceregistration::meta, ::SCAML::devicepkgref::meta, "", "");
			::Uml::SetChildRole(hwdeviceregistration::meta_propertyfile_children, hwdeviceregistration::meta, ::SCAML::propertyfile::meta, "", "");
			::Uml::SetChildRole(hwdeviceregistration::meta_childhwdevice_children, hwdeviceregistration::meta, ::SCAML::childhwdevice::meta, "", "");
			::Uml::SetChildRole(simpleBase::meta_kind_children, simpleBase::meta, ::SCAML::kind::meta, "", "");
			::Uml::SetChildRole(structvalue::meta_simpleref_children, structvalue::meta, ::SCAML::simpleref::meta, "", "");
			::Uml::SetChildRole(structsequencePropertyDescriptor::meta_structref, structsequencePropertyDescriptor::meta, ::SCAML::structref::meta, "", "structref");
			::Uml::SetChildRole(structsequencePropertyDescriptor::meta_structvalue_children, structsequencePropertyDescriptor::meta, ::SCAML::structvalue::meta, "", "");
			::Uml::SetChildRole(structPropertyDescriptor::meta_simple, structPropertyDescriptor::meta, ::SCAML::simplePropertyDescriptor::meta, "", "simple");
			::Uml::SetChildRole(testPropertyDescriptor::meta_inputvalue, testPropertyDescriptor::meta, ::SCAML::simplePropertyDescriptor::meta, "", "inputvalue");
			::Uml::SetChildRole(testPropertyDescriptor::meta_resultvalue, testPropertyDescriptor::meta, ::SCAML::simplePropertyDescriptor::meta, "", "resultvalue");
			::Uml::SetChildRole(simplePropertyDescriptor::meta_enumerations, simplePropertyDescriptor::meta, ::SCAML::enumeration::meta, "", "enumerations");
			::Uml::SetChildRole(usesdevice::meta_propertyref_children, usesdevice::meta, ::SCAML::propertyref::meta, "", "");
			::Uml::SetChildRole(usesdevice::meta_usesdeviceref_children, usesdevice::meta, ::SCAML::usesdeviceref::meta, "", "");
			::Uml::SetChildRole(implementation::meta_implref_children, implementation::meta, ::SCAML::implref::meta, "", "");
			::Uml::SetChildRole(implementation::meta_usesImpl_children, implementation::meta, ::SCAML::usesImpl::meta, "", "");
			::Uml::SetChildRole(implementation::meta_dependency_children, implementation::meta, ::SCAML::dependency::meta, "", "");
			::Uml::SetChildRole(implementation::meta_code_child, implementation::meta, ::SCAML::code::meta, "", "");
			::Uml::SetChildRole(implementation::meta_humanlanguage_child, implementation::meta, ::SCAML::humanlanguage::meta, "", "");
			::Uml::SetChildRole(implementation::meta_runtime_child, implementation::meta, ::SCAML::runtime::meta, "", "");
			::Uml::SetChildRole(implementation::meta_compiler_child, implementation::meta, ::SCAML::compiler::meta, "", "");
			::Uml::SetChildRole(implementation::meta_processor_children, implementation::meta, ::SCAML::processor::meta, "", "");
			::Uml::SetChildRole(implementation::meta_os_children, implementation::meta, ::SCAML::os::meta, "", "");
			::Uml::SetChildRole(implementation::meta_propertyfile_children, implementation::meta, ::SCAML::propertyfile::meta, "", "");
			::Uml::SetChildRole(implementation::meta_usesdevice_children, implementation::meta, ::SCAML::usesdevice::meta, "", "");
			::Uml::SetChildRole(implementation::meta_programminglanguage_child, implementation::meta, ::SCAML::programminglanguage::meta, "", "");
			::Uml::SetChildRole(SimulinkSystem::meta_DataPort_children, SimulinkSystem::meta, ::SCAML::DataPort::meta, "", "");
			::Uml::SetChildRole(SimulinkSystem::meta_SimulinkVars_children, SimulinkSystem::meta, ::SCAML::SimulinkVars::meta, "", "");
			::Uml::SetChildRole(SimulinkSystem::meta_SimulinkEntrypoint_children, SimulinkSystem::meta, ::SCAML::SimulinkEntrypoint::meta, "", "");
			::Uml::SetChildRole(SimulinkImplementation::meta_WrapperPart_children, SimulinkImplementation::meta, ::SCAML::WrapperPart::meta, "", "");
			::Uml::SetChildRole(SimulinkImplementation::meta_SimulinkSystem_children, SimulinkImplementation::meta, ::SCAML::SimulinkSystem::meta, "", "");
			::Uml::SetChildRole(SoftPkgFolder::meta_SoftPkg_children, SoftPkgFolder::meta, ::SCAML::SoftPkg::meta, "", "");
			::Uml::SetChildRole(SoftwareComponentFolder::meta_SoftwareComponent_children, SoftwareComponentFolder::meta, ::SCAML::SoftwareComponent::meta, "", "");
			::Uml::SetChildRole(DevicePackageFolder::meta_DevicePkg_children, DevicePackageFolder::meta, ::SCAML::DevicePkg::meta, "", "");
			::Uml::SetChildRole(DeviceConfigurationFolder::meta_DeviceConfiguration_children, DeviceConfigurationFolder::meta, ::SCAML::DeviceConfiguration::meta, "", "");
			::Uml::SetChildRole(PropertiesFolder::meta_Properties_children, PropertiesFolder::meta, ::SCAML::Properties::meta, "", "");
			::Uml::SetChildRole(SoftwareComponent::meta_supports_children, SoftwareComponent::meta, ::SCAML::supports::meta, "", "");
			::Uml::SetChildRole(SoftwareComponent::meta_propertyfile_child, SoftwareComponent::meta, ::SCAML::propertyfile::meta, "", "");
			::Uml::SetChildRole(SoftwareComponent::meta_uses, SoftwareComponent::meta, ::SCAML::usesPort::meta, "", "uses");
			::Uml::SetChildRole(SoftwareComponent::meta_provides, SoftwareComponent::meta, ::SCAML::providesPort::meta, "", "provides");
			::Uml::SetChildRole(Properties::meta_properties, Properties::meta, ::SCAML::property::meta, "", "properties");
			::Uml::SetChildRole(SoftPkg::meta_propertyfile_child, SoftPkg::meta, ::SCAML::propertyfile::meta, "", "");
			::Uml::SetChildRole(SoftPkg::meta_descriptor, SoftPkg::meta, ::SCAML::SoftwareComponentRef::meta, "", "descriptor");
			::Uml::SetChildRole(SoftPkg::meta_author_children, SoftPkg::meta, ::SCAML::author::meta, "", "");
			::Uml::SetChildRole(SoftPkg::meta_usesdevice_children, SoftPkg::meta, ::SCAML::usesdevice::meta, "", "");
			::Uml::SetChildRole(SoftPkg::meta_implementation_children, SoftPkg::meta, ::SCAML::implementation::meta, "", "");
			::Uml::SetChildRole(DevicePkg::meta_author_children, DevicePkg::meta, ::SCAML::author::meta, "", "");
			::Uml::SetChildRole(DevicePkg::meta_hwdeviceregistration_children, DevicePkg::meta, ::SCAML::hwdeviceregistration::meta, "", "");
			::Uml::SetChildRole(DomainProfile::meta_SoftwareComponentFolder_children, DomainProfile::meta, ::SCAML::SoftwareComponentFolder::meta, "", "");
			::Uml::SetChildRole(DomainProfile::meta_SoftPkgFolder_children, DomainProfile::meta, ::SCAML::SoftPkgFolder::meta, "", "");
			::Uml::SetChildRole(DomainProfile::meta_DevicePackageFolder_children, DomainProfile::meta, ::SCAML::DevicePackageFolder::meta, "", "");
			::Uml::SetChildRole(DomainProfile::meta_DeviceConfigurationFolder_children, DomainProfile::meta, ::SCAML::DeviceConfigurationFolder::meta, "", "");
			::Uml::SetChildRole(DomainProfile::meta_PropertiesFolder_children, DomainProfile::meta, ::SCAML::PropertiesFolder::meta, "", "");
			::Uml::SetChildRole(DomainProfile::meta_SoftwareAssembly_children, DomainProfile::meta, ::SCAML::SoftwareAssembly::meta, "", "");
			::Uml::SetChildRole(DomainProfile::meta_DomainManagerConfiguration_children, DomainProfile::meta, ::SCAML::DomainManagerConfiguration::meta, "", "");
			::Uml::SetChildRole(DomainManagerConfiguration::meta_SoftPkgRef_children, DomainManagerConfiguration::meta, ::SCAML::SoftPkgRef::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_componentsupportedinterface_children, SoftwareAssembly::meta, ::SCAML::componentsupportedinterface::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_SoftwarePackageRef_children, SoftwareAssembly::meta, ::SCAML::SoftwarePackageRef::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_usestodestConn_children, SoftwareAssembly::meta, ::SCAML::usestodestConn::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_usestofreestandingConn_children, SoftwareAssembly::meta, ::SCAML::usestofreestandingConn::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_freestandingtoprovidedConn_children, SoftwareAssembly::meta, ::SCAML::freestandingtoprovidedConn::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_externaltodestConn_children, SoftwareAssembly::meta, ::SCAML::externaltodestConn::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_externalport_children, SoftwareAssembly::meta, ::SCAML::externalport::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_FreestandingPort_children, SoftwareAssembly::meta, ::SCAML::FreestandingPort::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_controllertocompinst_children, SoftwareAssembly::meta, ::SCAML::controllertocompinst::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_assemblycontroller_children, SoftwareAssembly::meta, ::SCAML::assemblycontroller::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_SoftwareComponent_children, SoftwareAssembly::meta, ::SCAML::SoftwareComponent::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_componentfile_children, SoftwareAssembly::meta, ::SCAML::componentfile::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_componentresourcefactoryref_children, SoftwareAssembly::meta, ::SCAML::componentresourcefactoryref::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_componentproperties_children, SoftwareAssembly::meta, ::SCAML::componentproperties::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_findcomponentConn_children, SoftwareAssembly::meta, ::SCAML::findcomponentConn::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_componentresourcefactorytopropertiesConn_children, SoftwareAssembly::meta, ::SCAML::componentresourcefactorytopropertiesConn::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_componentpropertiesConn_children, SoftwareAssembly::meta, ::SCAML::componentpropertiesConn::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_componentplacementConn_children, SoftwareAssembly::meta, ::SCAML::componentplacementConn::meta, "", "");
			::Uml::SetChildRole(SoftwareAssembly::meta_hostcollocation_children, SoftwareAssembly::meta, ::SCAML::hostcollocation::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_SoftwarePackageRef_children, DeviceConfiguration::meta, ::SCAML::SoftwarePackageRef::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_DevicePkgRef_children, DeviceConfiguration::meta, ::SCAML::DevicePkgRef::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_devicepkgfile_children, DeviceConfiguration::meta, ::SCAML::devicepkgfile::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_thisPort_children, DeviceConfiguration::meta, ::SCAML::thisPort::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_SoftwareComponent_children, DeviceConfiguration::meta, ::SCAML::SoftwareComponent::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_filesystemname_children, DeviceConfiguration::meta, ::SCAML::filesystemname::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_componentpropertiesConn_children, DeviceConfiguration::meta, ::SCAML::componentpropertiesConn::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_componentproperties_children, DeviceConfiguration::meta, ::SCAML::componentproperties::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_componentfile_children, DeviceConfiguration::meta, ::SCAML::componentfile::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_service_children, DeviceConfiguration::meta, ::SCAML::service::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_freestandingtoprovidedConn_children, DeviceConfiguration::meta, ::SCAML::freestandingtoprovidedConn::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_usestofreestandingConn_children, DeviceConfiguration::meta, ::SCAML::usestofreestandingConn::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_usestodestConn_children, DeviceConfiguration::meta, ::SCAML::usestodestConn::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_SoftwareComponentRef_children, DeviceConfiguration::meta, ::SCAML::SoftwareComponentRef::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_compositepartofdevice_children, DeviceConfiguration::meta, ::SCAML::compositepartofdevice::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_deployondevice_children, DeviceConfiguration::meta, ::SCAML::deployondevice::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_componentplacement_children, DeviceConfiguration::meta, ::SCAML::componentplacement::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_devconfigcomponentfile_children, DeviceConfiguration::meta, ::SCAML::devconfigcomponentfile::meta, "", "");
			::Uml::SetChildRole(DeviceConfiguration::meta_devicemanagersoftpkg_children, DeviceConfiguration::meta, ::SCAML::devicemanagersoftpkg::meta, "", "");
			::Uml::SetChildRole(RootFolder::meta_SoftPkgFolder_children, RootFolder::meta, ::SCAML::SoftPkgFolder::meta, "", "");
			::Uml::SetChildRole(RootFolder::meta_InterfaceFolder_children, RootFolder::meta, ::SCAML::InterfaceFolder::meta, "", "");
			::Uml::SetChildRole(RootFolder::meta_SoftwareComponentFolder_children, RootFolder::meta, ::SCAML::SoftwareComponentFolder::meta, "", "");
			::Uml::SetChildRole(RootFolder::meta_DevicePackageFolder_children, RootFolder::meta, ::SCAML::DevicePackageFolder::meta, "", "");
			::Uml::SetChildRole(RootFolder::meta_DeviceConfigurationFolder_children, RootFolder::meta, ::SCAML::DeviceConfigurationFolder::meta, "", "");
			::Uml::SetChildRole(RootFolder::meta_PropertiesFolder_children, RootFolder::meta, ::SCAML::PropertiesFolder::meta, "", "");
			::Uml::SetChildRole(RootFolder::meta_DomainProfile_children, RootFolder::meta, ::SCAML::DomainProfile::meta, "", "");
			::Uml::SetChildRole(RootFolder::meta_RootFolder_children, RootFolder::meta, ::SCAML::RootFolder::meta, "", "");

			// Association roles 
			::Uml::SetAssocRole(connectdestBase::meta_srcusestodestConn, connectdestBase::meta, ::SCAML::usesPort::meta, "dstusestodestConn");
			::SCAML::usesPort::meta_dstusestodestConn_rev = connectdestBase::meta_srcusestodestConn;
			::Uml::SetAssocRole(componentplacement_Members_Base::meta_setcomponentplacement, componentplacement_Members_Base::meta, ::SCAML::componentplacement::meta, "members");
			::Uml::SetAssocRole(externalport::meta_dstexternaltodestConn, externalport::meta, ::SCAML::externaltodestBase::meta, "srcexternaltodestConn");
			::SCAML::externaltodestBase::meta_srcexternaltodestConn_rev = externalport::meta_dstexternaltodestConn;
			::Uml::SetAssocRole(externaltodestBase::meta_srcexternaltodestConn, externaltodestBase::meta, ::SCAML::externalport::meta, "dstexternaltodestConn");
			::SCAML::externalport::meta_dstexternaltodestConn_rev = externaltodestBase::meta_srcexternaltodestConn;
			::Uml::SetAssocRole(componentsupportedinterface::meta_ref, componentsupportedinterface::meta, ::SCAML::supports::meta, "referedbycomponentsupportedinterface");
			::Uml::SetAssocRole(FreestandingPort::meta_srcusestofreestandingConn, FreestandingPort::meta, ::SCAML::usesPort::meta, "dstusestofreestandingConn");
			::SCAML::usesPort::meta_dstusestofreestandingConn_rev = FreestandingPort::meta_srcusestofreestandingConn;
			::Uml::SetAssocRole(FreestandingPort::meta_dstfreestandingtoprovidedConn, FreestandingPort::meta, ::SCAML::providesPort::meta, "srcfreestandingtoprovidedConn");
			::SCAML::providesPort::meta_srcfreestandingtoprovidedConn_rev = FreestandingPort::meta_dstfreestandingtoprovidedConn;
			::Uml::SetAssocRole(CFSrc::meta_dstControlFlow, CFSrc::meta, ::SCAML::CFDst::meta, "srcControlFlow");
			::SCAML::CFDst::meta_srcControlFlow_rev = CFSrc::meta_dstControlFlow;
			::Uml::SetAssocRole(ArgRef::meta_referedbyArg, ArgRef::meta, ::SCAML::Arg::meta, "ref");
			::Uml::SetAssocRole(Arg::meta_ref, Arg::meta, ::SCAML::ArgRef::meta, "referedbyArg");
			::Uml::SetAssocRole(Branch::meta_dstElseFlow, Branch::meta, ::SCAML::CFDst::meta, "srcElseFlow");
			::SCAML::CFDst::meta_srcElseFlow_rev = Branch::meta_dstElseFlow;
			::Uml::SetAssocRole(Branch::meta_dstThenFlow, Branch::meta, ::SCAML::CFDst::meta, "srcThenFlow");
			::SCAML::CFDst::meta_srcThenFlow_rev = Branch::meta_dstThenFlow;
			::Uml::SetAssocRole(CFDst::meta_srcControlFlow, CFDst::meta, ::SCAML::CFSrc::meta, "dstControlFlow");
			::SCAML::CFSrc::meta_dstControlFlow_rev = CFDst::meta_srcControlFlow;
			::Uml::SetAssocRole(CFDst::meta_srcElseFlow, CFDst::meta, ::SCAML::Branch::meta, "dstElseFlow");
			::SCAML::Branch::meta_dstElseFlow_rev = CFDst::meta_srcElseFlow;
			::Uml::SetAssocRole(CFDst::meta_srcThenFlow, CFDst::meta, ::SCAML::Branch::meta, "dstThenFlow");
			::SCAML::Branch::meta_dstThenFlow_rev = CFDst::meta_srcThenFlow;
			::Uml::SetAssocRole(assemblycontroller::meta_dstcontrollertocompinst, assemblycontroller::meta, ::SCAML::SoftwareComponent::meta, "srccontrollertocompinst");
			::SCAML::SoftwareComponent::meta_srccontrollertocompinst_rev = assemblycontroller::meta_dstcontrollertocompinst;
			::Uml::SetAssocRole(componentresourcefactoryref::meta_dstfindcomponentConn, componentresourcefactoryref::meta, ::SCAML::SoftwareComponent::meta, "srcfindcomponentConn");
			::SCAML::SoftwareComponent::meta_srcfindcomponentConn_rev = componentresourcefactoryref::meta_dstfindcomponentConn;
			::Uml::SetAssocRole(componentresourcefactoryref::meta_dstcomponentresourcefactorytopropertiesConn, componentresourcefactoryref::meta, ::SCAML::componentproperties::meta, "srccomponentresourcefactorytopropertiesConn");
			::SCAML::componentproperties::meta_srccomponentresourcefactorytopropertiesConn_rev = componentresourcefactoryref::meta_dstcomponentresourcefactorytopropertiesConn;
			::Uml::SetAssocRole(componentresourcefactoryref::meta_ref, componentresourcefactoryref::meta, ::SCAML::SoftwareComponent::meta, "referedbycomponentresourcefactoryref");
			::Uml::SetAssocRole(propertyProxy::meta_referedbycomponentproperties, propertyProxy::meta, ::SCAML::componentproperties::meta, "ref");
			::Uml::SetAssocRole(componentproperties::meta_srccomponentresourcefactorytopropertiesConn, componentproperties::meta, ::SCAML::componentresourcefactoryref::meta, "dstcomponentresourcefactorytopropertiesConn");
			::SCAML::componentresourcefactoryref::meta_dstcomponentresourcefactorytopropertiesConn_rev = componentproperties::meta_srccomponentresourcefactorytopropertiesConn;
			::Uml::SetAssocRole(componentproperties::meta_ref, componentproperties::meta, ::SCAML::propertyProxy::meta, "referedbycomponentproperties");
			::Uml::SetAssocRole(componentproperties::meta_srccomponentpropertiesConn, componentproperties::meta, ::SCAML::SoftwareComponent::meta, "dstcomponentpropertiesConn");
			::SCAML::SoftwareComponent::meta_dstcomponentpropertiesConn_rev = componentproperties::meta_srccomponentpropertiesConn;
			::Uml::SetAssocRole(hostcollocation::meta_members, hostcollocation::meta, ::SCAML::SoftwareComponent::meta, "sethostcollocation");
			::Uml::SetAssocRole(usesPort::meta_dstusestodestConn, usesPort::meta, ::SCAML::connectdestBase::meta, "srcusestodestConn");
			::SCAML::connectdestBase::meta_srcusestodestConn_rev = usesPort::meta_dstusestodestConn;
			::Uml::SetAssocRole(usesPort::meta_dstusestofreestandingConn, usesPort::meta, ::SCAML::FreestandingPort::meta, "srcusestofreestandingConn");
			::SCAML::FreestandingPort::meta_srcusestofreestandingConn_rev = usesPort::meta_dstusestofreestandingConn;
			::Uml::SetAssocRole(usesPort::meta_ref, usesPort::meta, ::SCAML::Interface::meta, "referedbyusesPort");
			::Uml::SetAssocRole(providesPort::meta_srcfreestandingtoprovidedConn, providesPort::meta, ::SCAML::FreestandingPort::meta, "dstfreestandingtoprovidedConn");
			::SCAML::FreestandingPort::meta_dstfreestandingtoprovidedConn_rev = providesPort::meta_srcfreestandingtoprovidedConn;
			::Uml::SetAssocRole(providesPort::meta_ref, providesPort::meta, ::SCAML::Interface::meta, "referedbyprovidesPort");
			::Uml::SetAssocRole(supports::meta_referedbycomponentsupportedinterface, supports::meta, ::SCAML::componentsupportedinterface::meta, "ref");
			::Uml::SetAssocRole(supports::meta_ref, supports::meta, ::SCAML::Interface::meta, "referedbysupports");
			::Uml::SetAssocRole(Interface::meta_referedbyusesPort, Interface::meta, ::SCAML::usesPort::meta, "ref");
			::Uml::SetAssocRole(Interface::meta_referedbyprovidesPort, Interface::meta, ::SCAML::providesPort::meta, "ref");
			::Uml::SetAssocRole(Interface::meta_referedbysupports, Interface::meta, ::SCAML::supports::meta, "ref");
			::Uml::SetAssocRole(Interface::meta_dstinheritsfrom, Interface::meta, ::SCAML::Interface::meta, "srcinheritsfrom");
			::SCAML::Interface::meta_srcinheritsfrom_rev = Interface::meta_dstinheritsfrom;
			::Uml::SetAssocRole(Interface::meta_srcinheritsfrom, Interface::meta, ::SCAML::Interface::meta, "dstinheritsfrom");
			::SCAML::Interface::meta_dstinheritsfrom_rev = Interface::meta_srcinheritsfrom;
			::Uml::SetAssocRole(devicepkgref::meta_ref, devicepkgref::meta, ::SCAML::DevicePkg::meta, "referedbydevicepkgref");
			::Uml::SetAssocRole(simpleref::meta_ref, simpleref::meta, ::SCAML::simplePropertyDescriptor::meta, "referedbystructvalue");
			::Uml::SetAssocRole(structref::meta_ref, structref::meta, ::SCAML::structPropertyDescriptor::meta, "referedbystructref");
			::Uml::SetAssocRole(structPropertyDescriptor::meta_referedbystructref, structPropertyDescriptor::meta, ::SCAML::structref::meta, "ref");
			::Uml::SetAssocRole(simplePropertyDescriptor::meta_referedbystructvalue, simplePropertyDescriptor::meta, ::SCAML::simpleref::meta, "ref");
			::Uml::SetAssocRole(simplePropertyDescriptor::meta_referedbysimplepropertyref, simplePropertyDescriptor::meta, ::SCAML::simplepropertyref::meta, "ref");
			::Uml::SetAssocRole(devicepkgfile::meta_ref, devicepkgfile::meta, ::SCAML::DevicePkg::meta, "referedbydevicepkgfile");
			::Uml::SetAssocRole(componentfile::meta_dstcomponentplacementConn, componentfile::meta, ::SCAML::SoftwareComponent::meta, "srccomponentplacementConn");
			::SCAML::SoftwareComponent::meta_srccomponentplacementConn_rev = componentfile::meta_dstcomponentplacementConn;
			::Uml::SetAssocRole(componentfile::meta_ref, componentfile::meta, ::SCAML::SoftPkg::meta, "referedbycomponentfile");
			::Uml::SetAssocRole(compositepartofdevice::meta_ref, compositepartofdevice::meta, ::SCAML::SoftwareComponent::meta, "referedbycompositepartofdevice");
			::Uml::SetAssocRole(deployondevice::meta_ref, deployondevice::meta, ::SCAML::SoftwareComponent::meta, "referedbydeployondevice");
			::Uml::SetAssocRole(componentplacement::meta_members, componentplacement::meta, ::SCAML::componentplacement_Members_Base::meta, "setcomponentplacement");
			::Uml::SetAssocRole(devconfigcomponentfile::meta_ref, devconfigcomponentfile::meta, ::SCAML::SoftPkg::meta, "referedbydevconfigcomponentfile");
			::Uml::SetAssocRole(devicemanagersoftpkg::meta_ref, devicemanagersoftpkg::meta, ::SCAML::SoftPkg::meta, "referedbydevicemanagersoftpkg");
			::Uml::SetAssocRole(usesdeviceref::meta_ref, usesdeviceref::meta, ::SCAML::DevicePkg::meta, "referedbyusesdeviceref");
			::Uml::SetAssocRole(propertyref::meta_ref, propertyref::meta, ::SCAML::Properties::meta, "referedbypropertyref");
			::Uml::SetAssocRole(implref::meta_srcusesImpl, implref::meta, ::SCAML::softpkgref::meta, "dstusesImpl");
			::SCAML::softpkgref::meta_dstusesImpl_rev = implref::meta_srcusesImpl;
			::Uml::SetAssocRole(implref::meta_ref, implref::meta, ::SCAML::implementation::meta, "referedbyimplref");
			::Uml::SetAssocRole(simplepropertyref::meta_ref, simplepropertyref::meta, ::SCAML::simplePropertyDescriptor::meta, "referedbysimplepropertyref");
			::Uml::SetAssocRole(softpkgref::meta_dstusesImpl, softpkgref::meta, ::SCAML::implref::meta, "srcusesImpl");
			::SCAML::implref::meta_srcusesImpl_rev = softpkgref::meta_dstusesImpl;
			::Uml::SetAssocRole(softpkgref::meta_ref, softpkgref::meta, ::SCAML::SoftPkg::meta, "referedbysoftpkgref");
			::Uml::SetAssocRole(implementation::meta_referedbyimplref, implementation::meta, ::SCAML::implref::meta, "ref");
			::Uml::SetAssocRole(DFFCO::meta_srcDataFlow, DFFCO::meta, ::SCAML::DFFCO::meta, "dstDataFlow");
			::SCAML::DFFCO::meta_dstDataFlow_rev = DFFCO::meta_srcDataFlow;
			::Uml::SetAssocRole(DFFCO::meta_dstDataFlow, DFFCO::meta, ::SCAML::DFFCO::meta, "srcDataFlow");
			::SCAML::DFFCO::meta_srcDataFlow_rev = DFFCO::meta_dstDataFlow;
			::Uml::SetAssocRole(propertyfile::meta_ref, propertyfile::meta, ::SCAML::Properties::meta, "referedbypropertyfile");
			::Uml::SetAssocRole(SoftPkgRef::meta_ref, SoftPkgRef::meta, ::SCAML::SoftPkg::meta, "referedbySoftPkgRef");
			::Uml::SetAssocRole(SoftwareComponentRef::meta_ref, SoftwareComponentRef::meta, ::SCAML::SoftwareComponent::meta, "referedbySoftwareComponentRef");
			::Uml::SetAssocRole(DevicePkgRef::meta_ref, DevicePkgRef::meta, ::SCAML::DevicePkg::meta, "referedbyDevicePkgRef");
			::Uml::SetAssocRole(SoftwarePackageRef::meta_ref, SoftwarePackageRef::meta, ::SCAML::SoftPkg::meta, "referedbySoftwarePackageRef");
			::Uml::SetAssocRole(SoftwareComponent::meta_srccontrollertocompinst, SoftwareComponent::meta, ::SCAML::assemblycontroller::meta, "dstcontrollertocompinst");
			::SCAML::assemblycontroller::meta_dstcontrollertocompinst_rev = SoftwareComponent::meta_srccontrollertocompinst;
			::Uml::SetAssocRole(SoftwareComponent::meta_srcfindcomponentConn, SoftwareComponent::meta, ::SCAML::componentresourcefactoryref::meta, "dstfindcomponentConn");
			::SCAML::componentresourcefactoryref::meta_dstfindcomponentConn_rev = SoftwareComponent::meta_srcfindcomponentConn;
			::Uml::SetAssocRole(SoftwareComponent::meta_referedbycomponentresourcefactoryref, SoftwareComponent::meta, ::SCAML::componentresourcefactoryref::meta, "ref");
			::Uml::SetAssocRole(SoftwareComponent::meta_dstcomponentpropertiesConn, SoftwareComponent::meta, ::SCAML::componentproperties::meta, "srccomponentpropertiesConn");
			::SCAML::componentproperties::meta_srccomponentpropertiesConn_rev = SoftwareComponent::meta_dstcomponentpropertiesConn;
			::Uml::SetAssocRole(SoftwareComponent::meta_sethostcollocation, SoftwareComponent::meta, ::SCAML::hostcollocation::meta, "members");
			::Uml::SetAssocRole(SoftwareComponent::meta_srccomponentplacementConn, SoftwareComponent::meta, ::SCAML::componentfile::meta, "dstcomponentplacementConn");
			::SCAML::componentfile::meta_dstcomponentplacementConn_rev = SoftwareComponent::meta_srccomponentplacementConn;
			::Uml::SetAssocRole(SoftwareComponent::meta_referedbycompositepartofdevice, SoftwareComponent::meta, ::SCAML::compositepartofdevice::meta, "ref");
			::Uml::SetAssocRole(SoftwareComponent::meta_referedbydeployondevice, SoftwareComponent::meta, ::SCAML::deployondevice::meta, "ref");
			::Uml::SetAssocRole(SoftwareComponent::meta_referedbySoftwareComponentRef, SoftwareComponent::meta, ::SCAML::SoftwareComponentRef::meta, "ref");
			::Uml::SetAssocRole(Properties::meta_referedbypropertyref, Properties::meta, ::SCAML::propertyref::meta, "ref");
			::Uml::SetAssocRole(Properties::meta_referedbypropertyfile, Properties::meta, ::SCAML::propertyfile::meta, "ref");
			::Uml::SetAssocRole(SoftPkg::meta_referedbycomponentfile, SoftPkg::meta, ::SCAML::componentfile::meta, "ref");
			::Uml::SetAssocRole(SoftPkg::meta_referedbydevconfigcomponentfile, SoftPkg::meta, ::SCAML::devconfigcomponentfile::meta, "ref");
			::Uml::SetAssocRole(SoftPkg::meta_referedbydevicemanagersoftpkg, SoftPkg::meta, ::SCAML::devicemanagersoftpkg::meta, "ref");
			::Uml::SetAssocRole(SoftPkg::meta_referedbysoftpkgref, SoftPkg::meta, ::SCAML::softpkgref::meta, "ref");
			::Uml::SetAssocRole(SoftPkg::meta_referedbySoftPkgRef, SoftPkg::meta, ::SCAML::SoftPkgRef::meta, "ref");
			::Uml::SetAssocRole(SoftPkg::meta_referedbySoftwarePackageRef, SoftPkg::meta, ::SCAML::SoftwarePackageRef::meta, "ref");
			::Uml::SetAssocRole(DevicePkg::meta_referedbydevicepkgref, DevicePkg::meta, ::SCAML::devicepkgref::meta, "ref");
			::Uml::SetAssocRole(DevicePkg::meta_referedbydevicepkgfile, DevicePkg::meta, ::SCAML::devicepkgfile::meta, "ref");
			::Uml::SetAssocRole(DevicePkg::meta_referedbyusesdeviceref, DevicePkg::meta, ::SCAML::usesdeviceref::meta, "ref");
			::Uml::SetAssocRole(DevicePkg::meta_referedbyDevicePkgRef, DevicePkg::meta, ::SCAML::DevicePkgRef::meta, "ref");
			usestodestConn::meta_dstusestodestConn_end_ = ::SCAML::usesPort::meta_dstusestodestConn;
			usestodestConn::meta_srcusestodestConn_end_ = ::SCAML::connectdestBase::meta_srcusestodestConn;
			externaltodestConn::meta_dstexternaltodestConn_end_ = ::SCAML::externalport::meta_dstexternaltodestConn;
			externaltodestConn::meta_srcexternaltodestConn_end_ = ::SCAML::externaltodestBase::meta_srcexternaltodestConn;
			freestandingtoprovidedConn::meta_srcfreestandingtoprovidedConn_end_ = ::SCAML::providesPort::meta_srcfreestandingtoprovidedConn;
			freestandingtoprovidedConn::meta_dstfreestandingtoprovidedConn_end_ = ::SCAML::FreestandingPort::meta_dstfreestandingtoprovidedConn;
			usestofreestandingConn::meta_dstusestofreestandingConn_end_ = ::SCAML::usesPort::meta_dstusestofreestandingConn;
			usestofreestandingConn::meta_srcusestofreestandingConn_end_ = ::SCAML::FreestandingPort::meta_srcusestofreestandingConn;
			ControlFlow::meta_dstControlFlow_end_ = ::SCAML::CFSrc::meta_dstControlFlow;
			ControlFlow::meta_srcControlFlow_end_ = ::SCAML::CFDst::meta_srcControlFlow;
			ThenFlow::meta_srcThenFlow_end_ = ::SCAML::CFDst::meta_srcThenFlow;
			ThenFlow::meta_dstThenFlow_end_ = ::SCAML::Branch::meta_dstThenFlow;
			ElseFlow::meta_srcElseFlow_end_ = ::SCAML::CFDst::meta_srcElseFlow;
			ElseFlow::meta_dstElseFlow_end_ = ::SCAML::Branch::meta_dstElseFlow;
			controllertocompinst::meta_dstcontrollertocompinst_end_ = ::SCAML::assemblycontroller::meta_dstcontrollertocompinst;
			controllertocompinst::meta_srccontrollertocompinst_end_ = ::SCAML::SoftwareComponent::meta_srccontrollertocompinst;
			componentresourcefactorytopropertiesConn::meta_srccomponentresourcefactorytopropertiesConn_end_ = ::SCAML::componentproperties::meta_srccomponentresourcefactorytopropertiesConn;
			componentresourcefactorytopropertiesConn::meta_dstcomponentresourcefactorytopropertiesConn_end_ = ::SCAML::componentresourcefactoryref::meta_dstcomponentresourcefactorytopropertiesConn;
			findcomponentConn::meta_srcfindcomponentConn_end_ = ::SCAML::SoftwareComponent::meta_srcfindcomponentConn;
			findcomponentConn::meta_dstfindcomponentConn_end_ = ::SCAML::componentresourcefactoryref::meta_dstfindcomponentConn;
			componentpropertiesConn::meta_dstcomponentpropertiesConn_end_ = ::SCAML::SoftwareComponent::meta_dstcomponentpropertiesConn;
			componentpropertiesConn::meta_srccomponentpropertiesConn_end_ = ::SCAML::componentproperties::meta_srccomponentpropertiesConn;
			componentplacementConn::meta_srccomponentplacementConn_end_ = ::SCAML::SoftwareComponent::meta_srccomponentplacementConn;
			componentplacementConn::meta_dstcomponentplacementConn_end_ = ::SCAML::componentfile::meta_dstcomponentplacementConn;
			inheritsfrom::meta_srcinheritsfrom_end_ = ::SCAML::Interface::meta_srcinheritsfrom;
			inheritsfrom::meta_dstinheritsfrom_end_ = ::SCAML::Interface::meta_dstinheritsfrom;
			usesImpl::meta_dstusesImpl_end_ = ::SCAML::softpkgref::meta_dstusesImpl;
			usesImpl::meta_srcusesImpl_end_ = ::SCAML::implref::meta_srcusesImpl;
			DataFlow::meta_dstDataFlow_end_ = ::SCAML::DFFCO::meta_dstDataFlow;
			DataFlow::meta_srcDataFlow_end_ = ::SCAML::DFFCO::meta_srcDataFlow;

			// namespaces
			
		}

	 void Initialize()
	{
		static bool first = true;
		if(!first) return;
		first = false;
		::Uml::Initialize();

		ASSERT( umldiagram == Udm::null );
		UdmStatic::StaticDataNetwork * meta_dn = new UdmStatic::StaticDataNetwork(::Uml::diagram);
		meta_dn->CreateNew("SCAML.mem", "", ::Uml::Diagram::meta, Udm::CHANGES_LOST_DEFAULT);
		umldiagram = ::Uml::Diagram::Cast(meta_dn->GetRootObject());
		umldiagram.name() ="SCAML";
		umldiagram.version() ="1.00";
		InitializeDgr();

		UdmDom::str_xsd_storage::StoreXsd("SCAML.xsd", SCAML_xsd::getString());

		InitCrossNSInheritence();
		InitCrossNSCompositions();
		InitCrossNSAssociations();

	};

	 void Initialize(const ::Uml::Diagram &dgr)
	{
		umldiagram = dgr;
		InitializeDgrSetupMeta(dgr);
		InitializeDgr2();

	};

	 Udm::UdmDiagram diagram = { &umldiagram, Initialize };
	static struct _regClass
	{
		_regClass()
		{
			Udm::MetaDepository::StoreDiagram("SCAML", diagram);
		};
		~_regClass()
		{
			Udm::MetaDepository::RemoveDiagram("SCAML");
		};
	} __regUnUsed;

}
// END SCAML.cpp
